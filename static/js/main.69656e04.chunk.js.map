{"version":3,"sources":["ecs/types/Vector2.ts","ecs/components/Attack.ts","ecs/components/Circle.ts","ecs/components/Collidable.ts","ecs/components/Destination.ts","ecs/components/DestroyedOnImpact.ts","ecs/components/Lifespan.ts","ecs/components/Moveable.ts","ecs/components/RectangleSelection.ts","ecs/components/Selectable.ts","ecs/components/Team.ts","ecs/utils/unitVector.ts","ecs/utils/distanceBetween.ts","ecs/systems/Attacker.ts","ecs/systems/Mover.ts","ecs/utils/positionsAreClose.ts","ecs/systems/RectangleSelector.ts","ecs/systems/Renderer.ts","ecs/systems/Selector.ts","ecs/systems/Stopper.ts","ecs/systems/EnforceLifespan.ts","ecs/Game.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Vector2","x","y","this","source","Vector2Type","createType","name","default","copy","copyCopyable","clone","cloneClonable","Attack","projectileColor","projectileSpeed","projectileLifetime","minimumRefactoryPeriod","lastAttack","Component","schema","type","Types","String","Number","Circle","color","radius","position","Collidable","TagComponent","Destination","DestroyedOnImpact","Lifespan","ttl","createdAt","Moveable","direction","speed","RectangleSelection","startPosition","endPosition","Selectable","selected","Boolean","Team","unitVector","r","Math","sqrt","distanceBetween","a","b","dX","dY","Attacker","closestTarget","attacker","getComponent","team","targets","queries","results","filter","entity","R","target","targetPosition","attackTarget","time","attack","getMutableComponent","spawnPosition","world","createEntity","addComponent","_delta","attackers","forEach","System","components","Mover","onMouseDown","e","button","clientX","clientY","vector","set","selectables","delta","_time","moveables","mX","mY","positionsAreClose","threshold","RectangleSelector","onMouseMove","rectangleSelections","onMouseUp","remove","circles","circleEntity","selectable","withinX","withinY","Renderer","canvas","colors","priority","ctx","clear","fillStyle","background","fillRect","width","height","drawCircle","beginPath","arc","PI","fill","lineWidth","strokeStyle","stroke","selection","drawRectangleSelection","w","h","strokeRect","getContext","Selector","clickPosition","selectCircles","anySelected","deselectAllCircles","isCloseTo","e1","e2","c1","c2","Stopper","stopIfAtDestination","destination","removeComponent","stopIfColliding","isCollision","collideables","hasComponent","withDestination","EnforceLifespan","withLifepan","friendly","enemy","projectile","Game","lastTime","animationFrameRequest","start","i","createFriendly","createEnemy","run","stop","cancelAnimationFrame","mover","getSystem","selector","rectangleSelector","performance","now","execute","requestAnimationFrame","World","registerSystem","registerComponent","App","React","useState","setCanvas","gameRef","useRef","useEffect","current","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener","className","ref","preventDefault","stopPropagation","onContextMenu","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","unregister","navigator","serviceWorker","ready","then","registration","catch","error","console","message"],"mappings":"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","file":"static/js/main.69656e04.chunk.js","sourcesContent":["import { createType, copyCopyable, cloneClonable } from \"ecsy\";\n\nclass Vector2 {\n  x: number;\n  y: number;\n\n  constructor(x: number = 0, y: number = 0) {\n    this.x = x;\n    this.y = y;\n  }\n\n  set(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n    return this;\n  }\n\n  copy(source: Vector2) {\n    this.x = source.x;\n    this.y = source.y;\n    return this;\n  }\n\n  clone() {\n    return new Vector2(this.x, this.y)\n  }\n}\n\nexport default Vector2\n\nexport const Vector2Type = createType({\n  name: \"Vector2\",\n  default: new Vector2(),\n  copy: copyCopyable,\n  clone: cloneClonable\n});","import { Component, Types } from \"ecsy\";\n\nclass Attack extends Component<Attack> {\n  projectileColor: string = '#000000';\n  projectileSpeed: number = 0;\n  projectileLifetime: number = 0;\n  minimumRefactoryPeriod: number = 0; \n  lastAttack: number = 0;\n}\n\nAttack.schema = {\n  projectileColor: { type: Types.String },\n  projectileSpeed: { type: Types.Number },\n  projectileLifetime: { type: Types.Number },\n  minimumRefactoryPeriod: { type: Types.Number },\n  lastAttack: { type: Types.Number },\n}\n\nexport default Attack","import { Component, Types } from \"ecsy\";\nimport Vector2, { Vector2Type } from \"../types/Vector2\";\n\nclass Circle extends Component<Circle> {\n  color: string = '#000000';\n  radius: number = 0\n  position: Vector2 = new Vector2()\n}\n\nCircle.schema = {\n  color: {type: Types.String},\n  radius: { type: Types.Number }, \n  position: { type: Vector2Type },\n}\n\nexport default Circle","import { TagComponent } from \"ecsy\";\n\nclass Collidable extends TagComponent {}\n\nexport default Collidable","import { Component } from \"ecsy\";\nimport Vector2, { Vector2Type } from \"../types/Vector2\";\n\nclass Destination extends Component<Destination> {\n  position: Vector2 = new Vector2()\n}\n\nDestination.schema = {\n  position: { type: Vector2Type },\n}\n\nexport default Destination","import { TagComponent } from \"ecsy\";\n\nclass DestroyedOnImpact extends TagComponent {}\n\nexport default DestroyedOnImpact","import { Component, Types } from \"ecsy\";\n\nclass Lifespan extends Component<Lifespan> {\n  ttl: number = 0;\n  createdAt: number = 0;\n}\n\nLifespan.schema = {\n  ttl: { type: Types.Number },\n  createdAt: { type: Types.Number },\n}\n\nexport default Lifespan","import { Component, Types } from \"ecsy\";\nimport Vector2, { Vector2Type } from \"../types/Vector2\";\n\nclass Moveable extends Component<Moveable> {\n  direction: Vector2 = new Vector2()\n  speed: number = 0\n}\n\nMoveable.schema = {\n  direction: { type: Vector2Type, },\n  speed: { type: Types.Number, },\n}\n\nexport default Moveable","import { Component } from \"ecsy\";\nimport Vector2, { Vector2Type } from \"../types/Vector2\";\n\nclass RectangleSelection extends Component<RectangleSelection>{\n  startPosition: Vector2 = new Vector2()\n  endPosition: Vector2 = new Vector2()\n}\n\nRectangleSelection.schema = {\n  startPosition: { type: Vector2Type },\n  endPosition: { type: Vector2Type },\n}\n\nexport default RectangleSelection","import { Component, Types } from \"ecsy\";\n\nclass Selectable extends Component<Selectable> {\n  selected: boolean = false\n}\n\nSelectable.schema = {\n  selected: { type: Types.Boolean },\n}\n\nexport default Selectable","import { Component, Types } from \"ecsy\"\n\nclass Team extends Component<Team> {\n  name: string = \"unknown\";\n}\n\nTeam.schema = {\n  name: { type: Types.String },\n}\n\nexport default Team","import Vector2 from \"../types/Vector2\"\n\nconst unitVector = ({ x, y }: { x: number, y: number }) => {\n  const r = Math.sqrt(x*x + y*y)\n\n  return new Vector2(\n    x / r,\n    y / r,\n  )\n}\n\nexport default unitVector","interface Position {\n  x: number;\n  y: number;\n}\n\nconst distanceBetween = (a: Position, b: Position) => {\n  const dX = a.x - b.x\n  const dY = a.y - b.y\n  return Math.sqrt( (dX*dX) + (dY*dY) )\n}\n\nexport default distanceBetween\n\n\n","import { System, Entity } from \"ecsy\";\nimport * as R from 'ramda'\n\nimport Team from '../components/Team'\nimport Attack from \"../components/Attack\";\nimport Circle from \"../components/Circle\";\nimport unitVector from \"../utils/unitVector\";\nimport Vector2 from \"../types/Vector2\";\nimport Moveable from \"../components/Moveable\";\nimport distanceBetween from \"../utils/distanceBetween\";\nimport DestroyedOnImpact from \"../components/DestroyedOnImpact\";\nimport Lifespan from \"../components/Lifespan\";\n\nclass Attacker extends System {\n  execute(_delta: number, time: number): void {\n    this.queries.attackers.results.forEach(attacker => {\n      const attack = attacker.getComponent(Attack)\n\n      if (time < attack.lastAttack + attack.minimumRefactoryPeriod) {\n        return;\n      }\n\n      const target = this.closestTarget(attacker)\n\n      if (target) this.attackTarget(time, attacker, target);\n    })\n  }\n\n  private closestTarget = (attacker: Entity) => {\n    const { position } = attacker.getComponent(Circle)\n    const team = attacker.getComponent(Team)\n\n    const targets = this.queries.targets.results.filter(entity => team.name !== entity.getComponent(Team).name)\n    const sortedTargets = R.sortBy(target => {\n      const { position: targetPosition } = target.getComponent(Circle)\n      return distanceBetween(position, targetPosition)\n    }, targets)\n\n    return sortedTargets[0]\n  }\n\n  private attackTarget = (time: number, attacker: Entity, target: Entity) => {\n    const attack = attacker.getMutableComponent(Attack)\n    attack.lastAttack = time\n\n    const { radius, position } = attacker.getComponent(Circle)\n    const { position: targetPosition } = target.getComponent(Circle)\n\n    const direction = unitVector({\n      x: targetPosition.x - position.x,\n      y: targetPosition.y - position.y,\n    })\n\n    const spawnPosition = new Vector2(\n      position.x + (direction.x * (radius + 3)),\n      position.y + (direction.y * (radius + 3)),\n    )\n\n    this.world.createEntity()\n      .addComponent(Circle, { color: attack.projectileColor, radius: 2, position: spawnPosition })\n      .addComponent(DestroyedOnImpact)\n      .addComponent(Moveable, { speed: attack.projectileSpeed, direction })\n      .addComponent(Lifespan, { createdAt: time, ttl: attack.projectileLifetime })\n  }\n}\n\nAttacker.queries = {\n  attackers: { components: [Attack, Circle, Team] },\n  targets: { components: [Circle, Team] },\n}\n\nexport default Attacker","import { System } from \"ecsy\";\n\nimport Circle from \"../components/Circle\";\nimport Moveable from \"../components/Moveable\";\nimport Selectable from \"../components/Selectable\";\n\nimport unitVector from \"../utils/unitVector\";\nimport Vector2 from \"../types/Vector2\";\nimport Destination from \"../components/Destination\";\n\nclass Mover extends System {\n  execute(delta: number, _time: number): void {\n    this.queries.moveables.results.forEach(entity => {\n      const { position } = entity.getMutableComponent(Circle)\n      const { direction, speed } = entity.getComponent(Moveable)\n\n      const mX = direction.x * (delta * speed / 1000)\n      const mY = direction.y * (delta * speed / 1000)\n\n      position.x += mX\n      position.y += mY\n    })\n  }\n\n  onMouseDown = (e: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => {\n    if (e.button !== 2) return;\n\n    const {clientX, clientY} = e\n\n    this.selected().forEach(entity => {\n      const { position } = entity.getComponent(Circle)\n\n      const vector = unitVector({\n        x: clientX - position.x,\n        y: clientY - position.y,\n      })\n\n      entity.addComponent(Destination, { position: new Vector2(clientX, clientY) })\n      const moveable = entity.getMutableComponent(Moveable)\n      moveable.direction.set(vector.x, vector.y)\n    });\n  }\n\n  selected = () => {\n    return this.queries.selectables.results.filter(entity => {\n      return entity.getComponent(Selectable).selected\n    })\n  }\n}\n\nMover.queries = {\n  moveables: { components: [ Moveable, Circle ] },\n  selectables: { components: [ Moveable, Selectable ] },\n}\n\nexport default Mover","import distanceBetween from \"./distanceBetween\"\n\ninterface Position {\n  x: number;\n  y: number;\n}\n\nconst positionsAreClose = (a: Position, b: Position, threshold: number) =>\n  distanceBetween(a, b) <= threshold\n\nexport default positionsAreClose","import { System } from \"ecsy\";\nimport Selectable from \"../components/Selectable\";\nimport Circle from \"../components/Circle\";\nimport Vector2 from \"../types/Vector2\";\nimport RectangleSelection from \"../components/RectangleSelection\";\nimport positionsAreClose from \"../utils/positionsAreClose\";\n\nclass RectangleSelector extends System {\n  execute(_delta: number, _time: number): void { }\n\n  onMouseDown = (e: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => {\n    if (e.button !== 0) return;\n\n    const startPosition = new Vector2(e.clientX, e.clientY)\n    const endPosition = new Vector2(e.clientX, e.clientY)\n\n    this.world.createEntity()\n      .addComponent(RectangleSelection, { startPosition, endPosition })\n  }\n\n  onMouseMove = (e: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => {\n    const { clientX, clientY } = e\n\n    this.queries.rectangleSelections.results.forEach(entity => {\n      const { endPosition } = entity.getComponent(RectangleSelection)\n\n      if (clientX === endPosition.x || clientY === endPosition.y) {\n        return;\n      }\n\n      entity.getMutableComponent(RectangleSelection).endPosition.set(clientX, clientY)\n    })\n  }\n\n  onMouseUp = (e: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => {\n    if (e.button !== 0) return;\n\n    this.queries.rectangleSelections.results.forEach(entity => {\n      const { startPosition, endPosition } = entity.getComponent(RectangleSelection)\n      entity.remove();\n      if (positionsAreClose(startPosition, endPosition, 5)) return;\n\n      this.queries.circles.results.forEach(circleEntity => {\n        const selectable = circleEntity.getMutableComponent(Selectable)\n        const { position } = circleEntity.getComponent(Circle);\n        const { x, y } = position\n\n        const withinX = (startPosition.x < x && x < endPosition.x)\n                    || (endPosition.x < x && x < startPosition.x)\n\n        const withinY = (startPosition.y < y && y < endPosition.y)\n                    || (endPosition.y < y && y < startPosition.y)\n\n        selectable.selected = (withinX && withinY)\n      })\n    })\n  }\n}\n\nRectangleSelector.queries = {\n  circles: { components: [Selectable, Circle] },\n  rectangleSelections: { components: [RectangleSelection] },\n}\n\nexport default RectangleSelector","import { System, World, Entity } from \"ecsy\";\nimport Circle from \"../components/Circle\";\nimport Selectable from \"../components/Selectable\";\nimport RectangleSelection from \"../components/RectangleSelection\";\nimport positionsAreClose from \"../utils/positionsAreClose\";\n\ninterface Colors {\n  background: string;\n  selection: string;\n}\n\ninterface Attributes {\n  priority?: number;\n  canvas: HTMLCanvasElement;\n  colors: Colors\n}\n\nclass Renderer extends System {\n  private canvas: HTMLCanvasElement;\n  private colors: Colors;\n  private ctx: CanvasRenderingContext2D | null;\n\n  constructor(world: World, { canvas, colors, priority }: Attributes) {\n    super(world, { priority })\n    this.canvas = canvas\n    this.colors = colors\n    this.ctx = this.canvas.getContext('2d')\n  }\n\n  execute(delta: number, time: number): void {\n    this.clear()\n    this.queries.circles.results.forEach(this.drawCircle)\n    this.queries.rectangleSelections.results.forEach(this.drawRectangleSelection)\n  }\n\n  private clear = () => {\n    if (!this.ctx) return;\n\n    this.ctx.fillStyle = this.colors.background\n    this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n  }\n\n  private drawCircle = (entity: Entity) => {\n    if (!this.ctx) return\n\n    const ctx = this.ctx\n    const { color, radius, position } = entity.getComponent(Circle)\n    const selected = entity.getComponent(Selectable)?.selected ?? false\n    const { x, y } = position\n\n    ctx.fillStyle = color\n    ctx.beginPath()\n    ctx.arc(x, y, radius, 0, 2 * Math.PI, false)\n    ctx.fill()\n    ctx.lineWidth = 2\n    ctx.strokeStyle = '#222'\n    ctx.stroke()    \n\n    if (selected) {\n      ctx.beginPath()\n      ctx.arc(x, y, radius + 2, 0, 2 * Math.PI, false)\n      ctx.lineWidth = 2\n      ctx.strokeStyle = this.colors.selection\n      ctx.stroke()    \n    }\n  }\n\n  private drawRectangleSelection = (entity: Entity) => {\n    if (!this.ctx) return;\n\n    const ctx = this.ctx\n    const { startPosition, endPosition } = entity.getComponent(RectangleSelection)\n\n    if (positionsAreClose(startPosition, endPosition, 5)) return;\n\n    const { x, y } = startPosition\n    const w = endPosition.x - x\n    const h = endPosition.y - y\n\n    ctx.lineWidth = 2\n    ctx.strokeStyle = this.colors.selection;\n    ctx.strokeRect(x, y, w, h)\n  }\n}\n\nRenderer.queries = {\n  circles: { components: [Circle] },\n  rectangleSelections: { components: [RectangleSelection] },\n}\n\nexport default Renderer","import { System } from \"ecsy\";\nimport Circle from \"../components/Circle\";\nimport Selectable from \"../components/Selectable\";\nimport positionsAreClose from \"../utils/positionsAreClose\";\n\nclass Selector extends System {\n  execute(_delta: number, _time: number): void {}\n\n  onMouseDown = (e: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => {\n    if (e.button !== 0) return;\n\n    const clickPosition = { x: e.clientX, y: e.clientY }\n    this.selectCircles(clickPosition)\n  };\n\n  selectCircles = (clickPosition: { x: number, y: number }) => {\n    let anySelected = false\n\n    this.queries.circles.results.forEach(entity => {\n      const { position, radius } = entity.getComponent(Circle)\n\n      if (positionsAreClose(clickPosition, position, radius)) {\n        entity.getMutableComponent(Selectable).selected = true\n        anySelected = true\n      }\n    })\n\n    if (!anySelected) this.deselectAllCircles();\n  }\n\n  private deselectAllCircles = () => {\n    this.queries.circles.results.forEach(entity => {\n      if (!entity.getComponent(Selectable).selected) return\n\n      entity.getMutableComponent(Selectable).selected = false\n    })\n  }\n}\n\nSelector.queries = {\n  circles: { components: [Selectable, Circle] }\n}\n\nexport default Selector","import { System, Entity } from \"ecsy\";\nimport * as R from 'ramda'\n\nimport Circle from \"../components/Circle\";\nimport Moveable from \"../components/Moveable\";\n\nimport positionsAreClose from \"../utils/positionsAreClose\";\nimport DestroyedOnImpact from \"../components/DestroyedOnImpact\";\nimport Destination from \"../components/Destination\";\nimport Collidable from \"../components/Collidable\";\n\nconst isCloseTo = R.curry((e1: Entity, e2: Entity) => {\n  if (e1 === e2) return false;\n\n  const c1 = e1.getComponent(Circle)\n  const c2 = e2.getComponent(Circle)\n  const threshold = c1.radius + c2.radius\n\n  return positionsAreClose(c1.position, c2.position, threshold)\n})\n\nclass Stopper extends System {\n  execute(_delta: number, _time: number): void {\n    this.queries.moveables.results.forEach(this.stopIfColliding)\n    this.queries.withDestination.results.forEach(this.stopIfAtDestination)\n  }\n\n  private stopIfAtDestination = (entity: Entity) => {\n    const { position } = entity.getComponent(Circle)\n    const { position: destination } = entity.getComponent(Destination)\n\n    if (positionsAreClose(position, destination, 1)) {\n      entity.getMutableComponent(Moveable).speed = 0\n      entity.removeComponent(Destination)\n    }\n  }\n\n  private stopIfColliding = (entity: Entity) => {\n    const isCollision = R.any(isCloseTo(entity), this.queries.collideables.results)\n\n    if (isCollision) {\n      entity.getMutableComponent(Moveable).speed = 0\n    }\n    if (isCollision && entity.hasComponent(DestroyedOnImpact)) {\n      entity.remove()\n    }\n  }\n}\n\nStopper.queries = {\n  collideables: { components: [ Circle, Collidable ]},\n  moveables: { components: [ Circle, Moveable ] },\n  withDestination: { components: [ Circle, Destination, Moveable ] },\n}\n\nexport default Stopper","import { System } from 'ecsy'\nimport Lifespan from '../components/Lifespan'\n\nclass EnforceLifespan extends System {\n  execute(delta: number, time: number): void {\n    this.queries.withLifepan.results.forEach(entity => {\n      const { ttl, createdAt } = entity.getComponent(Lifespan)\n\n      if (createdAt + ttl < time) {\n        entity.remove()\n      }\n    })\n  }\n}\n\nEnforceLifespan.queries = {\n  withLifepan: { components: [Lifespan] }\n}\n\nexport default EnforceLifespan","import { World } from 'ecsy'\n\nimport Vector2 from './types/Vector2'\n\nimport Attack from './components/Attack'\nimport Circle from './components/Circle'\nimport Collidable from './components/Collidable'\nimport Destination from './components/Destination'\nimport DestroyedOnImpact from './components/DestroyedOnImpact'\nimport Lifespan from './components/Lifespan'\nimport Moveable from './components/Moveable'\nimport RectangleSelection from './components/RectangleSelection'\nimport Selectable from './components/Selectable'\nimport Team from './components/Team'\n\nimport Attacker from './systems/Attacker'\nimport Mover from './systems/Mover'\nimport RectangleSelector from './systems/RectangleSelector'\nimport Renderer from './systems/Renderer'\nimport Selector from './systems/Selector'\nimport Stopper from './systems/Stopper'\nimport EnforceLifespan from './systems/EnforceLifespan'\n\nconst colors = {\n  friendly: '#59cd90',\n  enemy: '#c73e1d',\n  projectile: '#ffe74c',\n  background: '#545e75',\n  selection: '#57b8ff',\n}\n\nclass Game {\n  private world: World\n  private canvas: HTMLCanvasElement\n  private lastTime: number\n  private animationFrameRequest: number | null\n\n  constructor({canvas}: {canvas: HTMLCanvasElement}) {\n    this.canvas = canvas\n    this.lastTime = performance.now()\n    this.animationFrameRequest = null\n    this.world = new World()\n      .registerSystem(Attacker)\n      .registerSystem(EnforceLifespan)\n      .registerSystem(Mover)\n      .registerSystem(RectangleSelector)\n      .registerSystem(Renderer, { canvas, colors })\n      .registerSystem(Selector)\n      .registerSystem(Stopper)\n      .registerComponent(Attack)\n      .registerComponent(Circle)\n      .registerComponent(Collidable)\n      .registerComponent(Destination)\n      .registerComponent(DestroyedOnImpact)\n      .registerComponent(Lifespan)\n      .registerComponent(Moveable)\n      .registerComponent(RectangleSelection)\n      .registerComponent(Selectable)\n      .registerComponent(Team)\n  }\n\n  start = () => {\n    for (let i = 0; i < 10; i++) {\n      this.createFriendly(50 + 50 * i, 500)\n      this.createEnemy(50 + 50 * i, 100)\n    }\n    this.run();\n  }\n\n  createEnemy = (x: number, y: number) => {\n    const teamName = \"Enemy\"\n    const radius = 10;\n    const color = colors.enemy\n    const position = new Vector2(x, y)\n\n    const projectileColor = colors.projectile\n    const projectileSpeed = 200;\n    const projectileLifetime = 5000;\n    const minimumRefactoryPeriod = 500;\n\n    this.world.createEntity()\n      .addComponent(Attack, { projectileColor, projectileSpeed, projectileLifetime, minimumRefactoryPeriod })\n      .addComponent(Circle, { radius, color, position })\n      .addComponent(Collidable)\n      .addComponent(Team, { name: teamName })\n  }\n\n  createFriendly = (x: number, y: number) => {\n    const teamName = \"Friendly\"\n    const color = colors.friendly\n    const radius = 10;\n    const speed = 100;\n    const position = new Vector2(x, y)\n\n    const projectileColor = colors.projectile\n    const projectileSpeed = 200;\n    const projectileLifetime = 5000;\n    const minimumRefactoryPeriod = 500;\n\n    this.world.createEntity()\n      .addComponent(Attack, { projectileColor, projectileSpeed, projectileLifetime, minimumRefactoryPeriod })\n      .addComponent(Circle, { radius, color, position })\n      .addComponent(Collidable)\n      .addComponent(Moveable, { speed })\n      .addComponent(Selectable)\n      .addComponent(Team, { name: teamName })\n  }\n\n  stop = () => {\n    if (!this.animationFrameRequest) return\n\n    cancelAnimationFrame(this.animationFrameRequest)\n  }\n\n  onMouseDown = (e: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => {\n    const mover = this.world.getSystem(Mover) as Mover\n    const selector = this.world.getSystem(Selector) as Selector\n    const rectangleSelector = this.world.getSystem(RectangleSelector) as RectangleSelector\n\n    mover.onMouseDown(e)\n    selector.onMouseDown(e)\n    rectangleSelector.onMouseDown(e)\n  }\n\n  onMouseMove = (e: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => {\n    const rectangleSelector = this.world.getSystem(RectangleSelector) as RectangleSelector\n    rectangleSelector.onMouseMove(e)\n  }\n\n  onMouseUp = (e: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => {\n    const rectangleSelector = this.world.getSystem(RectangleSelector) as RectangleSelector\n    rectangleSelector.onMouseUp(e)\n  }\n\n  private run =  () => {\n     // Compute delta and elapsed time\n     const time = performance.now()\n     const delta = time - this.lastTime\n\n     // Run all the systems\n     this.world.execute(delta, time)\n\n     this.lastTime = time\n     this.animationFrameRequest = requestAnimationFrame(this.run)\n  }\n}\n\nexport default Game","import React, { MouseEventHandler } from 'react';\n\nimport Game from './ecs/Game'\nimport './App.css';\n\nconst App = () => {\n  const [canvas, setCanvas] = React.useState<HTMLCanvasElement | null>(null);\n  const gameRef = React.useRef<Game | null>(null)\n\n  React.useEffect(() => {\n    if (!canvas) return;\n\n    gameRef.current = new Game({canvas})\n    gameRef.current.start()\n\n    return () => {\n      gameRef.current?.stop()\n      gameRef.current = null\n    }\n  }, [canvas])\n\n  React.useEffect(() => {\n    const handleResize = () => {\n      if (!canvas) return\n\n      canvas.width = window.innerWidth\n      canvas.height = window.innerHeight\n    }\n\n    handleResize()\n    window.addEventListener('resize', handleResize)\n    return () => window.removeEventListener('resize', handleResize)\n  }, [canvas])\n\n  const onMouseDown: MouseEventHandler<HTMLCanvasElement> = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    gameRef.current?.onMouseDown(e)\n  }\n\n  const onMouseMove: MouseEventHandler<HTMLCanvasElement> = (e) => {\n    gameRef.current?.onMouseMove(e)\n  }\n\n  const onMouseUp: MouseEventHandler<HTMLCanvasElement> = (e) => {\n    gameRef.current?.onMouseUp(e)\n  }\n\n  return (\n    <div className=\"App\">\n      <canvas \n        ref={setCanvas} \n        onMouseDown={onMouseDown} \n        onMouseMove={onMouseMove}\n        onMouseUp={onMouseUp}\n        onContextMenu={e => e.preventDefault()} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}