{"version":3,"sources":["ecs/types/Vector2.ts","ecs/components/Attack.ts","ecs/components/Circle.ts","ecs/components/Collidable.ts","ecs/components/Destination.ts","ecs/components/DestroyedOnImpact.ts","ecs/components/Lifespan.ts","ecs/components/Moveable.ts","ecs/components/RectangleSelection.ts","ecs/components/Selectable.ts","ecs/components/Team.ts","ecs/utils/distanceBetween.ts","ecs/components/DoesDamage.ts","ecs/components/Position.ts","ecs/systems/Attacker.ts","ecs/utils/positionsAreClose.ts","ecs/systems/RectangleSelector.ts","ecs/components/Health.ts","ecs/systems/Renderer.ts","ecs/systems/Selector.ts","ecs/systems/Stopper.ts","ecs/systems/EnforceLifespan.ts","ecs/systems/EnforceHealth.ts","ecs/systems/Boidser.ts","ecs/components/Debug.ts","ecs/systems/DestinationSetter.ts","ecs/systems/Mover.ts","ecs/Game.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Vector2","x","y","set","copy","source","clone","add","other","addMut","limit","n","limitMut","magnitude","divideScalarMut","divideScalar","Math","sqrt","multiplyScalar","multiplyScalarMut","toJSON","indent","JSON","stringify","subtract","subtractMut","unit","unitMut","this","Vector2Type","createType","name","default","copyCopyable","cloneClonable","Attack","projectileColor","projectileSpeed","projectileLifetime","projectileDamage","minimumRefactoryPeriod","lastAttack","Component","schema","type","Types","String","Number","Circle","color","radius","Collidable","TagComponent","Destination","position","DestroyedOnImpact","Lifespan","ttl","createdAt","Moveable","direction","maxSpeed","minSeparation","RectangleSelection","startPosition","endPosition","Selectable","selected","Boolean","Team","distanceBetween","a","b","dX","dY","DoesDamage","damage","Position","Attacker","closestTarget","attacker","getComponent","team","targets","queries","results","filter","entity","R","target","targetPosition","attackTarget","time","attack","getMutableComponent","spawnPosition","world","createEntity","addComponent","_delta","attackers","forEach","System","components","positionsAreClose","threshold","RectangleSelector","onMouseDown","e","button","rectangleSelections","length","clientX","clientY","onMouseMove","onMouseUp","remove","selectables","selectableEntity","selectable","withinX","withinY","_time","Health","maxHealth","health","Renderer","canvas","colors","priority","ctx","debug","toggleDebug","clear","fillStyle","background","fillRect","width","height","drawCircle","beginPath","arc","PI","fill","lineWidth","strokeStyle","stroke","selection","hasAllComponents","moveTo","lineTo","drawHealth","wHealth","strokeRect","drawRectangleSelection","w","h","getContext","delta","circles","healths","Selector","clickPosition","selectCircles","deselectAllCircles","isCloseTo","e1","e2","c1","p1","c2","p2","Stopper","stopIfAtDestination","destination","removeComponent","stopIfColliding","collideables","hasComponent","moveables","withDestination","EnforceLifespan","withLifepan","EnforceHealth","withHealth","Boidser","executeEntity","teammates","getTeammates","destinationForce","calcDestinationForce","separationForce","calcSeparationForce","cohesionForce","calcCohesionForce","calcAveragePosition","entities","positions","map","sumPositions","vector","forces","calcSingleSeparationForce","divided","isNaN","Error","otherPosition","distance","Debug","DestinationSetter","Mover","mX","mY","friendly","enemy","projectile","Game","lastTime","animationFrameRequest","start","i","createFriendly","createEnemy","run","stop","cancelAnimationFrame","getSystem","destionationSetter","selector","rectangleSelector","performance","now","execute","requestAnimationFrame","World","registerSystem","registerComponent","App","React","useState","setCanvas","gameRef","useRef","useEffect","current","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener","useKeyPressEvent","className","ref","preventDefault","stopPropagation","onContextMenu","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","unregister","navigator","serviceWorker","ready","then","registration","catch","error","console","message"],"mappings":"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","file":"static/js/main.27e749e5.chunk.js","sourcesContent":["import { createType, copyCopyable, cloneClonable } from \"ecsy\";\n\nclass Vector2 {\n  x: number;\n  y: number;\n\n  constructor(x: number = 0, y: number = 0) {\n    this.x = x;\n    this.y = y;\n  }\n\n  set = (x: number, y: number) => {\n    this.x = x;\n    this.y = y;\n    return this;\n  }\n\n  copy = (source: Vector2) => {\n    this.x = source.x;\n    this.y = source.y;\n    return this;\n  }\n\n  clone = () => new Vector2().copy(this)\n\n  /**\n   * returns a new vector with the other vector's x & y\n   * components added to this one\n   * */\n  add = (other: Vector2): Vector2 => this.clone().addMut(other)\n\n  /**\n   * mutates the vector, adding the other vector's x & y\n   * components to this one\n   * */\n  addMut = (other: Vector2): Vector2 => {\n    this.x += other.x\n    this.y += other.y\n    return this\n  }\n\n  /**\n   * If the magnitude of the vecor is greater than the limit, it will return\n   * a new vector scaled down so its magnitude is equal to the limit\n   */\n  limit = (n: number) => this.clone().limitMut(n)\n\n  /**\n   * If the magnitude of the vecor is greater than the limit, it will scale\n   * down to a vector with a magnitude equal to the limit\n   */\n  limitMut = (n: number) => {\n    const magnitude = this.magnitude()\n    if (n < magnitude) {\n      this.divideScalarMut(magnitude / n)\n    }\n    return this\n  }\n\n  /**\n   * Returns a new vector with both x & y divided by n\n   * */\n  divideScalar = (n: number) => this.clone().divideScalarMut(n)\n\n  /**\n   * Mutates the current vector, dividing both x & y by n.\n   * Returns itself for easy chaining\n   * */\n  divideScalarMut = (n: number): Vector2 => {\n    this.x /= n\n    this.y /= n\n    return this\n  }\n\n  magnitude = () => Math.sqrt((this.x * this.x) + (this.y * this.y))\n\n  /**\n   * Returns a new vector with both x & y multiplied by n\n   * */\n  multiplyScalar = (n: number) => this.clone().multiplyScalarMut(n)\n\n  /**\n   * Mutates the current vector, dividing both x & y by n.\n   * Returns itself for easy chaining\n   * */\n  multiplyScalarMut = (n: number): Vector2 => {\n    this.x *= n\n    this.y *= n\n    return this\n  }\n\n  toJSON = (indent?: number) => {\n    const { x, y } = this\n    return JSON.stringify({ x, y }, null, indent ?? 0)\n  }\n\n  /**\n   * returns a new vector with the other vector's x & y\n   * components subtracted from this one\n   * */\n  subtract = (other: Vector2): Vector2 => this.clone().subtractMut(other)\n\n  /**\n   * mutates the vector, subtracting the other vector's x & y\n   * components from this one\n   * */\n  subtractMut = (other: Vector2): Vector2 => {\n    this.x -= other.x\n    this.y -= other.y\n    return this\n  }\n\n  /**\n   * Returns a new unit vector of the current vector. If the magnitude of the\n   * current vector is 0, it will return the 0, 0 vector\n   * */\n  unit = () => this.clone().unitMut()\n\n  unitMut = () => {\n    const magnitude = this.magnitude()\n\n    return (magnitude === 0)\n      ? this.multiplyScalar(0)\n      : this.divideScalarMut(magnitude)\n  }\n}\n\nexport default Vector2\n\nexport const Vector2Type = createType({\n  name: \"Vector2\",\n  default: new Vector2(),\n  copy: copyCopyable,\n  clone: cloneClonable\n});","import { Component, Types } from \"ecsy\";\n\nclass Attack extends Component<Attack> {\n  projectileColor: string = '#000000';\n  projectileSpeed: number = 0;\n  projectileLifetime: number = 0;\n  projectileDamage: number = 0;\n  minimumRefactoryPeriod: number = 0; \n  lastAttack: number = 0;\n}\n\nAttack.schema = {\n  projectileColor: { type: Types.String },\n  projectileSpeed: { type: Types.Number },\n  projectileLifetime: { type: Types.Number },\n  projectileDamage: { type: Types.Number },\n  minimumRefactoryPeriod: { type: Types.Number },\n  lastAttack: { type: Types.Number },\n}\n\nexport default Attack","import { Component, Types } from \"ecsy\";\n\nclass Circle extends Component<Circle> {\n  color: string = '#000000';\n  radius: number = 0\n}\n\nCircle.schema = {\n  color: {type: Types.String},\n  radius: { type: Types.Number }, \n}\n\nexport default Circle","import { TagComponent } from \"ecsy\";\n\nclass Collidable extends TagComponent {}\n\nexport default Collidable","import { Component } from \"ecsy\";\nimport Vector2, { Vector2Type } from \"../types/Vector2\";\n\nclass Destination extends Component<Destination> {\n  position: Vector2 = new Vector2()\n}\n\nDestination.schema = {\n  position: { type: Vector2Type },\n}\n\nexport default Destination","import { TagComponent } from \"ecsy\";\n\nclass DestroyedOnImpact extends TagComponent {}\n\nexport default DestroyedOnImpact","import { Component, Types } from \"ecsy\";\n\nclass Lifespan extends Component<Lifespan> {\n  ttl: number = 0;\n  createdAt: number = 0;\n}\n\nLifespan.schema = {\n  ttl: { type: Types.Number },\n  createdAt: { type: Types.Number },\n}\n\nexport default Lifespan","import { Component, Types } from \"ecsy\";\nimport Vector2, { Vector2Type } from \"../types/Vector2\";\n\nclass Moveable extends Component<Moveable> {\n  direction: Vector2 = new Vector2()\n  maxSpeed: number = 0\n  minSeparation: number = 25\n}\n\nMoveable.schema = {\n  direction: { type: Vector2Type, },\n  maxSpeed: { type: Types.Number, },\n  minSeparation: { type: Types.Number, },\n}\n\nexport default Moveable","import { Component } from \"ecsy\";\nimport Vector2, { Vector2Type } from \"../types/Vector2\";\n\nclass RectangleSelection extends Component<RectangleSelection>{\n  startPosition: Vector2 = new Vector2()\n  endPosition: Vector2 = new Vector2()\n}\n\nRectangleSelection.schema = {\n  startPosition: { type: Vector2Type },\n  endPosition: { type: Vector2Type },\n}\n\nexport default RectangleSelection","import { Component, Types } from \"ecsy\";\n\nclass Selectable extends Component<Selectable> {\n  selected: boolean = false\n}\n\nSelectable.schema = {\n  selected: { type: Types.Boolean },\n}\n\nexport default Selectable","import { Component, Types } from \"ecsy\"\n\nclass Team extends Component<Team> {\n  name: string = \"unknown\";\n}\n\nTeam.schema = {\n  name: { type: Types.String },\n}\n\nexport default Team","interface Position {\n  x: number;\n  y: number;\n}\n\nconst distanceBetween = (a: Position, b: Position) => {\n  const dX = a.x - b.x\n  const dY = a.y - b.y\n  return Math.sqrt( (dX*dX) + (dY*dY) )\n}\n\nexport default distanceBetween\n\n\n","import { Component, Types } from \"ecsy\";\n\nclass DoesDamage extends Component<DoesDamage> {\n  damage: number = 0;\n}\n\nDoesDamage.schema = {\n  damage: { type: Types.Number },\n}\n\nexport default DoesDamage","import { Component } from \"ecsy\";\nimport Vector2, { Vector2Type } from \"../types/Vector2\";\n\nclass Position extends Component<Position> {\n  position: Vector2 = new Vector2()\n}\n\nPosition.schema = {\n  position: { type: Vector2Type },\n}\n\nexport default Position","import { System, Entity } from \"ecsy\";\nimport * as R from 'ramda'\n\nimport Team from '../components/Team'\nimport Attack from \"../components/Attack\";\nimport Circle from \"../components/Circle\";\nimport Moveable from \"../components/Moveable\";\nimport distanceBetween from \"../utils/distanceBetween\";\nimport DestroyedOnImpact from \"../components/DestroyedOnImpact\";\nimport Lifespan from \"../components/Lifespan\";\nimport DoesDamage from \"../components/DoesDamage\";\nimport Position from \"../components/Position\";\n\nclass Attacker extends System {\n  execute(_delta: number, time: number): void {\n    this.queries.attackers.results.forEach(attacker => {\n      const attack = attacker.getComponent(Attack)\n\n      if (time < attack.lastAttack + attack.minimumRefactoryPeriod) {\n        return;\n      }\n\n      const target = this.closestTarget(attacker)\n\n      if (target) this.attackTarget(time, attacker, target);\n    })\n  }\n\n  private closestTarget = (attacker: Entity) => {\n    const { position } = attacker.getComponent(Position)\n    const team = attacker.getComponent(Team)\n\n    const targets = this.queries.targets.results.filter(entity => team.name !== entity.getComponent(Team).name)\n    const sortedTargets = R.sortBy(target => {\n      const { position: targetPosition } = target.getComponent(Position)\n      return distanceBetween(position, targetPosition)\n    }, targets)\n\n    return sortedTargets[0]\n  }\n\n  private attackTarget = (time: number, attacker: Entity, target: Entity) => {\n    const attack = attacker.getMutableComponent(Attack)\n    attack.lastAttack = time\n\n    const { radius } = attacker.getComponent(Circle)\n    const { position } = attacker.getComponent(Position)\n    const { position: targetPosition } = target.getComponent(Position)\n\n    const direction = targetPosition.subtract(position).unitMut().multiplyScalarMut(attack.projectileSpeed)\n    const spawnPosition = direction.unit().multiplyScalarMut(radius + 3).addMut(position)\n\n    this.world.createEntity()\n      .addComponent(Circle, { color: attack.projectileColor, radius: 2 })\n      .addComponent(DoesDamage, { damage: attack.projectileDamage })\n      .addComponent(DestroyedOnImpact)\n      .addComponent(Moveable, { maxSpeed: attack.projectileSpeed, direction })\n      .addComponent(Position, { position: spawnPosition })\n      .addComponent(Lifespan, { createdAt: time, ttl: attack.projectileLifetime })\n  }\n}\n\nAttacker.queries = {\n  attackers: { components: [Attack, Circle, Position, Team] },\n  targets: { components: [Position, Team] },\n}\n\nexport default Attacker","import distanceBetween from \"./distanceBetween\"\n\ninterface Position {\n  x: number;\n  y: number;\n}\n\nconst positionsAreClose = (a: Position, b: Position, threshold: number) =>\n  distanceBetween(a, b) <= threshold\n\nexport default positionsAreClose","import { System } from \"ecsy\";\nimport Selectable from \"../components/Selectable\";\nimport Vector2 from \"../types/Vector2\";\nimport RectangleSelection from \"../components/RectangleSelection\";\nimport positionsAreClose from \"../utils/positionsAreClose\";\nimport Position from \"../components/Position\";\n\nclass RectangleSelector extends System {\n  execute(_delta: number, _time: number): void { }\n\n  onMouseDown = (e: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => {\n    if (e.button !== 0) return;\n    if (this.queries.rectangleSelections.results.length > 0) return;\n\n    const startPosition = new Vector2(e.clientX, e.clientY)\n    const endPosition = new Vector2(e.clientX, e.clientY)\n\n    this.world.createEntity()\n      .addComponent(RectangleSelection, { startPosition, endPosition })\n  }\n\n  onMouseMove = (e: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => {\n    const { clientX, clientY } = e\n\n    this.queries.rectangleSelections.results.forEach(entity => {\n      const { endPosition } = entity.getComponent(RectangleSelection)\n\n      if (clientX === endPosition.x || clientY === endPosition.y) {\n        return;\n      }\n\n      entity.getMutableComponent(RectangleSelection).endPosition.set(clientX, clientY)\n    })\n  }\n\n  onMouseUp = (e: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => {\n    if (e.button !== 0) return;\n\n    this.queries.rectangleSelections.results.forEach(entity => {\n      const { startPosition, endPosition } = entity.getComponent(RectangleSelection)\n      entity.remove();\n      if (positionsAreClose(startPosition, endPosition, 5)) return;\n\n      this.queries.selectables.results.forEach(selectableEntity => {\n        const selectable = selectableEntity.getMutableComponent(Selectable)\n        const { position } = selectableEntity.getComponent(Position);\n        const { x, y } = position\n\n        const withinX = (startPosition.x < x && x < endPosition.x)\n                    || (endPosition.x < x && x < startPosition.x)\n\n        const withinY = (startPosition.y < y && y < endPosition.y)\n                    || (endPosition.y < y && y < startPosition.y)\n\n        selectable.selected = (withinX && withinY)\n      })\n    })\n  }\n}\n\nRectangleSelector.queries = {\n  selectables: { components: [Position, Selectable] },\n  rectangleSelections: { components: [RectangleSelection] },\n}\n\nexport default RectangleSelector","import { Component, Types } from \"ecsy\";\n\nclass Health extends Component<Health> {\n  maxHealth: number = 0;\n  health: number = 0;\n}\n\nHealth.schema = {\n  maxHealth: { type: Types.Number },\n  health: { type: Types.Number },\n}\n\nexport default Health","import { System, World, Entity } from \"ecsy\";\nimport Circle from \"../components/Circle\";\nimport Selectable from \"../components/Selectable\";\nimport RectangleSelection from \"../components/RectangleSelection\";\nimport positionsAreClose from \"../utils/positionsAreClose\";\nimport Position from \"../components/Position\";\nimport Health from \"../components/Health\";\nimport Moveable from \"../components/Moveable\";\nimport Team from \"../components/Team\";\n\ninterface Colors {\n  background: string;\n  selection: string;\n}\n\ninterface Attributes {\n  priority?: number;\n  canvas: HTMLCanvasElement;\n  colors: Colors\n}\n\nclass Renderer extends System {\n  private canvas: HTMLCanvasElement;\n  private colors: Colors;\n  private ctx: CanvasRenderingContext2D | null;\n\n  private debug: boolean;\n\n  constructor(world: World, { canvas, colors, priority }: Attributes) {\n    super(world, { priority })\n    this.canvas = canvas\n    this.colors = colors\n    this.ctx = this.canvas.getContext('2d')\n    this.debug = false\n  }\n\n  execute(delta: number, time: number): void {\n    this.clear()\n    this.queries.circles.results.forEach(this.drawCircle)\n    this.queries.healths.results.forEach(this.drawHealth)\n    this.queries.rectangleSelections.results.forEach(this.drawRectangleSelection)\n  }\n\n  toggleDebug = () => {\n    this.debug = !this.debug\n  }\n\n  private clear = () => {\n    if (!this.ctx) return;\n\n    this.ctx.fillStyle = this.colors.background\n    this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n  }\n\n  private drawCircle = (entity: Entity) => {\n    if (!this.ctx) return\n\n    const ctx = this.ctx\n    const { color, radius } = entity.getComponent(Circle)\n    const { position } = entity.getComponent(Position)\n    const selected = entity.getComponent(Selectable)?.selected ?? false\n    const { x, y } = position\n\n    ctx.fillStyle = color\n    ctx.beginPath()\n    ctx.arc(x, y, radius, 0, 2 * Math.PI, false)\n    ctx.fill()\n    ctx.lineWidth = 2\n    ctx.strokeStyle = '#222'\n    ctx.stroke()\n\n    if (selected) {\n      ctx.beginPath()\n      ctx.arc(x, y, radius + 2, 0, 2 * Math.PI, false)\n      ctx.lineWidth = 2\n      ctx.strokeStyle = this.colors.selection\n      ctx.stroke()\n    }\n\n    if (this.debug && entity.hasAllComponents([Team, Moveable])) {\n      const { direction } = entity.getComponent(Moveable)\n      const {x, y} = position.add(direction)\n      ctx.lineWidth = 2\n      ctx.strokeStyle = '#f00'\n      ctx.beginPath()\n      ctx.moveTo(position.x, position.y)\n      ctx.lineTo(x, y)\n      ctx.stroke()\n    }\n  }\n\n  private drawHealth = (entity: Entity) => {\n    const ctx = this.ctx;\n    if (!ctx) return;\n\n    const { position } = entity.getComponent(Position);\n    const { health, maxHealth } = entity.getComponent(Health);\n\n    const x = position.x - 10\n    const y = position.y + 15\n    const w = 20\n    const h = 4\n\n    const wHealth = w * health / maxHealth\n\n    ctx.lineWidth = 2\n    ctx.strokeStyle = '#222'\n    ctx.strokeRect(x, y, w, h)\n\n    ctx.lineWidth = 0\n    ctx.fillStyle = this.colors.selection;\n    ctx.fillRect(x, y, wHealth, h)\n  }\n\n  private drawRectangleSelection = (entity: Entity) => {\n    if (!this.ctx) return;\n\n    const ctx = this.ctx\n    const { startPosition, endPosition } = entity.getComponent(RectangleSelection)\n\n    if (positionsAreClose(startPosition, endPosition, 5)) return;\n\n    const { x, y } = startPosition\n    const w = endPosition.x - x\n    const h = endPosition.y - y\n\n    ctx.lineWidth = 2\n    ctx.strokeStyle = this.colors.selection;\n    ctx.strokeRect(x, y, w, h)\n  }\n}\n\nRenderer.queries = {\n  circles: { components: [Circle, Position] },\n  healths: { components: [Health, Position] },\n  rectangleSelections: { components: [RectangleSelection] },\n}\n\nexport default Renderer","import { System } from \"ecsy\";\nimport Circle from \"../components/Circle\";\nimport Selectable from \"../components/Selectable\";\nimport positionsAreClose from \"../utils/positionsAreClose\";\nimport Position from \"../components/Position\";\n\nclass Selector extends System {\n  execute(_delta: number, _time: number): void {}\n\n  onMouseDown = (e: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => {\n    if (e.button !== 0) return;\n\n    const clickPosition = { x: e.clientX, y: e.clientY }\n    this.selectCircles(clickPosition)\n  };\n\n  selectCircles = (clickPosition: { x: number, y: number }) => {\n    this.deselectAllCircles()\n\n    this.queries.circles.results.forEach(entity => {\n      const { radius } = entity.getComponent(Circle)\n      const { position } = entity.getComponent(Position)\n\n      if (positionsAreClose(clickPosition, position, radius)) {\n        entity.getMutableComponent(Selectable).selected = true\n      }\n    })\n  }\n\n  private deselectAllCircles = () => {\n    this.queries.circles.results.forEach(entity => {\n      if (!entity.getComponent(Selectable).selected) return\n\n      entity.getMutableComponent(Selectable).selected = false\n    })\n  }\n}\n\nSelector.queries = {\n  circles: { components: [Circle, Position, Selectable] }\n}\n\nexport default Selector","import { System, Entity } from \"ecsy\";\nimport * as R from 'ramda'\n\nimport Circle from \"../components/Circle\";\nimport Moveable from \"../components/Moveable\";\n\nimport positionsAreClose from \"../utils/positionsAreClose\";\nimport DestroyedOnImpact from \"../components/DestroyedOnImpact\";\nimport Destination from \"../components/Destination\";\nimport Collidable from \"../components/Collidable\";\nimport DoesDamage from \"../components/DoesDamage\";\nimport Health from \"../components/Health\";\nimport Position from \"../components/Position\";\n\nconst isCloseTo = R.curry((e1: Entity, e2: Entity) => {\n  if (e1 === e2) return false;\n\n  const c1 = e1.getComponent(Circle)\n  const p1 = e1.getComponent(Position)\n  const c2 = e2.getComponent(Circle)\n  const p2 = e2.getComponent(Position)\n  const threshold = c1.radius + c2.radius\n\n  return positionsAreClose(p1.position, p2.position, threshold)\n})\n\nclass Stopper extends System {\n  execute(_delta: number, _time: number): void {\n    this.queries.moveables.results.forEach(this.stopIfColliding)\n    this.queries.withDestination.results.forEach(this.stopIfAtDestination)\n  }\n\n  private stopIfAtDestination = (entity: Entity) => {\n    const { position } = entity.getComponent(Position)\n    const { position: destination } = entity.getComponent(Destination)\n\n    if (positionsAreClose(position, destination, 1)) {\n      entity.getMutableComponent(Moveable).direction.set(0, 0)\n      entity.removeComponent(Destination)\n    }\n  }\n\n  private stopIfColliding = (entity: Entity) => {\n    const other = R.find(isCloseTo(entity), this.queries.collideables.results)\n\n    if (R.isNil(other)) return\n\n    entity.getMutableComponent(Moveable).direction.set(0, 0)\n\n    if (entity.hasComponent(DoesDamage) && other.hasComponent(Health)) {\n      const { damage } = entity.getComponent(DoesDamage)\n      other.getMutableComponent(Health).health -= damage\n    }\n\n    if (entity.hasComponent(DestroyedOnImpact)) {\n      entity.remove()\n    }\n  }\n}\n\nStopper.queries = {\n  collideables: { components: [ Circle, Collidable, Position ]},\n  moveables: { components: [ Circle, Moveable, Position ] },\n  withDestination: { components: [ Destination, Moveable, Position ] },\n}\n\nexport default Stopper","import { System } from 'ecsy'\nimport Lifespan from '../components/Lifespan'\n\nclass EnforceLifespan extends System {\n  execute(delta: number, time: number): void {\n    this.queries.withLifepan.results.forEach(entity => {\n      const { ttl, createdAt } = entity.getComponent(Lifespan)\n\n      if (createdAt + ttl < time) {\n        entity.remove()\n      }\n    })\n  }\n}\n\nEnforceLifespan.queries = {\n  withLifepan: { components: [Lifespan] }\n}\n\nexport default EnforceLifespan","import { System } from 'ecsy'\nimport Health from '../components/Health'\n\nclass EnforceHealth extends System {\n  execute(_delta: number, _time: number): void {\n    this.queries.withHealth.results.forEach(entity => {\n      const { health } = entity.getComponent(Health)\n\n      if (health <= 0) {\n        entity.remove()\n      }\n    })\n  }\n}\n\nEnforceHealth.queries = {\n  withHealth: { components: [Health] }\n}\n\nexport default EnforceHealth","import { System, Entity } from \"ecsy\"\nimport * as R from 'ramda'\n\nimport Moveable from \"../components/Moveable\"\nimport Position from \"../components/Position\"\nimport Team from \"../components/Team\"\nimport Vector2 from \"../types/Vector2\"\nimport Destination from \"../components/Destination\"\n\nclass Boidser extends System {\n  execute(_delta: number, _time: number): void {\n    this.queries.entities.results.forEach(this.executeEntity)\n  }\n\n  executeEntity = (entity: Entity) => {\n    const { direction, maxSpeed } = entity.getMutableComponent(Moveable)\n    const teammates = this.getTeammates(entity)\n\n    const destinationForce = this.calcDestinationForce(entity)\n    const separationForce = this.calcSeparationForce(entity, teammates)\n    const cohesionForce = this.calcCohesionForce(entity, teammates)\n\n    direction.set(0, 0)\n             .addMut(destinationForce)\n             .addMut(separationForce.multiplyScalarMut(50))\n             .addMut(cohesionForce.divideScalarMut(1000))\n             .limitMut(maxSpeed)\n  }\n\n  calcDestinationForce = (entity: Entity) => {\n    if (!entity.hasComponent(Destination)) return new Vector2(0, 0)\n\n    const { position: destination } =  entity.getComponent(Destination)\n    const { position } =  entity.getComponent(Position)\n    return destination.subtract(position)\n  }\n\n  calcCohesionForce = (entity: Entity, teammates: Entity[]) => {\n    const { position } = entity.getComponent(Position)\n    const averagePosition = this.calcAveragePosition(teammates)\n\n    return averagePosition.subtractMut(position)\n  }\n\n  calcAveragePosition = (entities: Entity[]) => {\n    const positions = entities.map(e => e.getComponent(Position).position)\n    const sumPositions = new Vector2(0, 0)\n    positions.forEach(sumPositions.addMut)\n\n    if (R.isEmpty(positions)) return sumPositions\n    return sumPositions.divideScalarMut(positions.length)\n  }\n\n  calcSeparationForce = (entity: Entity, teammates: Entity[]) => {\n    const vector = new Vector2(0, 0)\n    const forces = R.map(this.calcSingleSeparationForce(entity), teammates)\n\n    forces.forEach(vector.addMut)\n\n    if (R.isEmpty(forces)) return vector;\n\n    const divided = vector.divideScalar(forces.length)\n    const unit = divided.unit()\n    // vector.divideScalarMut(forces.length).unitMut()\n    if (Number.isNaN(divided.x)) throw new Error('divided.x was NaN')\n    if (Number.isNaN(unit.x)) throw new Error('unit.x was NaN')\n    return unit\n  }\n\n  calcSingleSeparationForce = R.curry((entity: Entity, other: Entity) => {\n    const { position } = entity.getComponent(Position)\n    const { position: otherPosition } = other.getComponent(Position)\n    const { minSeparation } = entity.getComponent(Moveable)\n\n    const vector = position.subtract(otherPosition)\n    const distance = vector.magnitude()\n\n    if (minSeparation < distance) return vector.multiplyScalar(0)\n\n    return vector.divideScalarMut(distance)\n  })\n\n  getTeammates = (entity: Entity) => {\n    const { name } = entity.getComponent(Team)\n    const others = R.without([entity], this.queries.entities.results)\n\n    return others.filter(entity => name === entity.getComponent(Team).name)\n  }\n}\n\nBoidser.queries = {\n  entities: {\n    components: [Moveable, Position, Team]\n  }\n}\n\nexport default Boidser","import { TagComponent } from \"ecsy\";\n\nclass Debug extends TagComponent {\n\n}\n\nexport default Debug","import { System } from \"ecsy\";\n\nimport Destination from \"../components/Destination\";\nimport Moveable from \"../components/Moveable\";\nimport Selectable from \"../components/Selectable\";\n\nclass DestinationSetter extends System {\n  execute(_delta: number, _time: number): void {}\n\n  onMouseDown = (e: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => {\n    if (e.button !== 2) return;\n\n    const { clientX, clientY } = e\n\n    this.selected().forEach(entity => {\n      if (!entity.hasComponent(Destination)) {\n        entity.addComponent(Destination)\n      }\n      entity.getMutableComponent(Destination).position.set(clientX, clientY)\n    });\n  }\n\n  selected = () => {\n    return this.queries.selectables.results.filter(entity => {\n      return entity.getComponent(Selectable).selected\n    })\n  }\n}\n\nDestinationSetter.queries = {\n  selectables: { components: [ Moveable, Selectable ] },\n}\n\nexport default DestinationSetter","import { System } from \"ecsy\";\n\nimport Position from \"../components/Position\";\nimport Moveable from \"../components/Moveable\";\n\nclass Mover extends System {\n  execute(delta: number, _time: number): void {\n    this.queries.moveables.results.forEach(entity => {\n      const { position } = entity.getMutableComponent(Position)\n      const { direction } = entity.getComponent(Moveable)\n\n      const mX = direction.x * (delta / 1000)\n      const mY = direction.y * (delta / 1000)\n\n      position.x += mX\n      position.y += mY\n    })\n  }\n}\n\nMover.queries = {\n  moveables: { components: [ Moveable, Position ] },\n}\n\nexport default Mover","import { World } from 'ecsy'\n\nimport Vector2 from './types/Vector2'\n\nimport Attack from './components/Attack'\nimport Circle from './components/Circle'\nimport Collidable from './components/Collidable'\nimport Destination from './components/Destination'\nimport DestroyedOnImpact from './components/DestroyedOnImpact'\nimport Lifespan from './components/Lifespan'\nimport Moveable from './components/Moveable'\nimport RectangleSelection from './components/RectangleSelection'\nimport Selectable from './components/Selectable'\nimport Team from './components/Team'\n\nimport Attacker from './systems/Attacker'\nimport RectangleSelector from './systems/RectangleSelector'\nimport Renderer from './systems/Renderer'\nimport Selector from './systems/Selector'\nimport Stopper from './systems/Stopper'\nimport EnforceLifespan from './systems/EnforceLifespan'\nimport Health from './components/Health'\nimport EnforceHealth from './systems/EnforceHealth'\nimport DoesDamage from './components/DoesDamage'\nimport Position from './components/Position'\nimport Boidser from './systems/Boidser'\nimport Debug from './components/Debug'\nimport DestinationSetter from './systems/DestinationSetter'\nimport Mover from './systems/Mover'\n\nconst colors = {\n  friendly: '#59cd90',\n  enemy: '#c73e1d',\n  projectile: '#ffe74c',\n  background: '#545e75',\n  selection: '#57b8ff',\n}\n\nclass Game {\n  private world: World\n  private lastTime: number\n  private animationFrameRequest: number | null\n\n  constructor({ canvas }: {canvas: HTMLCanvasElement}) {\n    this.lastTime = performance.now()\n    this.animationFrameRequest = null\n    this.world = new World()\n      .registerSystem(Attacker)\n      .registerSystem(Boidser)\n      .registerSystem(DestinationSetter)\n      .registerSystem(EnforceLifespan)\n      .registerSystem(EnforceHealth)\n      .registerSystem(Mover)\n      .registerSystem(RectangleSelector)\n      .registerSystem(Renderer, { canvas, colors })\n      .registerSystem(Selector)\n      .registerSystem(Stopper)\n      .registerComponent(Attack)\n      .registerComponent(Circle)\n      .registerComponent(Collidable)\n      .registerComponent(Debug)\n      .registerComponent(Destination)\n      .registerComponent(DestroyedOnImpact)\n      .registerComponent(DoesDamage)\n      .registerComponent(Health)\n      .registerComponent(Lifespan)\n      .registerComponent(Moveable)\n      .registerComponent(Position)\n      .registerComponent(RectangleSelection)\n      .registerComponent(Selectable)\n      .registerComponent(Team)\n  }\n\n  start = () => {\n    for (let i = 0; i < 10; i++) {\n      this.createFriendly(50 + 50 * i, 500)\n      this.createEnemy(50 + 50 * i, 100)\n    }\n    this.run();\n  }\n\n  createEnemy = (x: number, y: number) => {\n    const teamName = \"Enemy\"\n    const radius = 10;\n    const color = colors.enemy\n    const position = new Vector2(x, y)\n    const health = 100;\n\n    const projectileColor = colors.projectile\n    const projectileSpeed = 200;\n    const projectileLifetime = 5000;\n    const projectileDamage = 10;\n    const minimumRefactoryPeriod = 500;\n\n    this.world.createEntity()\n      .addComponent(Attack, { projectileColor, projectileSpeed, projectileLifetime, projectileDamage, minimumRefactoryPeriod })\n      .addComponent(Circle, { radius, color })\n      .addComponent(Collidable)\n      .addComponent(Health, { health, maxHealth: health })\n      .addComponent(Position, { position })\n      .addComponent(Team, { name: teamName })\n  }\n\n  createFriendly = (x: number, y: number) => {\n    const teamName = \"Friendly\"\n    const color = colors.friendly\n    const radius = 10;\n    const maxSpeed = 100;\n    const health = 100;\n    const direction = new Vector2()\n    const position = new Vector2(x, y)\n\n    const projectileColor = colors.projectile\n    const projectileSpeed = 200;\n    const projectileLifetime = 5000;\n    const projectileDamage = 10;\n    const minimumRefactoryPeriod = 500;\n\n    this.world.createEntity()\n      .addComponent(Attack, { projectileColor, projectileSpeed, projectileLifetime, projectileDamage, minimumRefactoryPeriod })\n      .addComponent(Circle, { radius, color })\n      .addComponent(Collidable)\n      .addComponent(Health, { health, maxHealth: health })\n      .addComponent(Moveable, { direction, maxSpeed })\n      .addComponent(Position, { position })\n      .addComponent(Selectable)\n      .addComponent(Team, { name: teamName })\n  }\n\n  stop = () => {\n    if (!this.animationFrameRequest) return\n\n    cancelAnimationFrame(this.animationFrameRequest)\n  }\n\n  toggleDebug = () => {\n    const renderer = this.world.getSystem(Renderer) as Renderer\n    renderer.toggleDebug()\n  }\n\n  onMouseDown = (e: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => {\n    const destionationSetter = this.world.getSystem(DestinationSetter) as DestinationSetter\n    const selector = this.world.getSystem(Selector) as Selector\n    const rectangleSelector = this.world.getSystem(RectangleSelector) as RectangleSelector\n\n    destionationSetter.onMouseDown(e)\n    selector.onMouseDown(e)\n    rectangleSelector.onMouseDown(e)\n  }\n\n  onMouseMove = (e: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => {\n    const rectangleSelector = this.world.getSystem(RectangleSelector) as RectangleSelector\n    rectangleSelector.onMouseMove(e)\n  }\n\n  onMouseUp = (e: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => {\n    const rectangleSelector = this.world.getSystem(RectangleSelector) as RectangleSelector\n    rectangleSelector.onMouseUp(e)\n  }\n\n  private run =  () => {\n     // Compute delta and elapsed time\n     const time = performance.now()\n     const delta = time - this.lastTime\n\n     // Run all the systems\n     this.world.execute(delta, time)\n\n     this.lastTime = time\n     this.animationFrameRequest = requestAnimationFrame(this.run)\n  }\n}\n\nexport default Game","import React, { MouseEventHandler } from 'react';\nimport { useKeyPressEvent } from 'react-use'\n\nimport Game from './ecs/Game'\nimport './App.css';\n\nconst App = () => {\n  const [canvas, setCanvas] = React.useState<HTMLCanvasElement | null>(null);\n  const gameRef = React.useRef<Game | null>(null)\n\n  React.useEffect(() => {\n    if (!canvas) return;\n\n    gameRef.current = new Game({canvas})\n    gameRef.current.start()\n\n    return () => {\n      gameRef.current?.stop()\n      gameRef.current = null\n    }\n  }, [canvas])\n\n  React.useEffect(() => {\n    const handleResize = () => {\n      if (!canvas) return\n\n      canvas.width = window.innerWidth\n      canvas.height = window.innerHeight\n    }\n\n    handleResize()\n    window.addEventListener('resize', handleResize)\n    return () => window.removeEventListener('resize', handleResize)\n  }, [canvas])\n\n  const onMouseDown: MouseEventHandler<HTMLCanvasElement> = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    gameRef.current?.onMouseDown(e)\n  }\n\n  const onMouseMove: MouseEventHandler<HTMLCanvasElement> = (e) => {\n    gameRef.current?.onMouseMove(e)\n  }\n\n  const onMouseUp: MouseEventHandler<HTMLCanvasElement> = (e) => {\n    gameRef.current?.onMouseUp(e)\n  }\n\n  useKeyPressEvent('d', () => gameRef.current?.toggleDebug())\n\n  return (\n    <div className=\"App\">\n      <canvas\n        ref={setCanvas}\n        onMouseDown={onMouseDown}\n        onMouseMove={onMouseMove}\n        onMouseUp={onMouseUp}\n        onContextMenu={e => e.preventDefault()} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}