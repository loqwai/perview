{"version":3,"sources":["ecs/components/Position.ts","ecs/components/Renderable.ts","ecs/components/Selectable.ts","ecs/systems/Renderer.ts","ecs/systems/SelectionToggler.ts","ecs/Game.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Position","x","y","Component","schema","type","Types","Number","Renderable","TagComponent","Selectable","selected","toggle","Boolean","Renderer","world","canvas","priority","drawCircle","ctx","getContext","fillStyle","beginPath","arc","Math","PI","fill","lineWidth","strokeStyle","stroke","delta","time","this","queries","renderables","results","forEach","entity","getComponent","System","components","SelectionToggler","onMouseDown","e","clientX","clientY","selectables","dX","dY","sqrt","getMutableComponent","_delta","_time","Game","lastTime","animationFrameRequest","start","i","createEntity","addComponent","run","stop","cancelAnimationFrame","button","getSystem","performance","now","execute","requestAnimationFrame","World","registerSystem","registerComponent","App","React","useState","setCanvas","gameRef","useRef","useEffect","current","handleResize","width","window","innerWidth","height","innerHeight","addEventListener","removeEventListener","className","ref","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","unregister","navigator","serviceWorker","ready","then","registration","catch","error","console","message"],"mappings":"yQAOMA,E,wOACJC,EAAY,E,EACZC,EAAY,E,mBAFSC,KAKvBH,EAASI,OAAS,CAChBH,EAAG,CAAEI,KAAMC,IAAMC,QACjBL,EAAG,CAAEG,KAAMC,IAAMC,SAGJP,QCbAQ,E,yKAFUC,K,OCInBC,E,gPACJC,UAAoB,E,EAEpBC,OAAS,WACP,EAAKD,UAAY,EAAKA,U,qBAJDR,KAQzBO,EAAWN,OAAS,CAClBO,SAAU,CAAEN,KAAMC,IAAMO,UAGXH,QCRTI,E,gEAGJ,kBAAYC,EAAZ,GAA6D,IAAD,EAAhCC,EAAgC,EAAhCA,OAAQC,EAAwB,EAAxBA,SAAwB,mCAC1D,cAAMF,EAAO,CAAEE,cAHTD,YAEoD,IAcpDE,WAAa,YAAkE,IAAhEjB,EAA+D,EAA/DA,EAAGC,EAA4D,EAA5DA,EAAGS,EAAyD,EAAzDA,SACrBQ,EAAM,EAAKH,OAAOI,WAAW,MAC9BD,IAELA,EAAIE,UAAY,OAChBF,EAAIG,YACJH,EAAII,IAAItB,EAAGC,EAAG,GAAI,EAAG,EAAIsB,KAAKC,IAAI,GAClCN,EAAIO,OACJP,EAAIQ,UAAY,EAChBR,EAAIS,YAAcjB,EAAW,OAAS,OACtCQ,EAAIU,WAtBJ,EAAKb,OAASA,EAF4C,E,mEAKpDc,EAAeC,GAAqB,IAAD,OACzCC,KAAKC,QAAQC,YAAYC,QAAQC,SAAQ,SAAAC,GAAW,IAAD,IAChCA,EAAOC,aAAatC,GAA7BC,EADyC,EACzCA,EAAGC,EADsC,EACtCA,EACHS,GAFyC,UAE5B0B,EAAOC,aAAa5B,UAFQ,QAEO,CAAEC,UAAU,IAA5DA,SAER,EAAKO,WAAW,CAACjB,IAAGC,IAAGS,oB,UAbN4B,KA+BvBzB,EAASmB,QAAU,CACjBC,YAAa,CAAEM,WAAY,CAAChC,EAAYR,KAG3Bc,QCzCT2B,E,wQAGJC,YAAc,SAACC,GAAwD,IAC9DC,EAAoBD,EAApBC,QAASC,EAAWF,EAAXE,QAEhB,EAAKZ,QAAQa,YAAYX,QAAQC,SAAQ,SAAAC,GAAW,IAAD,EAClCA,EAAOC,aAAatC,GAA5BC,EAD0C,EAC1CA,EAAGC,EADuC,EACvCA,EAEJ6C,EAAK9C,EAAI2C,EACTI,EAAK9C,EAAI2C,EAEErB,KAAKyB,KAAOF,EAAGA,EAAOC,EAAGA,IAC1B,IACdX,EAAOa,oBAAoBxC,GAAYE,a,6EAbrCuC,EAAgBC,Q,kBADKb,KAqB/BE,EAAiBR,QAAU,CACzBa,YAAa,CAAEN,WAAY,CAAC9B,EAAYV,KAG3ByC,QCgCAY,EAhDb,iBAAoD,IAAD,OAAtCrC,EAAsC,EAAtCA,OAAsC,4BAL3CD,WAK2C,OAJ3CC,YAI2C,OAH3CsC,cAG2C,OAF3CC,2BAE2C,OAYnDC,MAAQ,WACN,IAAK,IAAIC,EAAI,EAAGA,EAAI,GAAIA,IACtB,EAAK1C,MAAM2C,eACRC,aAAa3D,EAAU,CAACC,EAAG,GAAKwD,EAAGvD,EAAG,GAAKuD,IAC3CE,aAAajD,GACbiD,aAAanD,GAElB,EAAKoD,OAnB4C,KAsBnDC,KAAO,WACA,EAAKN,uBAEVO,qBAAqB,EAAKP,wBAzBuB,KA4BnDb,YAAc,SAACC,GACI,IAAbA,EAAEoB,QAEmB,EAAKhD,MAAMiD,UAAUvB,GAC7BC,YAAYC,IAhCoB,KAmC3CiB,IAAO,WAEZ,IAAM7B,EAAOkC,YAAYC,MACnBpC,EAAQC,EAAO,EAAKuB,SAG1B,EAAKvC,MAAMoD,QAAQrC,EAAOC,GAE1B,EAAKuB,SAAWvB,EAChB,EAAKwB,sBAAwBa,sBAAsB,EAAKR,MA3CzD5B,KAAKhB,OAASA,EACdgB,KAAKsB,SAAWW,YAAYC,MAC5BlC,KAAKuB,sBAAwB,KAC7BvB,KAAKjB,OAAQ,IAAIsD,KACdC,eAAexD,EAAU,CAAEE,WAC3BsD,eAAe7B,GACf8B,kBAAkBvE,GAClBuE,kBAAkB7D,GAClB6D,kBAAkB/D,ICuBVgE,G,MAxCH,SAANA,MAAa,IAAD,EACYC,IAAMC,SAAmC,MADrD,mBACT1D,EADS,KACD2D,EADC,KAEVC,EAAUH,IAAMI,OAAoB,MAE1CJ,IAAMK,WAAU,WACd,GAAK9D,EAKL,OAHA4D,EAAQG,QAAU,IAAI1B,EAAK,CAACrC,WAC5B4D,EAAQG,QAAQvB,QAET,WAAO,IAAD,EACX,UAAAoB,EAAQG,eAAR,SAAiBlB,OACjBe,EAAQG,QAAU,QAEnB,CAAC/D,IAEJyD,IAAMK,WAAU,WACd,IAAME,EAAe,SAAfA,eACChE,IAELA,EAAOiE,MAAQC,OAAOC,WACtBnE,EAAOoE,OAASF,OAAOG,cAKzB,OAFAL,IACAE,OAAOI,iBAAiB,SAAUN,GAC3B,kBAAME,OAAOK,oBAAoB,SAAUP,MACjD,CAAChE,IAMJ,OACE,yBAAKwE,UAAU,OACb,4BAAQC,IAAKd,EAAWjC,YAN8B,SAApDA,YAAqDC,GAAO,IAAD,EAC/D,UAAAiC,EAAQG,eAAR,SAAiBrC,YAAYC,SCvBb9B,QACW,cAA7BqE,OAAOQ,SAASC,UAEe,UAA7BT,OAAOQ,SAASC,UAEhBT,OAAOQ,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDgInB,SAASC,aACV,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaL,gBAEdM,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,YCjI5BP,K","file":"static/js/main.83ef050c.chunk.js","sourcesContent":["import { Component, Types } from \"ecsy\";\n\ninterface PositionProps {\n  x: number,\n  y: number,\n}\n\nclass Position extends Component<PositionProps> {\n  x: number = 0\n  y: number = 0\n}\n\nPosition.schema = {\n  x: { type: Types.Number },\n  y: { type: Types.Number },\n}\n\nexport default Position","import { TagComponent } from \"ecsy\";\n\nclass Renderable extends TagComponent {}\n\nexport default Renderable","import { Component, Types } from \"ecsy\";\n\nexport interface SelectableProps {\n  selected: boolean;\n}\n\nclass Selectable extends Component<SelectableProps> {\n  selected: boolean = false\n\n  toggle = () => {\n    this.selected = !this.selected\n  }\n}\n\nSelectable.schema = {\n  selected: { type: Types.Boolean },\n}\n\nexport default Selectable","import { System, World } from \"ecsy\";\nimport Renderable from \"../components/Renderable\";\nimport Position from \"../components/Position\";\nimport Selectable from \"../components/Selectable\";\n\ninterface Attributes {\n  priority?: number;\n  canvas: HTMLCanvasElement;\n}\n\nclass Renderer extends System {\n  private canvas: HTMLCanvasElement;\n\n  constructor(world: World, { canvas, priority }: Attributes) {\n    super(world, { priority })\n    this.canvas = canvas\n  }\n\n  execute(delta: number, time: number): void {\n    this.queries.renderables.results.forEach(entity => {\n      const { x, y } = entity.getComponent(Position);\n      const { selected } = entity.getComponent(Selectable) ?? { selected: false }\n\n      this.drawCircle({x, y, selected})\n    })\n  }\n\n  private drawCircle = ({x, y, selected}: {x: number, y: number, selected: boolean}) => {\n    const ctx = this.canvas.getContext('2d')\n    if (!ctx) return\n\n    ctx.fillStyle = \"#888\"\n    ctx.beginPath()\n    ctx.arc(x, y, 10, 0, 2 * Math.PI, false)\n    ctx.fill()\n    ctx.lineWidth = 1\n    ctx.strokeStyle = selected ? \"#F22\" : \"#222\"\n    ctx.stroke()    \n  }\n}\n\nRenderer.queries = {\n  renderables: { components: [Renderable, Position] }\n}\n\nexport default Renderer","import { System } from \"ecsy\";\nimport Position from \"../components/Position\";\nimport Selectable from \"../components/Selectable\";\n\nclass SelectionToggler extends System {\n  execute(_delta: number, _time: number): void {}\n\n  onMouseDown = (e: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => {\n    const {clientX, clientY} = e\n\n    this.queries.selectables.results.forEach(entity => {\n      const {x, y} = entity.getComponent(Position)\n\n      const dX = x - clientX\n      const dY = y - clientY\n\n      const distance = Math.sqrt( (dX*dX) + (dY*dY) )\n      if (distance <= 10) {\n        entity.getMutableComponent(Selectable).toggle()\n      }\n    })\n  };\n\n}\n\nSelectionToggler.queries = {\n  selectables: { components: [Selectable, Position] }\n}\n\nexport default SelectionToggler","import { World } from 'ecsy'\nimport Position from './components/Position'\nimport Renderable from './components/Renderable'\nimport Renderer from './systems/Renderer'\nimport Selectable from './components/Selectable'\nimport SelectionToggler from './systems/SelectionToggler'\n\nclass Game {\n  private world: World\n  private canvas: HTMLCanvasElement\n  private lastTime: number\n  private animationFrameRequest: number | null\n\n  constructor({canvas}: {canvas: HTMLCanvasElement}) {\n    this.canvas = canvas\n    this.lastTime = performance.now()\n    this.animationFrameRequest = null\n    this.world = new World()\n      .registerSystem(Renderer, { canvas })\n      .registerSystem(SelectionToggler)\n      .registerComponent(Position)\n      .registerComponent(Selectable)\n      .registerComponent(Renderable)\n  }\n\n  start = () => {\n    for (let i = 0; i < 10; i++) {\n      this.world.createEntity()\n        .addComponent(Position, {x: 50 * i, y: 50 * i})\n        .addComponent(Selectable)\n        .addComponent(Renderable)\n    }\n    this.run();\n  }\n\n  stop = () => {\n    if (!this.animationFrameRequest) return\n\n    cancelAnimationFrame(this.animationFrameRequest)\n  }\n\n  onMouseDown = (e: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => {\n    if (e.button !== 0) return;\n\n    const selectionToggler = this.world.getSystem(SelectionToggler) as SelectionToggler\n    selectionToggler.onMouseDown(e)\n  }\n\n  private run =  () => {\n     // Compute delta and elapsed time\n     const time = performance.now()\n     const delta = time - this.lastTime\n\n     // Run all the systems\n     this.world.execute(delta, time)\n\n     this.lastTime = time\n     this.animationFrameRequest = requestAnimationFrame(this.run)\n  }\n}\n\nexport default Game","import React, { MouseEventHandler } from 'react';\n\nimport Game from './ecs/Game'\nimport './App.css';\n\nconst App = () => {\n  const [canvas, setCanvas] = React.useState<HTMLCanvasElement | null>(null);\n  const gameRef = React.useRef<Game | null>(null)\n\n  React.useEffect(() => {\n    if (!canvas) return;\n\n    gameRef.current = new Game({canvas})\n    gameRef.current.start()\n\n    return () => {\n      gameRef.current?.stop()\n      gameRef.current = null\n    }\n  }, [canvas])\n\n  React.useEffect(() => {\n    const handleResize = () => {\n      if (!canvas) return\n\n      canvas.width = window.innerWidth\n      canvas.height = window.innerHeight\n    }\n\n    handleResize()\n    window.addEventListener('resize', handleResize)\n    return () => window.removeEventListener('resize', handleResize)\n  }, [canvas])\n\n  const onMouseDown: MouseEventHandler<HTMLCanvasElement> = (e) => {\n    gameRef.current?.onMouseDown(e)\n  }\n\n  return (\n    <div className=\"App\">\n      <canvas ref={setCanvas} onMouseDown={onMouseDown}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}