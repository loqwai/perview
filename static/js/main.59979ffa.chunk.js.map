{"version":3,"sources":["ecs/types/Vector2.ts","ecs/components/Circle.ts","ecs/components/Moveable.ts","ecs/components/RectangleSelection.ts","ecs/components/Selectable.ts","ecs/components/Team.ts","ecs/components/Attack.ts","ecs/utils/unitVector.ts","ecs/utils/distanceBetween.ts","ecs/systems/Attacker.ts","ecs/utils/positionsAreClose.ts","ecs/systems/Mover.ts","ecs/systems/RectangleSelector.ts","ecs/systems/Renderer.ts","ecs/systems/Selector.ts","ecs/systems/Stopper.ts","ecs/Game.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Vector2","x","y","this","source","Vector2Type","createType","name","default","copy","copyCopyable","clone","cloneClonable","Circle","color","radius","position","Component","schema","type","Types","String","Number","Moveable","hasDestination","destination","speed","Boolean","RectangleSelection","startPosition","endPosition","Selectable","selected","Team","Attack","projectileColor","projectileSpeed","projectileLifetime","minimumRefactoryPeriod","lastAttack","unitVector","r","Math","sqrt","distanceBetween","a","b","dX","dY","Attacker","closestTarget","attacker","getComponent","team","targets","queries","results","filter","entity","R","target","targetPosition","attackTarget","time","attack","getMutableComponent","vector","spawnPosition","world","createEntity","addComponent","_delta","attackers","forEach","System","components","positionsAreClose","threshold","Mover","onMouseDown","e","button","clientX","clientY","moveable","set","selectables","withDestination","moveables","delta","_time","mX","mY","RectangleSelector","onMouseMove","rectangleSelections","onMouseUp","remove","circles","circleEntity","selectable","withinX","withinY","Renderer","canvas","colors","priority","ctx","clear","fillStyle","background","fillRect","width","height","drawCircle","beginPath","arc","PI","fill","lineWidth","strokeStyle","stroke","selection","drawRectangleSelection","w","h","strokeRect","getContext","Selector","clickPosition","selectCircles","anySelected","deselectAllCircles","Stopper","stopIfColliding","otherEntity","other","friendly","enemy","projectile","Game","lastTime","animationFrameRequest","start","i","createFriendly","createEnemy","run","stop","cancelAnimationFrame","mover","getSystem","selector","rectangleSelector","performance","now","execute","requestAnimationFrame","World","registerSystem","registerComponent","App","React","useState","setCanvas","gameRef","useRef","useEffect","current","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener","className","ref","preventDefault","stopPropagation","onContextMenu","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","unregister","navigator","serviceWorker","ready","then","registration","catch","error","console","message"],"mappings":"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","file":"static/js/main.59979ffa.chunk.js","sourcesContent":["import { createType, copyCopyable, cloneClonable } from \"ecsy\";\n\nclass Vector2 {\n  x: number;\n  y: number;\n\n  constructor(x: number = 0, y: number = 0) {\n    this.x = x;\n    this.y = y;\n  }\n\n  set(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n    return this;\n  }\n\n  copy(source: Vector2) {\n    this.x = source.x;\n    this.y = source.y;\n    return this;\n  }\n\n  clone() {\n    return new Vector2(this.x, this.y)\n  }\n}\n\nexport default Vector2\n\nexport const Vector2Type = createType({\n  name: \"Vector2\",\n  default: new Vector2(),\n  copy: copyCopyable,\n  clone: cloneClonable\n});","import { Component, Types } from \"ecsy\";\nimport Vector2, { Vector2Type } from \"../types/Vector2\";\n\nclass Circle extends Component<Circle> {\n  color: string = '#000000';\n  radius: number = 0\n  position: Vector2 = new Vector2()\n}\n\nCircle.schema = {\n  color: {type: Types.String},\n  radius: { type: Types.Number }, \n  position: { type: Vector2Type },\n}\n\nexport default Circle","import { Component, Types } from \"ecsy\";\nimport Vector2, { Vector2Type } from \"../types/Vector2\";\n\n\nclass Moveable extends Component<Moveable> {\n  hasDestination: boolean = false\n  destination: Vector2 = new Vector2()\n  speed: number = 0\n}\n\nMoveable.schema = {\n  hasDestination: { type: Types.Boolean },\n  destination: { type: Vector2Type, },\n  speed: { type: Types.Number, },\n}\n\nexport default Moveable","import { Component } from \"ecsy\";\nimport Vector2, { Vector2Type } from \"../types/Vector2\";\n\nclass RectangleSelection extends Component<RectangleSelection>{\n  startPosition: Vector2 = new Vector2()\n  endPosition: Vector2 = new Vector2()\n}\n\nRectangleSelection.schema = {\n  startPosition: { type: Vector2Type },\n  endPosition: { type: Vector2Type },\n}\n\nexport default RectangleSelection","import { Component, Types } from \"ecsy\";\n\nclass Selectable extends Component<Selectable> {\n  selected: boolean = false\n}\n\nSelectable.schema = {\n  selected: { type: Types.Boolean },\n}\n\nexport default Selectable","import { Component, Types } from \"ecsy\"\n\nclass Team extends Component<Team> {\n  name: string = \"unknown\";\n}\n\nTeam.schema = {\n  name: { type: Types.String },\n}\n\nexport default Team","import { Component, Types } from \"ecsy\";\n\nclass Attack extends Component<Attack> {\n  projectileColor: string = '#000000';\n  projectileSpeed: number = 0;\n  projectileLifetime: number = 0;\n  minimumRefactoryPeriod: number = 0; \n  lastAttack: number = 0;\n}\n\nAttack.schema = {\n  projectileColor: { type: Types.String },\n  projectileSpeed: { type: Types.Number },\n  projectileLifetime: { type: Types.Number },\n  minimumRefactoryPeriod: { type: Types.Number },\n  lastAttack: { type: Types.Number },\n}\n\nexport default Attack","const unitVector = ({ x, y }: { x: number, y: number }) => {\n  const r = Math.sqrt(x*x + y*y)\n\n  return {\n    x: x / r,\n    y: y / r,\n  }\n}\n\nexport default unitVector","interface Position {\n  x: number;\n  y: number;\n}\n\nconst distanceBetween = (a: Position, b: Position) => {\n  const dX = a.x - b.x\n  const dY = a.y - b.y\n  return Math.sqrt( (dX*dX) + (dY*dY) )\n}\n\nexport default distanceBetween\n\n\n","import { System, Entity } from \"ecsy\";\nimport * as R from 'ramda'\n\nimport Team from '../components/Team'\nimport Attack from \"../components/Attack\";\nimport Circle from \"../components/Circle\";\nimport unitVector from \"../utils/unitVector\";\nimport Vector2 from \"../types/Vector2\";\nimport Moveable from \"../components/Moveable\";\nimport distanceBetween from \"../utils/distanceBetween\";\n\nclass Attacker extends System {\n  execute(_delta: number, time: number): void {\n    this.queries.attackers.results.forEach(attacker => {\n      const attack = attacker.getComponent(Attack)\n\n      if (time < attack.lastAttack + attack.minimumRefactoryPeriod) {\n        return;\n      }\n\n      const target = this.closestTarget(attacker)\n\n      if (target) this.attackTarget(time, attacker, target);\n    })\n  }\n\n  private closestTarget = (attacker: Entity) => {\n    const { position } = attacker.getComponent(Circle)\n    const team = attacker.getComponent(Team)\n\n    const targets = this.queries.targets.results.filter(entity => team.name !== entity.getComponent(Team).name)\n    const sortedTargets = R.sortBy(target => {\n      const { position: targetPosition } = target.getComponent(Circle)\n      return distanceBetween(position, targetPosition)\n    }, targets)\n\n    return sortedTargets[0]\n  }\n\n  private attackTarget = (time: number, attacker: Entity, target: Entity) => {\n    const attack = attacker.getMutableComponent(Attack)\n    attack.lastAttack = time\n\n    const { radius, position } = attacker.getComponent(Circle)\n    const { position: targetPosition } = target.getComponent(Circle)\n\n    const vector = unitVector({\n      x: targetPosition.x - position.x,\n      y: targetPosition.y - position.y,\n    })\n\n    const spawnPosition = new Vector2(\n      position.x + (vector.x * (radius + 3)),\n      position.y + (vector.y * (radius + 3)),\n    )\n\n    this.world.createEntity()\n      .addComponent(Circle, { color: attack.projectileColor, radius: 2, position: spawnPosition })\n      .addComponent(Moveable, { speed: attack.projectileSpeed, hasDestination: true, destination: targetPosition })\n  }\n}\n\nAttacker.queries = {\n  attackers: { components: [Attack, Circle, Team] },\n  targets: { components: [Circle, Team] },\n}\n\nexport default Attacker","import distanceBetween from \"./distanceBetween\"\n\ninterface Position {\n  x: number;\n  y: number;\n}\n\nconst positionsAreClose = (a: Position, b: Position, threshold: number) =>\n  distanceBetween(a, b) <= threshold\n\nexport default positionsAreClose","import { System } from \"ecsy\";\nimport Moveable from \"../components/Moveable\";\nimport Circle from \"../components/Circle\";\nimport Selectable from \"../components/Selectable\";\nimport positionsAreClose from \"../utils/positionsAreClose\";\nimport unitVector from \"../utils/unitVector\";\n\nclass Mover extends System {\n  execute(delta: number, _time: number): void {\n    this.withDestination().forEach(entity => {\n      const { position } = entity.getMutableComponent(Circle)\n      const { destination, speed } = entity.getComponent(Moveable)\n\n      const vector = unitVector({\n        x: destination.x - position.x,\n        y: destination.y - position.y,\n      })\n\n      const mX = vector.x * (delta * speed / 1000)\n      const mY = vector.y * (delta * speed / 1000)\n\n      position.x += mX\n      position.y += mY\n\n      if (positionsAreClose(position, destination, 1)) {\n        entity.getMutableComponent(Moveable).hasDestination = false\n      }\n    })\n  }\n\n  onMouseDown = (e: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => {\n    if (e.button !== 2) return;\n\n    const {clientX, clientY} = e\n\n    this.selected().forEach(entity => {\n      const moveable = entity.getMutableComponent(Moveable)\n      moveable.hasDestination = true\n      moveable.destination.set(clientX, clientY)\n    });\n  }\n\n  selected = () => {\n    return this.queries.selectables.results.filter(entity => {\n      return entity.getComponent(Selectable).selected\n    })\n  }\n\n  withDestination = () => {\n    return this.queries.moveables.results.filter(entity => {\n      return entity.getComponent(Moveable).hasDestination\n    })\n  }\n}\n\nMover.queries = {\n  moveables: { components: [ Moveable, Circle ] },\n  selectables: { components: [ Moveable, Selectable ] },\n}\n\nexport default Mover","import { System } from \"ecsy\";\nimport Selectable from \"../components/Selectable\";\nimport Circle from \"../components/Circle\";\nimport Vector2 from \"../types/Vector2\";\nimport RectangleSelection from \"../components/RectangleSelection\";\nimport positionsAreClose from \"../utils/positionsAreClose\";\n\nclass RectangleSelector extends System {\n  execute(_delta: number, _time: number): void { }\n\n  onMouseDown = (e: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => {\n    if (e.button !== 0) return;\n\n    const startPosition = new Vector2(e.clientX, e.clientY)\n    const endPosition = new Vector2(e.clientX, e.clientY)\n\n    this.world.createEntity()\n      .addComponent(RectangleSelection, { startPosition, endPosition })\n  }\n\n  onMouseMove = (e: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => {\n    const { clientX, clientY } = e\n\n    this.queries.rectangleSelections.results.forEach(entity => {\n      const { endPosition } = entity.getComponent(RectangleSelection)\n\n      if (clientX === endPosition.x || clientY === endPosition.y) {\n        return;\n      }\n\n      entity.getMutableComponent(RectangleSelection).endPosition.set(clientX, clientY)\n    })\n  }\n\n  onMouseUp = (e: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => {\n    if (e.button !== 0) return;\n\n    this.queries.rectangleSelections.results.forEach(entity => {\n      const { startPosition, endPosition } = entity.getComponent(RectangleSelection)\n      entity.remove();\n      if (positionsAreClose(startPosition, endPosition, 5)) return;\n\n      this.queries.circles.results.forEach(circleEntity => {\n        const selectable = circleEntity.getMutableComponent(Selectable)\n        const { position } = circleEntity.getComponent(Circle);\n        const { x, y } = position\n\n        const withinX = (startPosition.x < x && x < endPosition.x)\n                    || (endPosition.x < x && x < startPosition.x)\n\n        const withinY = (startPosition.y < y && y < endPosition.y)\n                    || (endPosition.y < y && y < startPosition.y)\n\n        selectable.selected = (withinX && withinY)\n      })\n    })\n  }\n}\n\nRectangleSelector.queries = {\n  circles: { components: [Selectable, Circle] },\n  rectangleSelections: { components: [RectangleSelection] },\n}\n\nexport default RectangleSelector","import { System, World, Entity } from \"ecsy\";\nimport Circle from \"../components/Circle\";\nimport Selectable from \"../components/Selectable\";\nimport RectangleSelection from \"../components/RectangleSelection\";\nimport positionsAreClose from \"../utils/positionsAreClose\";\n\ninterface Colors {\n  background: string;\n  selection: string;\n}\n\ninterface Attributes {\n  priority?: number;\n  canvas: HTMLCanvasElement;\n  colors: Colors\n}\n\nclass Renderer extends System {\n  private canvas: HTMLCanvasElement;\n  private colors: Colors;\n  private ctx: CanvasRenderingContext2D | null;\n\n  constructor(world: World, { canvas, colors, priority }: Attributes) {\n    super(world, { priority })\n    this.canvas = canvas\n    this.colors = colors\n    this.ctx = this.canvas.getContext('2d')\n  }\n\n  execute(delta: number, time: number): void {\n    this.clear()\n    this.queries.circles.results.forEach(this.drawCircle)\n    this.queries.rectangleSelections.results.forEach(this.drawRectangleSelection)\n  }\n\n  private clear = () => {\n    if (!this.ctx) return;\n\n    this.ctx.fillStyle = this.colors.background\n    this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n  }\n\n  private drawCircle = (entity: Entity) => {\n    if (!this.ctx) return\n\n    const ctx = this.ctx\n    const { color, radius, position } = entity.getComponent(Circle)\n    const selected = entity.getComponent(Selectable)?.selected ?? false\n    const { x, y } = position\n\n    ctx.fillStyle = color\n    ctx.beginPath()\n    ctx.arc(x, y, radius, 0, 2 * Math.PI, false)\n    ctx.fill()\n    ctx.lineWidth = 2\n    ctx.strokeStyle = '#222'\n    ctx.stroke()    \n\n    if (selected) {\n      ctx.beginPath()\n      ctx.arc(x, y, radius + 2, 0, 2 * Math.PI, false)\n      ctx.lineWidth = 2\n      ctx.strokeStyle = this.colors.selection\n      ctx.stroke()    \n    }\n  }\n\n  private drawRectangleSelection = (entity: Entity) => {\n    if (!this.ctx) return;\n\n    const ctx = this.ctx\n    const { startPosition, endPosition } = entity.getComponent(RectangleSelection)\n\n    if (positionsAreClose(startPosition, endPosition, 5)) return;\n\n    const { x, y } = startPosition\n    const w = endPosition.x - x\n    const h = endPosition.y - y\n\n    ctx.lineWidth = 2\n    ctx.strokeStyle = this.colors.selection;\n    ctx.strokeRect(x, y, w, h)\n  }\n}\n\nRenderer.queries = {\n  circles: { components: [Circle] },\n  rectangleSelections: { components: [RectangleSelection] },\n}\n\nexport default Renderer","import { System } from \"ecsy\";\nimport Circle from \"../components/Circle\";\nimport Selectable from \"../components/Selectable\";\nimport positionsAreClose from \"../utils/positionsAreClose\";\n\nclass Selector extends System {\n  execute(_delta: number, _time: number): void {}\n\n  onMouseDown = (e: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => {\n    if (e.button !== 0) return;\n\n    const clickPosition = { x: e.clientX, y: e.clientY }\n    this.selectCircles(clickPosition)\n  };\n\n  selectCircles = (clickPosition: { x: number, y: number }) => {\n    let anySelected = false\n\n    this.queries.circles.results.forEach(entity => {\n      const { position, radius } = entity.getComponent(Circle)\n\n      if (positionsAreClose(clickPosition, position, radius)) {\n        entity.getMutableComponent(Selectable).selected = true\n        anySelected = true\n      }\n    })\n\n    if (!anySelected) this.deselectAllCircles();\n  }\n\n  private deselectAllCircles = () => {\n    this.queries.circles.results.forEach(entity => {\n      if (!entity.getComponent(Selectable).selected) return\n\n      entity.getMutableComponent(Selectable).selected = false\n    })\n  }\n}\n\nSelector.queries = {\n  circles: { components: [Selectable, Circle] }\n}\n\nexport default Selector","import { System, Entity } from \"ecsy\";\nimport Moveable from \"../components/Moveable\";\nimport Circle from \"../components/Circle\";\nimport positionsAreClose from \"../utils/positionsAreClose\";\n\nclass Stopper extends System {\n  execute(_delta: number, _time: number): void {\n    this.queries.moveables.results.forEach(this.stopIfColliding)\n  }\n\n  private stopIfColliding = (entity: Entity) => {\n    const { radius, position } = entity.getComponent(Circle)\n\n    this.queries.moveables.results.forEach(otherEntity => {\n      if (entity === otherEntity) return;\n\n      const other = otherEntity.getComponent(Circle)\n      const threshold = radius + other.radius\n\n      if (positionsAreClose(position, other.position, threshold)) {\n        entity.getMutableComponent(Moveable).hasDestination = false\n      }\n    })\n  }\n}\n\nStopper.queries = {\n  moveables: { components: [ Moveable, Circle ] },\n}\n\nexport default Stopper","import { World } from 'ecsy'\n\nimport Vector2 from './types/Vector2'\n\nimport Circle from './components/Circle'\nimport Moveable from './components/Moveable'\nimport RectangleSelection from './components/RectangleSelection'\nimport Selectable from './components/Selectable'\nimport Team from './components/Team'\n\nimport Attacker from './systems/Attacker'\nimport Mover from './systems/Mover'\nimport RectangleSelector from './systems/RectangleSelector'\nimport Renderer from './systems/Renderer'\nimport Selector from './systems/Selector'\nimport Stopper from './systems/Stopper'\nimport Attack from './components/Attack'\n\nconst colors = {\n  friendly: '#59cd90',\n  enemy: '#c73e1d',\n  projectile: '#ffe74c',\n  background: '#545e75',\n  selection: '#57b8ff',\n}\n\nclass Game {\n  private world: World\n  private canvas: HTMLCanvasElement\n  private lastTime: number\n  private animationFrameRequest: number | null\n\n  constructor({canvas}: {canvas: HTMLCanvasElement}) {\n    this.canvas = canvas\n    this.lastTime = performance.now()\n    this.animationFrameRequest = null\n    this.world = new World()\n      .registerSystem(Attacker)\n      .registerSystem(Mover)\n      .registerSystem(RectangleSelector)\n      .registerSystem(Renderer, { canvas, colors })\n      .registerSystem(Selector)\n      .registerSystem(Stopper)\n      .registerComponent(Attack)\n      .registerComponent(Circle)\n      .registerComponent(Moveable)\n      .registerComponent(RectangleSelection)\n      .registerComponent(Selectable)\n      .registerComponent(Team)\n  }\n\n  start = () => {\n    for (let i = 0; i < 10; i++) {\n      this.createFriendly(50 + 50 * i, 500)\n      this.createEnemy(50 + 50 * i, 100)\n    }\n    this.run();\n  }\n\n  createEnemy = (x: number, y: number) => {\n    const teamName = \"Enemy\"\n    const radius = 10;\n    const color = colors.enemy\n    const position = new Vector2(x, y)\n\n    const projectileColor = colors.projectile\n    const projectileSpeed = 100;\n    const projectileLifetime = 5000;\n    const minimumRefactoryPeriod = 1000;\n\n    this.world.createEntity()\n      .addComponent(Attack, { projectileColor, projectileSpeed, projectileLifetime, minimumRefactoryPeriod })\n      .addComponent(Circle, { radius, color, position })\n      .addComponent(Moveable)\n      .addComponent(Team, { name: teamName })\n  }\n\n  createFriendly = (x: number, y: number) => {\n    const teamName = \"Friendly\"\n    const color = colors.friendly\n    const radius = 10;\n    const speed = 100;\n    const position = new Vector2(x, y)\n\n    const projectileColor = colors.projectile\n    const projectileSpeed = 100;\n    const projectileLifetime = 5000;\n    const minimumRefactoryPeriod = 1000;\n\n    this.world.createEntity()\n      .addComponent(Attack, { projectileColor, projectileSpeed, projectileLifetime, minimumRefactoryPeriod })\n      .addComponent(Circle, { radius, color, position })\n      .addComponent(Moveable, { speed })\n      .addComponent(Selectable)\n      .addComponent(Team, { name: teamName })\n  }\n\n  stop = () => {\n    if (!this.animationFrameRequest) return\n\n    cancelAnimationFrame(this.animationFrameRequest)\n  }\n\n  onMouseDown = (e: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => {\n    const mover = this.world.getSystem(Mover) as Mover\n    const selector = this.world.getSystem(Selector) as Selector\n    const rectangleSelector = this.world.getSystem(RectangleSelector) as RectangleSelector\n\n    mover.onMouseDown(e)\n    selector.onMouseDown(e)\n    rectangleSelector.onMouseDown(e)\n  }\n\n  onMouseMove = (e: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => {\n    const rectangleSelector = this.world.getSystem(RectangleSelector) as RectangleSelector\n    rectangleSelector.onMouseMove(e)\n  }\n\n  onMouseUp = (e: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => {\n    const rectangleSelector = this.world.getSystem(RectangleSelector) as RectangleSelector\n    rectangleSelector.onMouseUp(e)\n  }\n\n  private run =  () => {\n     // Compute delta and elapsed time\n     const time = performance.now()\n     const delta = time - this.lastTime\n\n     // Run all the systems\n     this.world.execute(delta, time)\n\n     this.lastTime = time\n     this.animationFrameRequest = requestAnimationFrame(this.run)\n  }\n}\n\nexport default Game","import React, { MouseEventHandler } from 'react';\n\nimport Game from './ecs/Game'\nimport './App.css';\n\nconst App = () => {\n  const [canvas, setCanvas] = React.useState<HTMLCanvasElement | null>(null);\n  const gameRef = React.useRef<Game | null>(null)\n\n  React.useEffect(() => {\n    if (!canvas) return;\n\n    gameRef.current = new Game({canvas})\n    gameRef.current.start()\n\n    return () => {\n      gameRef.current?.stop()\n      gameRef.current = null\n    }\n  }, [canvas])\n\n  React.useEffect(() => {\n    const handleResize = () => {\n      if (!canvas) return\n\n      canvas.width = window.innerWidth\n      canvas.height = window.innerHeight\n    }\n\n    handleResize()\n    window.addEventListener('resize', handleResize)\n    return () => window.removeEventListener('resize', handleResize)\n  }, [canvas])\n\n  const onMouseDown: MouseEventHandler<HTMLCanvasElement> = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    gameRef.current?.onMouseDown(e)\n  }\n\n  const onMouseMove: MouseEventHandler<HTMLCanvasElement> = (e) => {\n    gameRef.current?.onMouseMove(e)\n  }\n\n  const onMouseUp: MouseEventHandler<HTMLCanvasElement> = (e) => {\n    gameRef.current?.onMouseUp(e)\n  }\n\n  return (\n    <div className=\"App\">\n      <canvas \n        ref={setCanvas} \n        onMouseDown={onMouseDown} \n        onMouseMove={onMouseMove}\n        onMouseUp={onMouseUp}\n        onContextMenu={e => e.preventDefault()} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}