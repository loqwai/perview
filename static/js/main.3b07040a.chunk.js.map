{"version":3,"sources":["ecs/components/Attack.ts","ecs/components/Circle.ts","ecs/components/Collidable.ts","ecs/components/Debug.ts","ecs/types/Vector2.ts","ecs/components/DebugVector.ts","ecs/components/Destination.ts","ecs/components/DestroyedOnImpact.ts","ecs/components/DoesDamage.ts","ecs/components/Health.ts","ecs/components/Lifespan.ts","ecs/components/Moveable.ts","ecs/components/Position.ts","ecs/components/RectangleSelection.ts","ecs/components/Selectable.ts","ecs/components/Team.ts","ecs/systems/Attacker.ts","ecs/systems/Boidser.ts","ecs/components/Camera.ts","ecs/systems/DestinationSetter.ts","ecs/systems/EnforceHealth.ts","ecs/systems/EnforceLifespan.ts","ecs/systems/Mover.ts","ecs/utils/distanceBetween.ts","ecs/utils/positionsAreClose.ts","ecs/systems/RectangleSelector.ts","ecs/components/VectorDebugState.ts","ecs/systems/Renderer.ts","ecs/systems/Selector.ts","ecs/systems/Stopper.ts","ecs/systems/VectorDebugger.ts","ecs/systems/CameraPanner.ts","ecs/Game.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Attack","projectileColor","projectileSpeed","projectileLifetime","projectileDamage","minimumRefactoryPeriod","lastAttack","Component","schema","type","Types","String","Number","Circle","color","radius","Collidable","TagComponent","Debug","Vector2","x","y","set","copy","source","clone","add","other","addMut","angleTo","x1","y1","numerator","denominator","magnitude","Math","acos","limit","n","limitMut","divideScalarMut","divideScalar","sqrt","multiplyScalar","multiplyScalarMut","toJSON","indent","JSON","stringify","subtract","subtractMut","unit","unitMut","this","Vector2Type","createType","name","default","copyCopyable","cloneClonable","DebugVector","position","direction","Destination","DestroyedOnImpact","DoesDamage","damage","Health","maxHealth","health","Lifespan","ttl","createdAt","Moveable","maxSpeed","minSeparation","separation","Position","RectangleSelection","startPosition","endPosition","Selectable","selected","Boolean","Team","Attacker","closestUnObstructedTarget","attacker","getComponent","team","targets","queries","results","filter","entity","teammates","getTeammates","unObstructedTargets","target","inRange","isObstructed","R","otherPosition","maxDistance","others","inTheWayOfTarget","p1","p2","p3","vecToTarget","vecToOther","angle","PI","sin","attackTarget","time","attack","getMutableComponent","spawnPosition","world","createEntity","addComponent","attackers","_delta","forEach","System","components","Boidser","executeEntity","destinationForce","calcDestinationForce","separationForce","calcSeparationForce","cohesionForce","calcCohesionForce","alignmentForce","calcAlignmentForce","isNaN","Error","entities","force","e","p","d","distance","f","length","calcAveragePosition","positions","map","sumPositions","hasComponent","destination","multiplier","vector","forces","calcSingleSeparationForce","allowedDistance","pow","_time","Camera","panSpeed","DestinationSetter","onMouseDown","button","clientX","clientY","cameraOffset","selectables","cameras","EnforceHealth","withHealth","remove","EnforceLifespan","delta","withLifepan","Mover","moveables","mX","mY","distanceBetween","a","b","dX","dY","positionsAreClose","threshold","RectangleSelector","rectangleSelections","onMouseMove","onMouseUp","selectableEntity","selectable","withinX","withinY","VectorDebugState","enabled","Renderer","canvas","colors","priority","ctx","renderCircles","circles","renderCircle","renderHealths","healths","renderHealth","renderRectangleSelections","renderRectangleSelection","clear","fillStyle","background","fillRect","width","height","beginPath","arc","fill","lineWidth","strokeStyle","stroke","selection","renderDebugVector","renderVector","wHealth","strokeRect","rectangleSelection","w","h","offsetPosition","moveTo","lineTo","vectorDebugEnabled","vectorDebugStates","getContext","renderDebugVectors","debugVectors","Selector","clickPosition","selectCircles","deselectAllCircles","isCloseTo","e1","e2","c1","c2","Stopper","stopIfAtDestination","removeComponent","stopIfColliding","collideables","withDestination","VectorDebugger","onKeyDown","key","state","CameraPanner","panning","up","right","down","left","onKeyUp","camera","friendly","enemy","projectile","Game","lastTime","animationFrameRequest","start","createCamera","createVectorDebugState","i","createFriendly","createEnemy","run","stop","cancelAnimationFrame","vectorDebugger","cameraPanner","destinationSetter","selector","rectangleSelector","performance","now","execute","requestAnimationFrame","getSystem","renderer","World","registerSystem","registerComponent","App","React","useState","setCanvas","gameRef","useRef","useEffect","current","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener","useKey","event","className","ref","preventDefault","stopPropagation","onContextMenu","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","unregister","navigator","serviceWorker","ready","then","registration","catch","error","console","message"],"mappings":"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","file":"static/js/main.3b07040a.chunk.js","sourcesContent":["import { Component, Types } from \"ecsy\";\n\nclass Attack extends Component<Attack> {\n  projectileColor: string = '#000000';\n  projectileSpeed: number = 0;\n  projectileLifetime: number = 0;\n  projectileDamage: number = 0;\n  minimumRefactoryPeriod: number = 0; \n  lastAttack: number = 0;\n}\n\nAttack.schema = {\n  projectileColor: { type: Types.String },\n  projectileSpeed: { type: Types.Number },\n  projectileLifetime: { type: Types.Number },\n  projectileDamage: { type: Types.Number },\n  minimumRefactoryPeriod: { type: Types.Number },\n  lastAttack: { type: Types.Number },\n}\n\nexport default Attack","import { Component, Types } from \"ecsy\";\n\nclass Circle extends Component<Circle> {\n  color: string = '#000000';\n  radius: number = 0\n}\n\nCircle.schema = {\n  color: {type: Types.String},\n  radius: { type: Types.Number }, \n}\n\nexport default Circle","import { TagComponent } from \"ecsy\";\n\nclass Collidable extends TagComponent {}\n\nexport default Collidable","import { TagComponent } from \"ecsy\";\n\nclass Debug extends TagComponent {\n\n}\n\nexport default Debug","import { createType, copyCopyable, cloneClonable } from \"ecsy\";\n\nclass Vector2 {\n  x: number;\n  y: number;\n\n  constructor(x: number = 0, y: number = 0) {\n    this.x = x;\n    this.y = y;\n  }\n\n  set = (x: number, y: number) => {\n    this.x = x;\n    this.y = y;\n    return this;\n  }\n\n  copy = (source: Vector2) => {\n    this.x = source.x;\n    this.y = source.y;\n    return this;\n  }\n\n  clone = () => new Vector2().copy(this)\n\n  /**\n   * returns a new vector with the other vector's x & y\n   * components added to this one\n   * */\n  add = (other: Vector2): Vector2 => this.clone().addMut(other)\n\n  /**\n   * mutates the vector, adding the other vector's x & y\n   * components to this one\n   * */\n  addMut = (other: Vector2): Vector2 => {\n    this.x += other.x\n    this.y += other.y\n    return this\n  }\n\n\n  angleTo = (other: Vector2): number => {\n    const {x: x1, y: y1} = this\n    const {x: x2, y: y2} = other\n\n    const numerator = (x1 * x2) + (y1 * y2)\n    const denominator = this.magnitude() * other.magnitude()\n\n    return Math.acos(numerator / denominator)\n  }\n\n  /**\n   * If the magnitude of the vecor is greater than the limit, it will return\n   * a new vector scaled down so its magnitude is equal to the limit\n   */\n  limit = (n: number) => this.clone().limitMut(n)\n\n  /**\n   * If the magnitude of the vecor is greater than the limit, it will scale\n   * down to a vector with a magnitude equal to the limit\n   */\n  limitMut = (n: number) => {\n    const magnitude = this.magnitude()\n    if (n < magnitude) {\n      this.divideScalarMut(magnitude / n)\n    }\n    return this\n  }\n\n  /**\n   * Returns a new vector with both x & y divided by n\n   * */\n  divideScalar = (n: number) => this.clone().divideScalarMut(n)\n\n  /**\n   * Mutates the current vector, dividing both x & y by n.\n   * Returns itself for easy chaining\n   * */\n  divideScalarMut = (n: number): Vector2 => {\n    this.x /= n\n    this.y /= n\n    return this\n  }\n\n  magnitude = () => Math.sqrt((this.x * this.x) + (this.y * this.y))\n\n  /**\n   * Returns a new vector with both x & y multiplied by n\n   * */\n  multiplyScalar = (n: number) => this.clone().multiplyScalarMut(n)\n\n  /**\n   * Mutates the current vector, dividing both x & y by n.\n   * Returns itself for easy chaining\n   * */\n  multiplyScalarMut = (n: number): Vector2 => {\n    this.x *= n\n    this.y *= n\n    return this\n  }\n\n  toJSON = (indent?: number) => {\n    const { x, y } = this\n    return JSON.stringify({ x, y }, null, indent ?? 0)\n  }\n\n  /**\n   * returns a new vector with the other vector's x & y\n   * components subtracted from this one\n   * */\n  subtract = (other: Vector2): Vector2 => this.clone().subtractMut(other)\n\n  /**\n   * mutates the vector, subtracting the other vector's x & y\n   * components from this one\n   * */\n  subtractMut = (other: Vector2): Vector2 => {\n    this.x -= other.x\n    this.y -= other.y\n    return this\n  }\n\n  /**\n   * Returns a new unit vector of the current vector. If the magnitude of the\n   * current vector is 0, it will return the 0, 0 vector\n   * */\n  unit = () => this.clone().unitMut()\n\n  unitMut = () => {\n    const magnitude = this.magnitude()\n\n    return (magnitude === 0)\n      ? this.multiplyScalar(0)\n      : this.divideScalarMut(magnitude)\n  }\n}\n\nexport default Vector2\n\nexport const Vector2Type = createType({\n  name: \"Vector2\",\n  default: new Vector2(),\n  copy: copyCopyable,\n  clone: cloneClonable\n});","import { Component, Types } from \"ecsy\";\nimport Vector2, { Vector2Type } from \"../types/Vector2\";\n\nclass DebugVector extends Component<DebugVector> {\n  position: Vector2 = new Vector2();\n  direction: Vector2 = new Vector2();\n  color: string = '#ff00ff';\n}\n\nDebugVector.schema = {\n  position: { type: Vector2Type },\n  direction: { type: Vector2Type },\n  color: { type: Types.String },\n}\n\nexport default DebugVector","import { Component } from \"ecsy\";\nimport Vector2, { Vector2Type } from \"../types/Vector2\";\n\nclass Destination extends Component<Destination> {\n  position: Vector2 = new Vector2()\n}\n\nDestination.schema = {\n  position: { type: Vector2Type },\n}\n\nexport default Destination","import { TagComponent } from \"ecsy\";\n\nclass DestroyedOnImpact extends TagComponent {}\n\nexport default DestroyedOnImpact","import { Component, Types } from \"ecsy\";\n\nclass DoesDamage extends Component<DoesDamage> {\n  damage: number = 0;\n}\n\nDoesDamage.schema = {\n  damage: { type: Types.Number },\n}\n\nexport default DoesDamage","import { Component, Types } from \"ecsy\";\n\nclass Health extends Component<Health> {\n  maxHealth: number = 0;\n  health: number = 0;\n}\n\nHealth.schema = {\n  maxHealth: { type: Types.Number },\n  health: { type: Types.Number },\n}\n\nexport default Health","import { Component, Types } from \"ecsy\";\n\nclass Lifespan extends Component<Lifespan> {\n  ttl: number = 0;\n  createdAt: number = 0;\n}\n\nLifespan.schema = {\n  ttl: { type: Types.Number },\n  createdAt: { type: Types.Number },\n}\n\nexport default Lifespan","import { Component, Types } from \"ecsy\";\nimport Vector2, { Vector2Type } from \"../types/Vector2\";\n\nclass Moveable extends Component<Moveable> {\n  direction: Vector2 = new Vector2()\n  maxSpeed: number = 0\n  minSeparation: number = 0\n  separation: number = 0\n}\n\nMoveable.schema = {\n  direction: { type: Vector2Type, },\n  maxSpeed: { type: Types.Number, },\n  minSeparation: { type: Types.Number, },\n  separation: { type: Types.Number, },\n}\n\nexport default Moveable","import { Component } from \"ecsy\";\nimport Vector2, { Vector2Type } from \"../types/Vector2\";\n\nclass Position extends Component<Position> {\n  position: Vector2 = new Vector2()\n}\n\nPosition.schema = {\n  position: { type: Vector2Type },\n}\n\nexport default Position","import { Component } from \"ecsy\";\nimport Vector2, { Vector2Type } from \"../types/Vector2\";\n\nclass RectangleSelection extends Component<RectangleSelection>{\n  startPosition: Vector2 = new Vector2()\n  endPosition: Vector2 = new Vector2()\n}\n\nRectangleSelection.schema = {\n  startPosition: { type: Vector2Type },\n  endPosition: { type: Vector2Type },\n}\n\nexport default RectangleSelection","import { Component, Types } from \"ecsy\";\n\nclass Selectable extends Component<Selectable> {\n  selected: boolean = false\n}\n\nSelectable.schema = {\n  selected: { type: Types.Boolean },\n}\n\nexport default Selectable","import { Component, Types } from \"ecsy\"\n\nclass Team extends Component<Team> {\n  name: string = \"unknown\";\n}\n\nTeam.schema = {\n  name: { type: Types.String },\n}\n\nexport default Team","import { System, Entity } from \"ecsy\";\nimport * as R from 'ramda'\n\nimport Team from '../components/Team'\nimport Attack from \"../components/Attack\";\nimport Circle from \"../components/Circle\";\nimport Moveable from \"../components/Moveable\";\nimport DestroyedOnImpact from \"../components/DestroyedOnImpact\";\nimport Lifespan from \"../components/Lifespan\";\nimport DoesDamage from \"../components/DoesDamage\";\nimport Position from \"../components/Position\";\n\nclass Attacker extends System {\n  execute(_delta: number, time: number): void {\n    this.queries.attackers.results.forEach(attacker => {\n      const attack = attacker.getComponent(Attack)\n\n      if (time < attack.lastAttack + attack.minimumRefactoryPeriod) {\n        return;\n      }\n\n      const target = this.closestUnObstructedTarget(attacker)\n\n      if (target) this.attackTarget(time, attacker, target);\n    })\n  }\n\n  private closestUnObstructedTarget = (attacker: Entity) => {\n    const { position } = attacker.getComponent(Position)\n    const team = attacker.getComponent(Team)\n\n    const targets = this.queries.targets.results.filter(entity => team.name !== entity.getComponent(Team).name)\n    const teammates = this.getTeammates(attacker)\n    const targetsInRange = targets.filter(target => this.inRange(attacker, target))\n    const unObstructedTargets = targetsInRange.filter(target => !this.isObstructed(attacker, target, teammates))\n\n    const sortedTargets = R.sortBy(target => {\n      const { position: targetPosition } = target.getComponent(Position)\n      const vector = targetPosition.subtract(position)\n      return vector.magnitude()\n    }, unObstructedTargets)\n\n    return sortedTargets[0]\n  }\n\n  private inRange = (attacker: Entity, target: Entity) => {\n    const { position } = attacker.getComponent(Position)\n    const { position: otherPosition } = target.getComponent(Position)\n    const { projectileSpeed, projectileLifetime } = attacker.getComponent(Attack)\n    const maxDistance = (projectileSpeed * projectileLifetime) / 1000\n    const distance = otherPosition.subtract(position).magnitude()\n\n    return distance <= maxDistance\n  }\n\n  private isObstructed = (attacker: Entity, target: Entity, teammates: Entity[]) => {\n    const others = R.without([attacker], teammates)\n    return R.any(this.inTheWayOfTarget(attacker)(target), others)\n  }\n\n  private inTheWayOfTarget = R.curry((attacker: Entity, target: Entity, other: Entity) => {\n    const { position: p1 } = attacker.getComponent(Position)\n    const { position: p2 } = target.getComponent(Position)\n    const { position: p3 } = other.getComponent(Position)\n    const { radius } = other.getComponent(Circle)\n\n    const vecToTarget = p2.subtract(p1)\n    const vecToOther = p3.subtract(p2) // will be the hypotenuse in our triangle\n    const angle = vecToTarget.angleTo(vecToOther)\n\n    if (vecToTarget.magnitude() < vecToOther.magnitude()) return false // other is behind our target\n    if (angle > Math.PI / 2) return false // if the angle is greater than 90º, it's not in our way\n\n    const distance = Math.sin(angle) * vecToOther.magnitude() // the closest the target gets to vecToTarget\n    return distance < radius\n  })\n\n  private attackTarget = (time: number, attacker: Entity, target: Entity) => {\n    const attack = attacker.getMutableComponent(Attack)\n    attack.lastAttack = time\n\n    const { radius } = attacker.getComponent(Circle)\n    const { position } = attacker.getComponent(Position)\n    const { position: targetPosition } = target.getComponent(Position)\n\n    const direction = targetPosition.subtract(position).unitMut().multiplyScalarMut(attack.projectileSpeed)\n    const spawnPosition = direction.unit().multiplyScalarMut(radius + 3).addMut(position)\n\n    this.world.createEntity()\n      .addComponent(Circle, { color: attack.projectileColor, radius: 2 })\n      .addComponent(DoesDamage, { damage: attack.projectileDamage })\n      .addComponent(DestroyedOnImpact)\n      .addComponent(Moveable, { maxSpeed: attack.projectileSpeed, direction })\n      .addComponent(Position, { position: spawnPosition })\n      .addComponent(Lifespan, { createdAt: time, ttl: attack.projectileLifetime })\n  }\n\n  private getTeammates = (entity: Entity) => {\n    const { name } = entity.getComponent(Team)\n    const others = R.without([entity], this.queries.attackers.results)\n\n    return others.filter(entity => name === entity.getComponent(Team).name)\n  }\n}\n\nAttacker.queries = {\n  attackers: { components: [Attack, Circle, Position, Team] },\n  targets: { components: [Position, Team, Circle] },\n}\n\nexport default Attacker","import { System, Entity } from \"ecsy\"\nimport * as R from 'ramda'\n\nimport Moveable from \"../components/Moveable\"\nimport Position from \"../components/Position\"\nimport Team from \"../components/Team\"\nimport Vector2 from \"../types/Vector2\"\nimport Destination from \"../components/Destination\"\nimport DebugVector from \"../components/DebugVector\"\n\nclass Boidser extends System {\n  execute(_delta: number, _time: number): void {\n    this.queries.entities.results.forEach(this.executeEntity)\n  }\n\n  executeEntity = (entity: Entity) => {\n    const { position } = entity.getComponent(Position)\n    const { direction, maxSpeed } = entity.getMutableComponent(Moveable)\n    const teammates = this.getTeammates(entity)\n\n    const destinationForce = this.calcDestinationForce(entity)\n    const separationForce = this.calcSeparationForce(50, entity, teammates)\n    const cohesionForce = this.calcCohesionForce(entity, teammates)\n    const alignmentForce = this.calcAlignmentForce(entity, teammates)\n\n    direction.set(0, 0)\n             .addMut(destinationForce)\n             .addMut(separationForce)\n             .addMut(cohesionForce.divideScalarMut(1000))\n             .addMut(alignmentForce.multiplyScalarMut(10))\n             .limitMut(maxSpeed)\n\n    this.world.createEntity()\n              .addComponent(DebugVector, { color: 'rgba(255, 0, 0, 0.5)', position, direction })\n\n    if (Number.isNaN(direction.x) || Number.isNaN(direction.y)) {\n      throw new Error('divided.x was NaN');\n    }\n  }\n\n  private calcAlignmentForce = (entity: Entity, entities: Entity[]) => {\n    const force = new Vector2(0, 0)\n    const { position } = entity.getComponent(Position)\n\n    entities.forEach(e => {\n      const { position: p } = e.getComponent(Position)\n      const { direction: d } = e.getComponent(Moveable)\n      const distance = position.subtract(p).magnitude()\n      const f = d.divideScalar(distance)\n      force.addMut(f)\n    })\n\n    if (R.isEmpty(entities)) return force\n    return force.divideScalarMut(entities.length)\n  }\n\n  private calcAveragePosition = (entities: Entity[]) => {\n    const positions = entities.map(e => e.getComponent(Position).position)\n    const sumPositions = new Vector2(0, 0)\n    positions.forEach(sumPositions.addMut)\n\n    if (R.isEmpty(positions)) return sumPositions\n    return sumPositions.divideScalarMut(positions.length)\n  }\n\n  private calcCohesionForce = (entity: Entity, teammates: Entity[]) => {\n    const { position } = entity.getComponent(Position)\n    const averagePosition = this.calcAveragePosition(teammates)\n\n    return averagePosition.subtractMut(position)\n  }\n\n  private calcDestinationForce = (entity: Entity) => {\n    if (!entity.hasComponent(Destination)) return new Vector2(0, 0)\n\n    const { position: destination } =  entity.getComponent(Destination)\n    const { position } =  entity.getComponent(Position)\n    return destination.subtract(position)\n  }\n\n  private calcSeparationForce = (multiplier: number, entity: Entity, teammates: Entity[]) => {\n    const vector = new Vector2(0, 0)\n    const forces = R.map(this.calcSingleSeparationForce(multiplier)(entity), teammates)\n\n    const { position } = entity.getComponent(Position)\n    forces.forEach(force => {\n      this.world.createEntity().addComponent(DebugVector, { color: 'rgba(0, 255, 0, 0.05)', position, direction: force})\n    })\n\n\n    forces.forEach(vector.addMut)\n\n    if (R.isEmpty(forces)) return vector;\n\n    return vector.divideScalar(forces.length)\n  }\n\n  private calcSingleSeparationForce = R.curry((multiplier: number, entity: Entity, other: Entity) => {\n    const { position } = entity.getComponent(Position)\n    const { position: otherPosition } = other.getComponent(Position)\n    const { minSeparation, separation } = entity.getComponent(Moveable)\n\n    const vector = position.subtract(otherPosition)\n    const allowedDistance = otherPosition.subtract(position)\n                                         .limitMut(minSeparation)\n                                         .addMut(position)\n                                         .subtractMut(otherPosition)\n                                         .magnitude()\n    const distance = vector.magnitude()\n\n    if (separation < allowedDistance) return vector.multiplyScalarMut(0)\n    if (allowedDistance === 0 || distance < minSeparation) {\n      return vector.multiplyScalarMut(Math.pow(10, 10))\n    }\n\n    return vector.divideScalarMut(allowedDistance)\n                 .multiplyScalarMut(multiplier)\n  })\n\n  private getTeammates = (entity: Entity) => {\n    const { name } = entity.getComponent(Team)\n    const others = R.without([entity], this.queries.entities.results)\n\n    return others.filter(entity => name === entity.getComponent(Team).name)\n  }\n}\n\nBoidser.queries = {\n  entities: {\n    components: [Moveable, Position, Team]\n  }\n}\n\nexport default Boidser","import { Component, Types } from \"ecsy\";\n\nclass Camera extends Component<Camera> {\n  panSpeed: number = 0;\n}\n\nCamera.schema = {\n  panSpeed: { type: Types.Number },\n}\n\nexport default Camera","import { System } from \"ecsy\";\n\nimport Camera from \"../components/Camera\";\nimport Destination from \"../components/Destination\";\nimport Moveable from \"../components/Moveable\";\nimport Position from \"../components/Position\";\nimport Selectable from \"../components/Selectable\";\n\nclass DestinationSetter extends System {\n  execute(_delta: number, _time: number): void {}\n\n  onMouseDown = (e: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => {\n    if (e.button !== 2) return;\n\n    const { clientX, clientY } = e\n\n    this.selected().forEach(entity => {\n      if (!entity.hasComponent(Destination)) {\n        entity.addComponent(Destination)\n      }\n      entity.getMutableComponent(Destination).position.set(clientX, clientY).subtractMut(this.cameraOffset())\n    });\n  }\n\n  private selected = () => {\n    return this.queries.selectables.results.filter(entity => {\n      return entity.getComponent(Selectable).selected\n    })\n  }\n\n  private cameraOffset = () => {\n    const camera = this.queries.cameras.results[0]\n    return camera.getComponent(Position).position\n  }\n}\n\nDestinationSetter.queries = {\n  cameras: { components: [Camera, Position] },\n  selectables: { components: [ Moveable, Selectable ] },\n}\n\nexport default DestinationSetter","import { System } from 'ecsy'\nimport Health from '../components/Health'\n\nclass EnforceHealth extends System {\n  execute(_delta: number, _time: number): void {\n    this.queries.withHealth.results.forEach(entity => {\n      const { health } = entity.getComponent(Health)\n\n      if (health <= 0) {\n        entity.remove()\n      }\n    })\n  }\n}\n\nEnforceHealth.queries = {\n  withHealth: { components: [Health] }\n}\n\nexport default EnforceHealth","import { System } from 'ecsy'\nimport Lifespan from '../components/Lifespan'\n\nclass EnforceLifespan extends System {\n  execute(delta: number, time: number): void {\n    this.queries.withLifepan.results.forEach(entity => {\n      const { ttl, createdAt } = entity.getComponent(Lifespan)\n\n      if (createdAt + ttl < time) {\n        entity.remove()\n      }\n    })\n  }\n}\n\nEnforceLifespan.queries = {\n  withLifepan: { components: [Lifespan] }\n}\n\nexport default EnforceLifespan","import { System } from \"ecsy\";\n\nimport Position from \"../components/Position\";\nimport Moveable from \"../components/Moveable\";\n\nclass Mover extends System {\n  execute(delta: number, _time: number): void {\n    this.queries.moveables.results.forEach(entity => {\n      const { position } = entity.getMutableComponent(Position)\n      const { direction } = entity.getComponent(Moveable)\n\n      const mX = direction.x * (delta / 1000)\n      const mY = direction.y * (delta / 1000)\n\n      position.x += mX\n      position.y += mY\n    })\n  }\n}\n\nMover.queries = {\n  moveables: { components: [ Moveable, Position ] },\n}\n\nexport default Mover","interface Position {\n  x: number;\n  y: number;\n}\n\nconst distanceBetween = (a: Position, b: Position) => {\n  const dX = a.x - b.x\n  const dY = a.y - b.y\n  return Math.sqrt( (dX*dX) + (dY*dY) )\n}\n\nexport default distanceBetween\n\n\n","import distanceBetween from \"./distanceBetween\"\n\ninterface Position {\n  x: number;\n  y: number;\n}\n\nconst positionsAreClose = (a: Position, b: Position, threshold: number) =>\n  distanceBetween(a, b) <= threshold\n\nexport default positionsAreClose","import { System } from \"ecsy\";\nimport Selectable from \"../components/Selectable\";\nimport Vector2 from \"../types/Vector2\";\nimport RectangleSelection from \"../components/RectangleSelection\";\nimport positionsAreClose from \"../utils/positionsAreClose\";\nimport Position from \"../components/Position\";\nimport Camera from \"../components/Camera\";\n\nclass RectangleSelector extends System {\n  execute(_delta: number, _time: number): void { }\n\n  onMouseDown = (e: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => {\n    if (e.button !== 0) return;\n    if (this.queries.rectangleSelections.results.length > 0) return;\n\n    const startPosition = new Vector2(e.clientX, e.clientY).subtractMut(this.cameraOffset())\n    const endPosition = new Vector2(e.clientX, e.clientY).subtractMut(this.cameraOffset())\n\n    this.world.createEntity()\n      .addComponent(RectangleSelection, { startPosition, endPosition })\n  }\n\n  onMouseMove = (e: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => {\n    const { clientX, clientY } = e\n\n    this.queries.rectangleSelections.results.forEach(entity => {\n      const { endPosition } = entity.getComponent(RectangleSelection)\n\n      if (clientX === endPosition.x || clientY === endPosition.y) {\n        return;\n      }\n\n      entity.getMutableComponent(RectangleSelection).endPosition.set(clientX, clientY).subtractMut(this.cameraOffset())\n    })\n  }\n\n  onMouseUp = (e: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => {\n    if (e.button !== 0) return;\n\n    this.queries.rectangleSelections.results.forEach(entity => {\n      const { startPosition, endPosition } = entity.getComponent(RectangleSelection)\n      entity.remove();\n      if (positionsAreClose(startPosition, endPosition, 5)) return;\n\n      this.queries.selectables.results.forEach(selectableEntity => {\n        const selectable = selectableEntity.getMutableComponent(Selectable)\n        const { position } = selectableEntity.getComponent(Position);\n        const { x, y } = position\n\n        const withinX = (startPosition.x < x && x < endPosition.x)\n                    || (endPosition.x < x && x < startPosition.x)\n\n        const withinY = (startPosition.y < y && y < endPosition.y)\n                    || (endPosition.y < y && y < startPosition.y)\n\n        selectable.selected = (withinX && withinY)\n      })\n    })\n  }\n\n  private cameraOffset = () => {\n    const camera = this.queries.cameras.results[0]\n    return camera.getComponent(Position).position\n  }\n}\n\nRectangleSelector.queries = {\n  cameras: { components: [Camera, Position] },\n  selectables: { components: [Position, Selectable] },\n  rectangleSelections: { components: [RectangleSelection] },\n}\n\nexport default RectangleSelector","import { Component, Types } from \"ecsy\";\n\nclass VectorDebugState extends Component<VectorDebugState>{\n  enabled: boolean = false;\n}\n\nVectorDebugState.schema = {\n  enabled: { type: Types.Boolean }\n}\n\nexport default VectorDebugState","import { System, World, Entity } from \"ecsy\";\nimport Circle from \"../components/Circle\";\nimport Selectable from \"../components/Selectable\";\nimport RectangleSelection from \"../components/RectangleSelection\";\nimport positionsAreClose from \"../utils/positionsAreClose\";\nimport Position from \"../components/Position\";\nimport Health from \"../components/Health\";\nimport DebugVector from \"../components/DebugVector\";\nimport Vector2 from \"../types/Vector2\";\nimport Camera from \"../components/Camera\";\nimport VectorDebugState from \"../components/VectorDebugState\";\n\ninterface Colors {\n  background: string;\n  selection: string;\n}\n\ninterface Attributes {\n  priority?: number;\n  canvas: HTMLCanvasElement;\n  colors: Colors\n}\n\nclass Renderer extends System {\n  private canvas: HTMLCanvasElement;\n  private colors: Colors;\n  private ctx: CanvasRenderingContext2D | null;\n\n  constructor(world: World, { canvas, colors, priority }: Attributes) {\n    super(world, { priority })\n    this.canvas = canvas\n    this.colors = colors\n    this.ctx = this.canvas.getContext('2d')\n  }\n\n  execute(_delta: number, _time: number): void {\n    this.clear()\n    this.renderCircles()\n    this.renderHealths()\n    this.renderRectangleSelections()\n    this.renderDebugVectors()\n  }\n\n  renderCircles = () => this.queries.circles.results.forEach(this.renderCircle)\n  renderHealths = () => this.queries.healths.results.forEach(this.renderHealth)\n  renderRectangleSelections = () => this.queries.rectangleSelections.results.forEach(this.renderRectangleSelection)\n\n  renderDebugVectors() {\n    if (this.vectorDebugEnabled()) {\n      this.queries.debugVectors.results.forEach(this.renderDebugVector)\n    };\n\n    this.queries.debugVectors.results.forEach(e => e.remove());\n  }\n\n  private cameraOffset = () => {\n    const camera = this.queries.cameras.results[0]\n    return camera.getComponent(Position).position\n  }\n\n  private clear = () => {\n    if (!this.ctx) return;\n\n    this.ctx.fillStyle = this.colors.background\n    this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n  }\n\n  private renderCircle = (entity: Entity) => {\n    if (!this.ctx) return\n\n    const ctx = this.ctx\n    const { color, radius } = entity.getComponent(Circle)\n    const { position } = entity.getComponent(Position)\n    const selected = entity.getComponent(Selectable)?.selected ?? false\n    const { x, y } = position.add(this.cameraOffset())\n\n    ctx.fillStyle = color\n    ctx.beginPath()\n    ctx.arc(x, y, radius, 0, 2 * Math.PI, false)\n    ctx.fill()\n    ctx.lineWidth = 2\n    ctx.strokeStyle = '#222'\n    ctx.stroke()\n\n    if (selected) {\n      ctx.beginPath()\n      ctx.arc(x, y, radius + 2, 0, 2 * Math.PI, false)\n      ctx.lineWidth = 2\n      ctx.strokeStyle = this.colors.selection\n      ctx.stroke()\n    }\n  }\n\n  private renderDebugVector = (entity: Entity) => this.renderVector(entity.getComponent(DebugVector))\n\n  private renderHealth = (entity: Entity) => {\n    const ctx = this.ctx;\n    if (!ctx) return;\n\n    const position = entity.getComponent(Position).position.add(this.cameraOffset());\n    const { health, maxHealth } = entity.getComponent(Health);\n\n    const x = position.x - 10\n    const y = position.y + 15\n    const w = 20\n    const h = 4\n\n    const wHealth = w * health / maxHealth\n\n    ctx.lineWidth = 2\n    ctx.strokeStyle = '#222'\n    ctx.strokeRect(x, y, w, h)\n\n    ctx.lineWidth = 0\n    ctx.fillStyle = this.colors.selection;\n    ctx.fillRect(x, y, wHealth, h)\n  }\n\n  private renderRectangleSelection = (entity: Entity) => {\n    if (!this.ctx) return;\n\n    const ctx = this.ctx\n    const rectangleSelection = entity.getComponent(RectangleSelection)\n    const startPosition = rectangleSelection.startPosition.add(this.cameraOffset())\n    const endPosition = rectangleSelection.endPosition.add(this.cameraOffset())\n\n    if (positionsAreClose(startPosition, endPosition, 5)) return;\n\n    const { x, y } = startPosition\n    const w = endPosition.x - x\n    const h = endPosition.y - y\n\n    ctx.lineWidth = 2\n    ctx.strokeStyle = this.colors.selection;\n    ctx.strokeRect(x, y, w, h)\n  }\n\n\n  private renderVector = ({ position, direction, color }: { position: Vector2, direction: Vector2, color: string }) => {\n    if (!this.ctx) return;\n\n    const offsetPosition = position.add(this.cameraOffset())\n    const { x, y } = offsetPosition.add(direction)\n\n    const ctx = this.ctx\n    ctx.lineWidth = 2\n    ctx.strokeStyle = color\n    ctx.beginPath()\n    ctx.moveTo(offsetPosition.x, offsetPosition.y)\n    ctx.lineTo(x, y)\n    ctx.stroke()\n  }\n\n  private vectorDebugEnabled = () => this.queries.vectorDebugStates.results[0]?.getComponent(VectorDebugState).enabled\n}\n\nRenderer.queries = {\n  cameras: { components: [Camera, Position] },\n  circles: { components: [Circle, Position] },\n  debugVectors: { components: [DebugVector] },\n  healths: { components: [Health, Position] },\n  rectangleSelections: { components: [RectangleSelection] },\n  vectorDebugStates: { components: [VectorDebugState] },\n}\n\nexport default Renderer","import { System } from \"ecsy\";\nimport Circle from \"../components/Circle\";\nimport Selectable from \"../components/Selectable\";\nimport positionsAreClose from \"../utils/positionsAreClose\";\nimport Position from \"../components/Position\";\nimport Vector2 from \"../types/Vector2\";\nimport Camera from \"../components/Camera\";\n\nclass Selector extends System {\n  execute(_delta: number, _time: number): void {}\n\n  onMouseDown = (e: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => {\n    if (e.button !== 0) return;\n\n    const clickPosition = new Vector2(e.clientX, e.clientY).subtractMut(this.cameraOffset())\n    this.selectCircles(clickPosition)\n  };\n\n  selectCircles = (clickPosition: Vector2) => {\n    this.deselectAllCircles()\n\n    this.queries.circles.results.forEach(entity => {\n      const { radius } = entity.getComponent(Circle)\n      const { position } = entity.getComponent(Position)\n\n      if (positionsAreClose(clickPosition, position, radius)) {\n        entity.getMutableComponent(Selectable).selected = true\n      }\n    })\n  }\n\n  private deselectAllCircles = () => {\n    this.queries.circles.results.forEach(entity => {\n      if (!entity.getComponent(Selectable).selected) return\n\n      entity.getMutableComponent(Selectable).selected = false\n    })\n  }\n\n  private cameraOffset = () => {\n    const camera = this.queries.cameras.results[0]\n    return camera.getComponent(Position).position\n  }\n}\n\nSelector.queries = {\n  cameras: { components: [Camera, Position] },\n  circles: { components: [Circle, Position, Selectable] }\n}\n\nexport default Selector","import { System, Entity } from \"ecsy\";\nimport * as R from 'ramda'\n\nimport Circle from \"../components/Circle\";\nimport Moveable from \"../components/Moveable\";\n\nimport positionsAreClose from \"../utils/positionsAreClose\";\nimport DestroyedOnImpact from \"../components/DestroyedOnImpact\";\nimport Destination from \"../components/Destination\";\nimport Collidable from \"../components/Collidable\";\nimport DoesDamage from \"../components/DoesDamage\";\nimport Health from \"../components/Health\";\nimport Position from \"../components/Position\";\n\nconst isCloseTo = R.curry((e1: Entity, e2: Entity) => {\n  if (e1 === e2) return false;\n\n  const c1 = e1.getComponent(Circle)\n  const p1 = e1.getComponent(Position)\n  const c2 = e2.getComponent(Circle)\n  const p2 = e2.getComponent(Position)\n  const threshold = c1.radius + c2.radius\n\n  return positionsAreClose(p1.position, p2.position, threshold)\n})\n\nclass Stopper extends System {\n  execute(_delta: number, _time: number): void {\n    this.queries.moveables.results.forEach(this.stopIfColliding)\n    this.queries.withDestination.results.forEach(this.stopIfAtDestination)\n  }\n\n  private stopIfAtDestination = (entity: Entity) => {\n    const { position } = entity.getComponent(Position)\n    const { position: destination } = entity.getComponent(Destination)\n\n    if (positionsAreClose(position, destination, 1)) {\n      entity.getMutableComponent(Moveable).direction.set(0, 0)\n      entity.removeComponent(Destination)\n    }\n  }\n\n  private stopIfColliding = (entity: Entity) => {\n    const other = R.find(isCloseTo(entity), this.queries.collideables.results)\n\n    if (R.isNil(other)) return\n\n    entity.getMutableComponent(Moveable).direction.set(0, 0)\n\n    if (entity.hasComponent(DoesDamage) && other.hasComponent(Health)) {\n      const { damage } = entity.getComponent(DoesDamage)\n      other.getMutableComponent(Health).health -= damage\n    }\n\n    if (entity.hasComponent(DestroyedOnImpact)) {\n      entity.remove()\n    }\n  }\n}\n\nStopper.queries = {\n  collideables: { components: [ Circle, Collidable, Position ]},\n  moveables: { components: [ Circle, Moveable, Position ] },\n  withDestination: { components: [ Destination, Moveable, Position ] },\n}\n\nexport default Stopper","import { System } from 'ecsy'\nimport VectorDebugState from '../components/VectorDebugState'\n\nclass VectorDebugger extends System {\n  execute(delta: number, time: number): void {}\n\n  onKeyDown = (e: KeyboardEvent) => {\n    if (e.key !== 'v') return;\n\n    const state = this.queries.vectorDebugStates.results[0].getMutableComponent(VectorDebugState)\n\n    state.enabled = !state.enabled\n  }\n\n}\n\nVectorDebugger.queries = {\n  vectorDebugStates: { components: [VectorDebugState] },\n}\n\nexport default VectorDebugger","import { System } from \"ecsy\"\nimport Camera from \"../components/Camera\"\nimport Position from \"../components/Position\"\nimport Vector2 from \"../types/Vector2\"\n\nclass CameraPanner extends System {\n  private panning = {\n    up: false,\n    right: false,\n    down: false,\n    left: false,\n  }\n\n  execute(delta: number, _time: number): void {\n    const camera = this.queries.cameras.results[0]\n    const { panSpeed } = camera.getMutableComponent(Camera)\n    const { position } = camera.getMutableComponent(Position)\n\n    const direction = new Vector2(\n      (this.panning.left ? 1 : 0) + (this.panning.right ? -1 : 0),\n      (this.panning.up ? 1 : 0) + (this.panning.down ? -1 : 0)\n    ).multiplyScalarMut(panSpeed * delta / 1000)\n\n    position.addMut(direction)\n  }\n\n  onKeyDown = (e: KeyboardEvent) => {\n    if (e.key === 'w') this.panning.up = true\n    if (e.key === 'd') this.panning.right = true\n    if (e.key === 's') this.panning.down = true\n    if (e.key === 'a') this.panning.left = true\n  }\n\n  onKeyUp = (e: KeyboardEvent) => {\n    if (e.key === 'w') this.panning.up = false\n    if (e.key === 'd') this.panning.right = false\n    if (e.key === 's') this.panning.down = false\n    if (e.key === 'a') this.panning.left = false\n  }\n}\n\nCameraPanner.queries = {\n  cameras: { components: [Camera, Position] }\n}\n\nexport default CameraPanner","import { World } from 'ecsy';\nimport Attack from './components/Attack';\nimport Circle from './components/Circle';\nimport Collidable from './components/Collidable';\nimport Debug from './components/Debug';\nimport DebugVector from './components/DebugVector';\nimport Destination from './components/Destination';\nimport DestroyedOnImpact from './components/DestroyedOnImpact';\nimport DoesDamage from './components/DoesDamage';\nimport Health from './components/Health';\nimport Lifespan from './components/Lifespan';\nimport Moveable from './components/Moveable';\nimport Position from './components/Position';\nimport RectangleSelection from './components/RectangleSelection';\nimport Selectable from './components/Selectable';\nimport Team from './components/Team';\nimport Attacker from './systems/Attacker';\nimport Boidser from './systems/Boidser';\nimport DestinationSetter from './systems/DestinationSetter';\nimport EnforceHealth from './systems/EnforceHealth';\nimport EnforceLifespan from './systems/EnforceLifespan';\nimport Mover from './systems/Mover';\nimport RectangleSelector from './systems/RectangleSelector';\nimport Renderer from './systems/Renderer';\nimport Selector from './systems/Selector';\nimport Stopper from './systems/Stopper';\nimport Vector2 from './types/Vector2';\nimport Camera from './components/Camera';\nimport VectorDebugger from './systems/VectorDebugger';\nimport VectorDebugState from './components/VectorDebugState';\nimport CameraPanner from './systems/CameraPanner';\n\n\n\n\nconst colors = {\n  friendly: '#59cd90',\n  enemy: '#c73e1d',\n  projectile: '#ffe74c',\n  background: '#545e75',\n  selection: '#57b8ff',\n}\n\nclass Game {\n  private world: World\n  private lastTime: number\n  private animationFrameRequest: number | null\n\n  constructor({ canvas }: { canvas: HTMLCanvasElement }) {\n    this.lastTime = performance.now()\n    this.animationFrameRequest = null\n    this.world = new World()\n      .registerSystem(Attacker)\n      .registerSystem(Boidser)\n      .registerSystem(CameraPanner)\n      .registerSystem(DestinationSetter)\n      .registerSystem(EnforceLifespan)\n      .registerSystem(EnforceHealth)\n      .registerSystem(Mover)\n      .registerSystem(RectangleSelector)\n      .registerSystem(Renderer, { canvas, colors })\n      .registerSystem(Selector)\n      .registerSystem(Stopper)\n      .registerSystem(VectorDebugger)\n      .registerComponent(Attack)\n      .registerComponent(Camera)\n      .registerComponent(Circle)\n      .registerComponent(Collidable)\n      .registerComponent(Debug)\n      .registerComponent(DebugVector)\n      .registerComponent(Destination)\n      .registerComponent(DestroyedOnImpact)\n      .registerComponent(DoesDamage)\n      .registerComponent(Health)\n      .registerComponent(Lifespan)\n      .registerComponent(Moveable)\n      .registerComponent(Position)\n      .registerComponent(RectangleSelection)\n      .registerComponent(Selectable)\n      .registerComponent(Team)\n      .registerComponent(VectorDebugState)\n  }\n\n  start = () => {\n    this.createCamera()\n    this.createVectorDebugState()\n    for (let i = 0; i < 10; i++) {\n      this.createFriendly(50 + 50 * i, 500)\n      this.createEnemy(50 + 50 * i, 100)\n    }\n    this.run();\n  }\n\n  stop = () => {\n    if (!this.animationFrameRequest) return\n\n    cancelAnimationFrame(this.animationFrameRequest)\n  }\n\n  onKeyDown = (e: KeyboardEvent) => {\n    this.vectorDebugger().onKeyDown(e)\n    this.cameraPanner().onKeyDown(e)\n  }\n\n  onKeyUp = (e: KeyboardEvent) => {\n    this.cameraPanner().onKeyUp(e)\n  }\n\n  onMouseDown = (e: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => {\n    this.destinationSetter().onMouseDown(e)\n    this.selector().onMouseDown(e)\n    this.rectangleSelector().onMouseDown(e)\n  }\n\n  onMouseMove = (e: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => this.rectangleSelector().onMouseMove(e)\n  onMouseUp = (e: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => this.rectangleSelector().onMouseUp(e)\n\n\n  private createCamera = () => {\n    this.world.createEntity()\n              .addComponent(Camera, { panSpeed: 500 })\n              .addComponent(Position, { position: new Vector2(0, 0) })\n  }\n\n  private createEnemy = (x: number, y: number) => {\n    const teamName = \"Enemy\"\n    const radius = 10;\n    const color = colors.enemy\n    const position = new Vector2(x, y)\n    const health = 100;\n\n    const projectileColor = colors.projectile\n    const projectileSpeed = 200;\n    const projectileLifetime = 1800;\n    const projectileDamage = 10;\n    const minimumRefactoryPeriod = 500;\n\n    this.world.createEntity()\n      .addComponent(Attack, { projectileColor, projectileSpeed, projectileLifetime, projectileDamage, minimumRefactoryPeriod })\n      .addComponent(Circle, { radius, color })\n      .addComponent(Collidable)\n      .addComponent(Health, { health, maxHealth: health })\n      .addComponent(Position, { position })\n      .addComponent(Team, { name: teamName })\n  }\n\n  private createFriendly = (x: number, y: number) => {\n    const teamName = \"Friendly\"\n    const color = colors.friendly\n    const radius = 10;\n    const maxSpeed = 100;\n    const health = 100;\n    const direction = new Vector2()\n    const position = new Vector2(x, y)\n\n    const minSeparation = 2 * radius\n    const separation = 3 * radius;\n\n    const projectileColor = colors.projectile\n    const projectileSpeed = 200;\n    const projectileLifetime = 1800;\n    const projectileDamage = 10;\n    const minimumRefactoryPeriod = 500;\n\n    this.world.createEntity()\n      .addComponent(Attack, { projectileColor, projectileSpeed, projectileLifetime, projectileDamage, minimumRefactoryPeriod })\n      .addComponent(Circle, { radius, color })\n      .addComponent(Collidable)\n      .addComponent(Health, { health, maxHealth: health })\n      .addComponent(Moveable, { direction, maxSpeed, separation, minSeparation })\n      .addComponent(Position, { position })\n      .addComponent(Selectable)\n      .addComponent(Team, { name: teamName })\n  }\n\n  private createVectorDebugState = () => {\n    this.world.createEntity().addComponent(VectorDebugState)\n  }\n\n  private run = () => {\n    // Compute delta and elapsed time\n    const time = performance.now()\n    const delta = time - this.lastTime\n\n    // Run all the systems\n    this.world.execute(delta, time)\n\n    this.lastTime = time\n    this.animationFrameRequest = requestAnimationFrame(this.run)\n  }\n\n  private cameraPanner = () => this.world.getSystem(CameraPanner) as CameraPanner\n  private destinationSetter = () => this.world.getSystem(DestinationSetter) as DestinationSetter\n  private rectangleSelector = () => this.world.getSystem(RectangleSelector) as RectangleSelector\n  private renderer = () => this.world.getSystem(Renderer) as Renderer\n  private selector = () => this.world.getSystem(Selector) as Selector\n  private vectorDebugger = () => this.world.getSystem(VectorDebugger) as VectorDebugger\n}\n\nexport default Game\n","import React, { MouseEventHandler } from 'react';\nimport { useKey } from 'react-use'\n\nimport Game from './ecs/Game'\nimport './App.css';\n\nconst App = () => {\n  const [canvas, setCanvas] = React.useState<HTMLCanvasElement | null>(null);\n  const gameRef = React.useRef<Game | null>(null)\n\n  React.useEffect(() => {\n    if (!canvas) return;\n\n    gameRef.current = new Game({canvas})\n    gameRef.current.start()\n\n    return () => {\n      gameRef.current?.stop()\n      gameRef.current = null\n    }\n  }, [canvas])\n\n  React.useEffect(() => {\n    const handleResize = () => {\n      if (!canvas) return\n\n      canvas.width = window.innerWidth\n      canvas.height = window.innerHeight\n    }\n\n    handleResize()\n    window.addEventListener('resize', handleResize)\n    return () => window.removeEventListener('resize', handleResize)\n  }, [canvas])\n\n  const onMouseDown: MouseEventHandler<HTMLCanvasElement> = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    gameRef.current?.onMouseDown(e)\n  }\n\n  const onMouseMove: MouseEventHandler<HTMLCanvasElement> = (e) => gameRef.current?.onMouseMove(e)\n  const onMouseUp: MouseEventHandler<HTMLCanvasElement> = (e) => gameRef.current?.onMouseUp(e)\n\n  useKey(\n    () => true,\n    (e) => gameRef.current?.onKeyDown(e),\n    {event: 'keydown'}\n  )\n\n  useKey(\n    () => true,\n    (e) => gameRef.current?.onKeyUp(e),\n    {event: 'keyup'}\n  )\n\n  return (\n    <div className=\"App\">\n      <canvas\n        ref={setCanvas}\n        onMouseDown={onMouseDown}\n        onMouseMove={onMouseMove}\n        onMouseUp={onMouseUp}\n        onContextMenu={e => e.preventDefault()} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}