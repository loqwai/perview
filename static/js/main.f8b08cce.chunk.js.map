{"version":3,"sources":["ecs/types/Vector2.ts","ecs/components/Attack.ts","ecs/components/Circle.ts","ecs/components/Collidable.ts","ecs/components/Destination.ts","ecs/components/DestroyedOnImpact.ts","ecs/components/Lifespan.ts","ecs/components/Moveable.ts","ecs/components/RectangleSelection.ts","ecs/components/Selectable.ts","ecs/components/Team.ts","ecs/components/DoesDamage.ts","ecs/components/Position.ts","ecs/components/DebugVector.ts","ecs/systems/Attacker.ts","ecs/utils/distanceBetween.ts","ecs/utils/positionsAreClose.ts","ecs/systems/RectangleSelector.ts","ecs/components/Health.ts","ecs/systems/Renderer.ts","ecs/systems/Selector.ts","ecs/systems/Stopper.ts","ecs/systems/EnforceLifespan.ts","ecs/systems/EnforceHealth.ts","ecs/systems/Boidser.ts","ecs/components/Debug.ts","ecs/systems/DestinationSetter.ts","ecs/systems/Mover.ts","ecs/Game.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Vector2","x","y","set","copy","source","clone","add","other","addMut","angleTo","x1","y1","numerator","denominator","magnitude","Math","acos","limit","n","limitMut","divideScalarMut","divideScalar","sqrt","multiplyScalar","multiplyScalarMut","toJSON","indent","JSON","stringify","subtract","subtractMut","unit","unitMut","this","Vector2Type","createType","name","default","copyCopyable","cloneClonable","Attack","projectileColor","projectileSpeed","projectileLifetime","projectileDamage","minimumRefactoryPeriod","lastAttack","Component","schema","type","Types","String","Number","Circle","color","radius","Collidable","TagComponent","Destination","position","DestroyedOnImpact","Lifespan","ttl","createdAt","Moveable","direction","maxSpeed","minSeparation","separation","RectangleSelection","startPosition","endPosition","Selectable","selected","Boolean","Team","DoesDamage","damage","Position","DebugVector","Attacker","closestUnObstructedTarget","attacker","getComponent","team","targets","queries","results","filter","entity","teammates","getTeammates","unObstructedTargets","target","inRange","isObstructed","R","otherPosition","maxDistance","others","inTheWayOfTarget","dv","world","createEntity","addComponent","p1","p2","p3","vecToTarget","vecToOther","angle","PI","sin","attackTarget","time","attack","getMutableComponent","spawnPosition","attackers","_delta","forEach","System","components","distanceBetween","a","b","dX","dY","positionsAreClose","threshold","RectangleSelector","onMouseDown","e","button","rectangleSelections","length","clientX","clientY","onMouseMove","onMouseUp","remove","selectables","selectableEntity","selectable","withinX","withinY","_time","Health","maxHealth","health","Renderer","canvas","colors","priority","ctx","debug","toggleDebug","clear","fillStyle","background","fillRect","width","height","drawCircle","beginPath","arc","fill","lineWidth","strokeStyle","stroke","selection","drawDebugVector","drawVector","drawHealth","wHealth","strokeRect","drawRectangleSelection","w","h","moveTo","lineTo","getContext","delta","circles","healths","debugVectors","Selector","clickPosition","selectCircles","deselectAllCircles","isCloseTo","e1","e2","c1","c2","Stopper","stopIfAtDestination","destination","removeComponent","stopIfColliding","collideables","hasComponent","moveables","withDestination","EnforceLifespan","withLifepan","EnforceHealth","withHealth","Boidser","executeEntity","destinationForce","calcDestinationForce","separationForce","calcSeparationForce","cohesionForce","calcCohesionForce","alignmentForce","calcAlignmentForce","isNaN","Error","entities","force","p","d","distance","f","calcAveragePosition","positions","map","sumPositions","multiplier","vector","forces","calcSingleSeparationForce","allowedDistance","pow","Debug","DestinationSetter","Mover","mX","mY","friendly","enemy","projectile","Game","lastTime","animationFrameRequest","start","i","createFriendly","createEnemy","run","stop","cancelAnimationFrame","getSystem","destionationSetter","selector","rectangleSelector","performance","now","execute","requestAnimationFrame","World","registerSystem","registerComponent","App","React","useState","setCanvas","gameRef","useRef","useEffect","current","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener","useKeyPressEvent","className","ref","preventDefault","stopPropagation","onContextMenu","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","unregister","navigator","serviceWorker","ready","then","registration","catch","error","console","message"],"mappings":"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","file":"static/js/main.f8b08cce.chunk.js","sourcesContent":["import { createType, copyCopyable, cloneClonable } from \"ecsy\";\n\nclass Vector2 {\n  x: number;\n  y: number;\n\n  constructor(x: number = 0, y: number = 0) {\n    this.x = x;\n    this.y = y;\n  }\n\n  set = (x: number, y: number) => {\n    this.x = x;\n    this.y = y;\n    return this;\n  }\n\n  copy = (source: Vector2) => {\n    this.x = source.x;\n    this.y = source.y;\n    return this;\n  }\n\n  clone = () => new Vector2().copy(this)\n\n  /**\n   * returns a new vector with the other vector's x & y\n   * components added to this one\n   * */\n  add = (other: Vector2): Vector2 => this.clone().addMut(other)\n\n  /**\n   * mutates the vector, adding the other vector's x & y\n   * components to this one\n   * */\n  addMut = (other: Vector2): Vector2 => {\n    this.x += other.x\n    this.y += other.y\n    return this\n  }\n\n\n  angleTo = (other: Vector2): number => {\n    const {x: x1, y: y1} = this\n    const {x: x2, y: y2} = other\n\n    const numerator = (x1 * x2) + (y1 * y2)\n    const denominator = this.magnitude() * other.magnitude()\n\n    return Math.acos(numerator / denominator)\n  }\n\n  /**\n   * If the magnitude of the vecor is greater than the limit, it will return\n   * a new vector scaled down so its magnitude is equal to the limit\n   */\n  limit = (n: number) => this.clone().limitMut(n)\n\n  /**\n   * If the magnitude of the vecor is greater than the limit, it will scale\n   * down to a vector with a magnitude equal to the limit\n   */\n  limitMut = (n: number) => {\n    const magnitude = this.magnitude()\n    if (n < magnitude) {\n      this.divideScalarMut(magnitude / n)\n    }\n    return this\n  }\n\n  /**\n   * Returns a new vector with both x & y divided by n\n   * */\n  divideScalar = (n: number) => this.clone().divideScalarMut(n)\n\n  /**\n   * Mutates the current vector, dividing both x & y by n.\n   * Returns itself for easy chaining\n   * */\n  divideScalarMut = (n: number): Vector2 => {\n    this.x /= n\n    this.y /= n\n    return this\n  }\n\n  magnitude = () => Math.sqrt((this.x * this.x) + (this.y * this.y))\n\n  /**\n   * Returns a new vector with both x & y multiplied by n\n   * */\n  multiplyScalar = (n: number) => this.clone().multiplyScalarMut(n)\n\n  /**\n   * Mutates the current vector, dividing both x & y by n.\n   * Returns itself for easy chaining\n   * */\n  multiplyScalarMut = (n: number): Vector2 => {\n    this.x *= n\n    this.y *= n\n    return this\n  }\n\n  toJSON = (indent?: number) => {\n    const { x, y } = this\n    return JSON.stringify({ x, y }, null, indent ?? 0)\n  }\n\n  /**\n   * returns a new vector with the other vector's x & y\n   * components subtracted from this one\n   * */\n  subtract = (other: Vector2): Vector2 => this.clone().subtractMut(other)\n\n  /**\n   * mutates the vector, subtracting the other vector's x & y\n   * components from this one\n   * */\n  subtractMut = (other: Vector2): Vector2 => {\n    this.x -= other.x\n    this.y -= other.y\n    return this\n  }\n\n  /**\n   * Returns a new unit vector of the current vector. If the magnitude of the\n   * current vector is 0, it will return the 0, 0 vector\n   * */\n  unit = () => this.clone().unitMut()\n\n  unitMut = () => {\n    const magnitude = this.magnitude()\n\n    return (magnitude === 0)\n      ? this.multiplyScalar(0)\n      : this.divideScalarMut(magnitude)\n  }\n}\n\nexport default Vector2\n\nexport const Vector2Type = createType({\n  name: \"Vector2\",\n  default: new Vector2(),\n  copy: copyCopyable,\n  clone: cloneClonable\n});","import { Component, Types } from \"ecsy\";\n\nclass Attack extends Component<Attack> {\n  projectileColor: string = '#000000';\n  projectileSpeed: number = 0;\n  projectileLifetime: number = 0;\n  projectileDamage: number = 0;\n  minimumRefactoryPeriod: number = 0; \n  lastAttack: number = 0;\n}\n\nAttack.schema = {\n  projectileColor: { type: Types.String },\n  projectileSpeed: { type: Types.Number },\n  projectileLifetime: { type: Types.Number },\n  projectileDamage: { type: Types.Number },\n  minimumRefactoryPeriod: { type: Types.Number },\n  lastAttack: { type: Types.Number },\n}\n\nexport default Attack","import { Component, Types } from \"ecsy\";\n\nclass Circle extends Component<Circle> {\n  color: string = '#000000';\n  radius: number = 0\n}\n\nCircle.schema = {\n  color: {type: Types.String},\n  radius: { type: Types.Number }, \n}\n\nexport default Circle","import { TagComponent } from \"ecsy\";\n\nclass Collidable extends TagComponent {}\n\nexport default Collidable","import { Component } from \"ecsy\";\nimport Vector2, { Vector2Type } from \"../types/Vector2\";\n\nclass Destination extends Component<Destination> {\n  position: Vector2 = new Vector2()\n}\n\nDestination.schema = {\n  position: { type: Vector2Type },\n}\n\nexport default Destination","import { TagComponent } from \"ecsy\";\n\nclass DestroyedOnImpact extends TagComponent {}\n\nexport default DestroyedOnImpact","import { Component, Types } from \"ecsy\";\n\nclass Lifespan extends Component<Lifespan> {\n  ttl: number = 0;\n  createdAt: number = 0;\n}\n\nLifespan.schema = {\n  ttl: { type: Types.Number },\n  createdAt: { type: Types.Number },\n}\n\nexport default Lifespan","import { Component, Types } from \"ecsy\";\nimport Vector2, { Vector2Type } from \"../types/Vector2\";\n\nclass Moveable extends Component<Moveable> {\n  direction: Vector2 = new Vector2()\n  maxSpeed: number = 0\n  minSeparation: number = 0\n  separation: number = 0\n}\n\nMoveable.schema = {\n  direction: { type: Vector2Type, },\n  maxSpeed: { type: Types.Number, },\n  minSeparation: { type: Types.Number, },\n  separation: { type: Types.Number, },\n}\n\nexport default Moveable","import { Component } from \"ecsy\";\nimport Vector2, { Vector2Type } from \"../types/Vector2\";\n\nclass RectangleSelection extends Component<RectangleSelection>{\n  startPosition: Vector2 = new Vector2()\n  endPosition: Vector2 = new Vector2()\n}\n\nRectangleSelection.schema = {\n  startPosition: { type: Vector2Type },\n  endPosition: { type: Vector2Type },\n}\n\nexport default RectangleSelection","import { Component, Types } from \"ecsy\";\n\nclass Selectable extends Component<Selectable> {\n  selected: boolean = false\n}\n\nSelectable.schema = {\n  selected: { type: Types.Boolean },\n}\n\nexport default Selectable","import { Component, Types } from \"ecsy\"\n\nclass Team extends Component<Team> {\n  name: string = \"unknown\";\n}\n\nTeam.schema = {\n  name: { type: Types.String },\n}\n\nexport default Team","import { Component, Types } from \"ecsy\";\n\nclass DoesDamage extends Component<DoesDamage> {\n  damage: number = 0;\n}\n\nDoesDamage.schema = {\n  damage: { type: Types.Number },\n}\n\nexport default DoesDamage","import { Component } from \"ecsy\";\nimport Vector2, { Vector2Type } from \"../types/Vector2\";\n\nclass Position extends Component<Position> {\n  position: Vector2 = new Vector2()\n}\n\nPosition.schema = {\n  position: { type: Vector2Type },\n}\n\nexport default Position","import { Component, Types } from \"ecsy\";\nimport Vector2, { Vector2Type } from \"../types/Vector2\";\n\nclass DebugVector extends Component<DebugVector> {\n  position: Vector2 = new Vector2();\n  direction: Vector2 = new Vector2();\n  color: string = '#ff00ff';\n}\n\nDebugVector.schema = {\n  position: { type: Vector2Type },\n  direction: { type: Vector2Type },\n  color: { type: Types.String },\n}\n\nexport default DebugVector","import { System, Entity } from \"ecsy\";\nimport * as R from 'ramda'\n\nimport Team from '../components/Team'\nimport Attack from \"../components/Attack\";\nimport Circle from \"../components/Circle\";\nimport Moveable from \"../components/Moveable\";\nimport DestroyedOnImpact from \"../components/DestroyedOnImpact\";\nimport Lifespan from \"../components/Lifespan\";\nimport DoesDamage from \"../components/DoesDamage\";\nimport Position from \"../components/Position\";\nimport DebugVector from \"../components/DebugVector\";\nimport Vector2 from \"../types/Vector2\";\n\nclass Attacker extends System {\n  execute(_delta: number, time: number): void {\n    this.queries.attackers.results.forEach(attacker => {\n      const attack = attacker.getComponent(Attack)\n\n      if (time < attack.lastAttack + attack.minimumRefactoryPeriod) {\n        return;\n      }\n\n      const target = this.closestUnObstructedTarget(attacker)\n\n      if (target) this.attackTarget(time, attacker, target);\n    })\n  }\n\n  private closestUnObstructedTarget = (attacker: Entity) => {\n    const { position } = attacker.getComponent(Position)\n    const team = attacker.getComponent(Team)\n\n    const targets = this.queries.targets.results.filter(entity => team.name !== entity.getComponent(Team).name)\n    const teammates = this.getTeammates(attacker)\n    const targetsInRange = targets.filter(target => this.inRange(attacker, target))\n    const unObstructedTargets = targetsInRange.filter(target => !this.isObstructed(attacker, target, teammates))\n\n    const sortedTargets = R.sortBy(target => {\n      const { position: targetPosition } = target.getComponent(Position)\n      const vector = targetPosition.subtract(position)\n      return vector.magnitude()\n    }, unObstructedTargets)\n\n    return sortedTargets[0]\n  }\n\n  private inRange = (attacker: Entity, target: Entity) => {\n    const { position } = attacker.getComponent(Position)\n    const { position: otherPosition } = target.getComponent(Position)\n    const { projectileSpeed, projectileLifetime } = attacker.getComponent(Attack)\n    const maxDistance = (projectileSpeed * projectileLifetime) / 1000\n    const distance = otherPosition.subtract(position).magnitude()\n\n    return distance <= maxDistance\n  }\n\n  private isObstructed = (attacker: Entity, target: Entity, teammates: Entity[]) => {\n    const others = R.without([attacker], teammates)\n    return R.any(this.inTheWayOfTarget(attacker)(target), others)\n  }\n\n  private dv = (position: Vector2, direction: Vector2, color: string) => {\n    this.world.createEntity().addComponent(DebugVector, {\n      color,\n      position,\n      direction,\n    })\n  }\n\n  private inTheWayOfTarget = R.curry((attacker: Entity, target: Entity, other: Entity) => {\n    const { position: p1 } = attacker.getComponent(Position)\n    const { position: p2 } = target.getComponent(Position)\n    const { position: p3 } = other.getComponent(Position)\n    const { radius } = other.getComponent(Circle)\n\n    const vecToTarget = p2.subtract(p1)\n    const vecToOther = p3.subtract(p2) // will be the hypotenuse in our triangle\n    const angle = vecToTarget.angleTo(vecToOther)\n\n    if (vecToTarget.magnitude() < vecToOther.magnitude()) return false // other is behind our target\n    if (angle > Math.PI / 2) return false // if the angle is greater than 90º, it's not in our way\n\n    const distance = Math.sin(angle) * vecToOther.magnitude() // the closest the target gets to vecToTarget\n    return distance < radius\n  })\n\n  private attackTarget = (time: number, attacker: Entity, target: Entity) => {\n    const attack = attacker.getMutableComponent(Attack)\n    attack.lastAttack = time\n\n    const { radius } = attacker.getComponent(Circle)\n    const { position } = attacker.getComponent(Position)\n    const { position: targetPosition } = target.getComponent(Position)\n\n    const direction = targetPosition.subtract(position).unitMut().multiplyScalarMut(attack.projectileSpeed)\n    const spawnPosition = direction.unit().multiplyScalarMut(radius + 3).addMut(position)\n\n    this.world.createEntity()\n      .addComponent(Circle, { color: attack.projectileColor, radius: 2 })\n      .addComponent(DoesDamage, { damage: attack.projectileDamage })\n      .addComponent(DestroyedOnImpact)\n      .addComponent(Moveable, { maxSpeed: attack.projectileSpeed, direction })\n      .addComponent(Position, { position: spawnPosition })\n      .addComponent(Lifespan, { createdAt: time, ttl: attack.projectileLifetime })\n  }\n\n  private getTeammates = (entity: Entity) => {\n    const { name } = entity.getComponent(Team)\n    const others = R.without([entity], this.queries.attackers.results)\n\n    return others.filter(entity => name === entity.getComponent(Team).name)\n  }\n}\n\nAttacker.queries = {\n  attackers: { components: [Attack, Circle, Position, Team] },\n  targets: { components: [Position, Team, Circle] },\n}\n\nexport default Attacker","interface Position {\n  x: number;\n  y: number;\n}\n\nconst distanceBetween = (a: Position, b: Position) => {\n  const dX = a.x - b.x\n  const dY = a.y - b.y\n  return Math.sqrt( (dX*dX) + (dY*dY) )\n}\n\nexport default distanceBetween\n\n\n","import distanceBetween from \"./distanceBetween\"\n\ninterface Position {\n  x: number;\n  y: number;\n}\n\nconst positionsAreClose = (a: Position, b: Position, threshold: number) =>\n  distanceBetween(a, b) <= threshold\n\nexport default positionsAreClose","import { System } from \"ecsy\";\nimport Selectable from \"../components/Selectable\";\nimport Vector2 from \"../types/Vector2\";\nimport RectangleSelection from \"../components/RectangleSelection\";\nimport positionsAreClose from \"../utils/positionsAreClose\";\nimport Position from \"../components/Position\";\n\nclass RectangleSelector extends System {\n  execute(_delta: number, _time: number): void { }\n\n  onMouseDown = (e: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => {\n    if (e.button !== 0) return;\n    if (this.queries.rectangleSelections.results.length > 0) return;\n\n    const startPosition = new Vector2(e.clientX, e.clientY)\n    const endPosition = new Vector2(e.clientX, e.clientY)\n\n    this.world.createEntity()\n      .addComponent(RectangleSelection, { startPosition, endPosition })\n  }\n\n  onMouseMove = (e: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => {\n    const { clientX, clientY } = e\n\n    this.queries.rectangleSelections.results.forEach(entity => {\n      const { endPosition } = entity.getComponent(RectangleSelection)\n\n      if (clientX === endPosition.x || clientY === endPosition.y) {\n        return;\n      }\n\n      entity.getMutableComponent(RectangleSelection).endPosition.set(clientX, clientY)\n    })\n  }\n\n  onMouseUp = (e: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => {\n    if (e.button !== 0) return;\n\n    this.queries.rectangleSelections.results.forEach(entity => {\n      const { startPosition, endPosition } = entity.getComponent(RectangleSelection)\n      entity.remove();\n      if (positionsAreClose(startPosition, endPosition, 5)) return;\n\n      this.queries.selectables.results.forEach(selectableEntity => {\n        const selectable = selectableEntity.getMutableComponent(Selectable)\n        const { position } = selectableEntity.getComponent(Position);\n        const { x, y } = position\n\n        const withinX = (startPosition.x < x && x < endPosition.x)\n                    || (endPosition.x < x && x < startPosition.x)\n\n        const withinY = (startPosition.y < y && y < endPosition.y)\n                    || (endPosition.y < y && y < startPosition.y)\n\n        selectable.selected = (withinX && withinY)\n      })\n    })\n  }\n}\n\nRectangleSelector.queries = {\n  selectables: { components: [Position, Selectable] },\n  rectangleSelections: { components: [RectangleSelection] },\n}\n\nexport default RectangleSelector","import { Component, Types } from \"ecsy\";\n\nclass Health extends Component<Health> {\n  maxHealth: number = 0;\n  health: number = 0;\n}\n\nHealth.schema = {\n  maxHealth: { type: Types.Number },\n  health: { type: Types.Number },\n}\n\nexport default Health","import { System, World, Entity } from \"ecsy\";\nimport Circle from \"../components/Circle\";\nimport Selectable from \"../components/Selectable\";\nimport RectangleSelection from \"../components/RectangleSelection\";\nimport positionsAreClose from \"../utils/positionsAreClose\";\nimport Position from \"../components/Position\";\nimport Health from \"../components/Health\";\nimport DebugVector from \"../components/DebugVector\";\nimport Vector2 from \"../types/Vector2\";\n\ninterface Colors {\n  background: string;\n  selection: string;\n}\n\ninterface Attributes {\n  priority?: number;\n  canvas: HTMLCanvasElement;\n  colors: Colors\n}\n\nclass Renderer extends System {\n  private canvas: HTMLCanvasElement;\n  private colors: Colors;\n  private ctx: CanvasRenderingContext2D | null;\n\n  private debug: boolean;\n\n  constructor(world: World, { canvas, colors, priority }: Attributes) {\n    super(world, { priority })\n    this.canvas = canvas\n    this.colors = colors\n    this.ctx = this.canvas.getContext('2d')\n    this.debug = false\n  }\n\n  execute(delta: number, time: number): void {\n    this.clear()\n    this.queries.circles.results.forEach(this.drawCircle)\n    this.queries.healths.results.forEach(this.drawHealth)\n    this.queries.rectangleSelections.results.forEach(this.drawRectangleSelection)\n    this.queries.debugVectors.results.forEach(this.drawDebugVector)\n    this.queries.debugVectors.results.forEach(e => e.remove())\n  }\n\n  toggleDebug = () => {\n    this.debug = !this.debug\n  }\n\n  private clear = () => {\n    if (!this.ctx) return;\n\n    this.ctx.fillStyle = this.colors.background\n    this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n  }\n\n  private drawCircle = (entity: Entity) => {\n    if (!this.ctx) return\n\n    const ctx = this.ctx\n    const { color, radius } = entity.getComponent(Circle)\n    const { position } = entity.getComponent(Position)\n    const selected = entity.getComponent(Selectable)?.selected ?? false\n    const { x, y } = position\n\n    ctx.fillStyle = color\n    ctx.beginPath()\n    ctx.arc(x, y, radius, 0, 2 * Math.PI, false)\n    ctx.fill()\n    ctx.lineWidth = 2\n    ctx.strokeStyle = '#222'\n    ctx.stroke()\n\n    if (selected) {\n      ctx.beginPath()\n      ctx.arc(x, y, radius + 2, 0, 2 * Math.PI, false)\n      ctx.lineWidth = 2\n      ctx.strokeStyle = this.colors.selection\n      ctx.stroke()\n    }\n  }\n\n  private drawDebugVector = (entity: Entity) => {\n    if (!this.debug) return;\n    this.drawVector(entity.getComponent(DebugVector))\n  }\n\n  private drawHealth = (entity: Entity) => {\n    const ctx = this.ctx;\n    if (!ctx) return;\n\n    const { position } = entity.getComponent(Position);\n    const { health, maxHealth } = entity.getComponent(Health);\n\n    const x = position.x - 10\n    const y = position.y + 15\n    const w = 20\n    const h = 4\n\n    const wHealth = w * health / maxHealth\n\n    ctx.lineWidth = 2\n    ctx.strokeStyle = '#222'\n    ctx.strokeRect(x, y, w, h)\n\n    ctx.lineWidth = 0\n    ctx.fillStyle = this.colors.selection;\n    ctx.fillRect(x, y, wHealth, h)\n  }\n\n  private drawRectangleSelection = (entity: Entity) => {\n    if (!this.ctx) return;\n\n    const ctx = this.ctx\n    const { startPosition, endPosition } = entity.getComponent(RectangleSelection)\n\n    if (positionsAreClose(startPosition, endPosition, 5)) return;\n\n    const { x, y } = startPosition\n    const w = endPosition.x - x\n    const h = endPosition.y - y\n\n    ctx.lineWidth = 2\n    ctx.strokeStyle = this.colors.selection;\n    ctx.strokeRect(x, y, w, h)\n  }\n\n  private drawVector = ({ position, direction, color }: { position: Vector2, direction: Vector2, color: string }) => {\n    if (!this.ctx) return;\n\n    const { x, y } = position.add(direction)\n\n    const ctx = this.ctx\n    ctx.lineWidth = 2\n    ctx.strokeStyle = color\n    ctx.beginPath()\n    ctx.moveTo(position.x, position.y)\n    ctx.lineTo(x, y)\n    ctx.stroke()\n  }\n}\n\nRenderer.queries = {\n  circles: { components: [Circle, Position] },\n  debugVectors: { components: [DebugVector] },\n  healths: { components: [Health, Position] },\n  rectangleSelections: { components: [RectangleSelection] },\n}\n\nexport default Renderer","import { System } from \"ecsy\";\nimport Circle from \"../components/Circle\";\nimport Selectable from \"../components/Selectable\";\nimport positionsAreClose from \"../utils/positionsAreClose\";\nimport Position from \"../components/Position\";\n\nclass Selector extends System {\n  execute(_delta: number, _time: number): void {}\n\n  onMouseDown = (e: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => {\n    if (e.button !== 0) return;\n\n    const clickPosition = { x: e.clientX, y: e.clientY }\n    this.selectCircles(clickPosition)\n  };\n\n  selectCircles = (clickPosition: { x: number, y: number }) => {\n    this.deselectAllCircles()\n\n    this.queries.circles.results.forEach(entity => {\n      const { radius } = entity.getComponent(Circle)\n      const { position } = entity.getComponent(Position)\n\n      if (positionsAreClose(clickPosition, position, radius)) {\n        entity.getMutableComponent(Selectable).selected = true\n      }\n    })\n  }\n\n  private deselectAllCircles = () => {\n    this.queries.circles.results.forEach(entity => {\n      if (!entity.getComponent(Selectable).selected) return\n\n      entity.getMutableComponent(Selectable).selected = false\n    })\n  }\n}\n\nSelector.queries = {\n  circles: { components: [Circle, Position, Selectable] }\n}\n\nexport default Selector","import { System, Entity } from \"ecsy\";\nimport * as R from 'ramda'\n\nimport Circle from \"../components/Circle\";\nimport Moveable from \"../components/Moveable\";\n\nimport positionsAreClose from \"../utils/positionsAreClose\";\nimport DestroyedOnImpact from \"../components/DestroyedOnImpact\";\nimport Destination from \"../components/Destination\";\nimport Collidable from \"../components/Collidable\";\nimport DoesDamage from \"../components/DoesDamage\";\nimport Health from \"../components/Health\";\nimport Position from \"../components/Position\";\n\nconst isCloseTo = R.curry((e1: Entity, e2: Entity) => {\n  if (e1 === e2) return false;\n\n  const c1 = e1.getComponent(Circle)\n  const p1 = e1.getComponent(Position)\n  const c2 = e2.getComponent(Circle)\n  const p2 = e2.getComponent(Position)\n  const threshold = c1.radius + c2.radius\n\n  return positionsAreClose(p1.position, p2.position, threshold)\n})\n\nclass Stopper extends System {\n  execute(_delta: number, _time: number): void {\n    this.queries.moveables.results.forEach(this.stopIfColliding)\n    this.queries.withDestination.results.forEach(this.stopIfAtDestination)\n  }\n\n  private stopIfAtDestination = (entity: Entity) => {\n    const { position } = entity.getComponent(Position)\n    const { position: destination } = entity.getComponent(Destination)\n\n    if (positionsAreClose(position, destination, 1)) {\n      entity.getMutableComponent(Moveable).direction.set(0, 0)\n      entity.removeComponent(Destination)\n    }\n  }\n\n  private stopIfColliding = (entity: Entity) => {\n    const other = R.find(isCloseTo(entity), this.queries.collideables.results)\n\n    if (R.isNil(other)) return\n\n    entity.getMutableComponent(Moveable).direction.set(0, 0)\n\n    if (entity.hasComponent(DoesDamage) && other.hasComponent(Health)) {\n      const { damage } = entity.getComponent(DoesDamage)\n      other.getMutableComponent(Health).health -= damage\n    }\n\n    if (entity.hasComponent(DestroyedOnImpact)) {\n      entity.remove()\n    }\n  }\n}\n\nStopper.queries = {\n  collideables: { components: [ Circle, Collidable, Position ]},\n  moveables: { components: [ Circle, Moveable, Position ] },\n  withDestination: { components: [ Destination, Moveable, Position ] },\n}\n\nexport default Stopper","import { System } from 'ecsy'\nimport Lifespan from '../components/Lifespan'\n\nclass EnforceLifespan extends System {\n  execute(delta: number, time: number): void {\n    this.queries.withLifepan.results.forEach(entity => {\n      const { ttl, createdAt } = entity.getComponent(Lifespan)\n\n      if (createdAt + ttl < time) {\n        entity.remove()\n      }\n    })\n  }\n}\n\nEnforceLifespan.queries = {\n  withLifepan: { components: [Lifespan] }\n}\n\nexport default EnforceLifespan","import { System } from 'ecsy'\nimport Health from '../components/Health'\n\nclass EnforceHealth extends System {\n  execute(_delta: number, _time: number): void {\n    this.queries.withHealth.results.forEach(entity => {\n      const { health } = entity.getComponent(Health)\n\n      if (health <= 0) {\n        entity.remove()\n      }\n    })\n  }\n}\n\nEnforceHealth.queries = {\n  withHealth: { components: [Health] }\n}\n\nexport default EnforceHealth","import { System, Entity } from \"ecsy\"\nimport * as R from 'ramda'\n\nimport Moveable from \"../components/Moveable\"\nimport Position from \"../components/Position\"\nimport Team from \"../components/Team\"\nimport Vector2 from \"../types/Vector2\"\nimport Destination from \"../components/Destination\"\nimport DebugVector from \"../components/DebugVector\"\n\nclass Boidser extends System {\n  execute(_delta: number, _time: number): void {\n    this.queries.entities.results.forEach(this.executeEntity)\n  }\n\n  executeEntity = (entity: Entity) => {\n    const { position } = entity.getComponent(Position)\n    const { direction, maxSpeed } = entity.getMutableComponent(Moveable)\n    const teammates = this.getTeammates(entity)\n\n    const destinationForce = this.calcDestinationForce(entity)\n    const separationForce = this.calcSeparationForce(50, entity, teammates)\n    const cohesionForce = this.calcCohesionForce(entity, teammates)\n    const alignmentForce = this.calcAlignmentForce(entity, teammates)\n\n    direction.set(0, 0)\n             .addMut(destinationForce)\n             .addMut(separationForce)\n             .addMut(cohesionForce.divideScalarMut(1000))\n             .addMut(alignmentForce.multiplyScalarMut(10))\n             .limitMut(maxSpeed)\n\n    this.world.createEntity()\n              .addComponent(DebugVector, { color: '#f00', position, direction })\n\n    if (Number.isNaN(direction.x) || Number.isNaN(direction.y)) {\n      throw new Error('divided.x was NaN');\n    }\n  }\n\n  private calcAlignmentForce = (entity: Entity, entities: Entity[]) => {\n    const force = new Vector2(0, 0)\n    const { position } = entity.getComponent(Position)\n\n    entities.forEach(e => {\n      const { position: p } = e.getComponent(Position)\n      const { direction: d } = e.getComponent(Moveable)\n      const distance = position.subtract(p).magnitude()\n      const f = d.divideScalar(distance)\n      force.addMut(f)\n    })\n\n    if (R.isEmpty(entities)) return force\n    return force.divideScalarMut(entities.length)\n  }\n\n  private calcAveragePosition = (entities: Entity[]) => {\n    const positions = entities.map(e => e.getComponent(Position).position)\n    const sumPositions = new Vector2(0, 0)\n    positions.forEach(sumPositions.addMut)\n\n    if (R.isEmpty(positions)) return sumPositions\n    return sumPositions.divideScalarMut(positions.length)\n  }\n\n  private calcCohesionForce = (entity: Entity, teammates: Entity[]) => {\n    const { position } = entity.getComponent(Position)\n    const averagePosition = this.calcAveragePosition(teammates)\n\n    return averagePosition.subtractMut(position)\n  }\n\n  private calcDestinationForce = (entity: Entity) => {\n    if (!entity.hasComponent(Destination)) return new Vector2(0, 0)\n\n    const { position: destination } =  entity.getComponent(Destination)\n    const { position } =  entity.getComponent(Position)\n    return destination.subtract(position)\n  }\n\n  private calcSeparationForce = (multiplier: number, entity: Entity, teammates: Entity[]) => {\n    const vector = new Vector2(0, 0)\n    const forces = R.map(this.calcSingleSeparationForce(multiplier)(entity), teammates)\n\n    const { position } = entity.getComponent(Position)\n    forces.forEach(force => {\n      this.world.createEntity().addComponent(DebugVector, { color: '#0f0', position, direction: force})\n    })\n\n\n    forces.forEach(vector.addMut)\n\n    if (R.isEmpty(forces)) return vector;\n\n    return vector.divideScalar(forces.length)\n  }\n\n  private calcSingleSeparationForce = R.curry((multiplier: number, entity: Entity, other: Entity) => {\n    const { position } = entity.getComponent(Position)\n    const { position: otherPosition } = other.getComponent(Position)\n    const { minSeparation, separation } = entity.getComponent(Moveable)\n\n    const vector = position.subtract(otherPosition)\n    const allowedDistance = otherPosition.subtract(position)\n                                         .limitMut(minSeparation)\n                                         .addMut(position)\n                                         .subtractMut(otherPosition)\n                                         .magnitude()\n    const distance = vector.magnitude()\n\n    if (separation < allowedDistance) return vector.multiplyScalarMut(0)\n    if (allowedDistance === 0 || distance < minSeparation) {\n      return vector.multiplyScalarMut(Math.pow(10, 10))\n    }\n\n    return vector.divideScalarMut(allowedDistance)\n                 .multiplyScalarMut(multiplier)\n  })\n\n  private getTeammates = (entity: Entity) => {\n    const { name } = entity.getComponent(Team)\n    const others = R.without([entity], this.queries.entities.results)\n\n    return others.filter(entity => name === entity.getComponent(Team).name)\n  }\n}\n\nBoidser.queries = {\n  entities: {\n    components: [Moveable, Position, Team]\n  }\n}\n\nexport default Boidser","import { TagComponent } from \"ecsy\";\n\nclass Debug extends TagComponent {\n\n}\n\nexport default Debug","import { System } from \"ecsy\";\n\nimport Destination from \"../components/Destination\";\nimport Moveable from \"../components/Moveable\";\nimport Selectable from \"../components/Selectable\";\n\nclass DestinationSetter extends System {\n  execute(_delta: number, _time: number): void {}\n\n  onMouseDown = (e: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => {\n    if (e.button !== 2) return;\n\n    const { clientX, clientY } = e\n\n    this.selected().forEach(entity => {\n      if (!entity.hasComponent(Destination)) {\n        entity.addComponent(Destination)\n      }\n      entity.getMutableComponent(Destination).position.set(clientX, clientY)\n    });\n  }\n\n  selected = () => {\n    return this.queries.selectables.results.filter(entity => {\n      return entity.getComponent(Selectable).selected\n    })\n  }\n}\n\nDestinationSetter.queries = {\n  selectables: { components: [ Moveable, Selectable ] },\n}\n\nexport default DestinationSetter","import { System } from \"ecsy\";\n\nimport Position from \"../components/Position\";\nimport Moveable from \"../components/Moveable\";\n\nclass Mover extends System {\n  execute(delta: number, _time: number): void {\n    this.queries.moveables.results.forEach(entity => {\n      const { position } = entity.getMutableComponent(Position)\n      const { direction } = entity.getComponent(Moveable)\n\n      const mX = direction.x * (delta / 1000)\n      const mY = direction.y * (delta / 1000)\n\n      position.x += mX\n      position.y += mY\n    })\n  }\n}\n\nMover.queries = {\n  moveables: { components: [ Moveable, Position ] },\n}\n\nexport default Mover","import { World } from 'ecsy'\n\nimport Vector2 from './types/Vector2'\n\nimport Attack from './components/Attack'\nimport Circle from './components/Circle'\nimport Collidable from './components/Collidable'\nimport Destination from './components/Destination'\nimport DestroyedOnImpact from './components/DestroyedOnImpact'\nimport Lifespan from './components/Lifespan'\nimport Moveable from './components/Moveable'\nimport RectangleSelection from './components/RectangleSelection'\nimport Selectable from './components/Selectable'\nimport Team from './components/Team'\n\nimport Attacker from './systems/Attacker'\nimport RectangleSelector from './systems/RectangleSelector'\nimport Renderer from './systems/Renderer'\nimport Selector from './systems/Selector'\nimport Stopper from './systems/Stopper'\nimport EnforceLifespan from './systems/EnforceLifespan'\nimport Health from './components/Health'\nimport EnforceHealth from './systems/EnforceHealth'\nimport DoesDamage from './components/DoesDamage'\nimport Position from './components/Position'\nimport Boidser from './systems/Boidser'\nimport Debug from './components/Debug'\nimport DestinationSetter from './systems/DestinationSetter'\nimport Mover from './systems/Mover'\nimport DebugVector from './components/DebugVector'\n\nconst colors = {\n  friendly: '#59cd90',\n  enemy: '#c73e1d',\n  projectile: '#ffe74c',\n  background: '#545e75',\n  selection: '#57b8ff',\n}\n\nclass Game {\n  private world: World\n  private lastTime: number\n  private animationFrameRequest: number | null\n\n  constructor({ canvas }: {canvas: HTMLCanvasElement}) {\n    this.lastTime = performance.now()\n    this.animationFrameRequest = null\n    this.world = new World()\n      .registerSystem(Attacker)\n      .registerSystem(Boidser)\n      .registerSystem(DestinationSetter)\n      .registerSystem(EnforceLifespan)\n      .registerSystem(EnforceHealth)\n      .registerSystem(Mover)\n      .registerSystem(RectangleSelector)\n      .registerSystem(Renderer, { canvas, colors })\n      .registerSystem(Selector)\n      .registerSystem(Stopper)\n      .registerComponent(Attack)\n      .registerComponent(Circle)\n      .registerComponent(Collidable)\n      .registerComponent(Debug)\n      .registerComponent(DebugVector)\n      .registerComponent(Destination)\n      .registerComponent(DestroyedOnImpact)\n      .registerComponent(DoesDamage)\n      .registerComponent(Health)\n      .registerComponent(Lifespan)\n      .registerComponent(Moveable)\n      .registerComponent(Position)\n      .registerComponent(RectangleSelection)\n      .registerComponent(Selectable)\n      .registerComponent(Team)\n  }\n\n  start = () => {\n    for (let i = 0; i < 10; i++) {\n      this.createFriendly(50 + 50 * i, 500)\n      this.createEnemy(50 + 50 * i, 100)\n    }\n    this.run();\n  }\n\n  createEnemy = (x: number, y: number) => {\n    const teamName = \"Enemy\"\n    const radius = 10;\n    const color = colors.enemy\n    const position = new Vector2(x, y)\n    const health = 100;\n\n    const projectileColor = colors.projectile\n    const projectileSpeed = 200;\n    const projectileLifetime = 1800;\n    const projectileDamage = 10;\n    const minimumRefactoryPeriod = 500;\n\n    this.world.createEntity()\n      .addComponent(Attack, { projectileColor, projectileSpeed, projectileLifetime, projectileDamage, minimumRefactoryPeriod })\n      .addComponent(Circle, { radius, color })\n      .addComponent(Collidable)\n      .addComponent(Health, { health, maxHealth: health })\n      .addComponent(Position, { position })\n      .addComponent(Team, { name: teamName })\n  }\n\n  createFriendly = (x: number, y: number) => {\n    const teamName = \"Friendly\"\n    const color = colors.friendly\n    const radius = 10;\n    const maxSpeed = 100;\n    const health = 100;\n    const direction = new Vector2()\n    const position = new Vector2(x, y)\n\n    const minSeparation = 2 * radius\n    const separation = 3 * radius;\n\n    const projectileColor = colors.projectile\n    const projectileSpeed = 200;\n    const projectileLifetime = 1800;\n    const projectileDamage = 10;\n    const minimumRefactoryPeriod = 500;\n\n    this.world.createEntity()\n      .addComponent(Attack, { projectileColor, projectileSpeed, projectileLifetime, projectileDamage, minimumRefactoryPeriod })\n      .addComponent(Circle, { radius, color })\n      .addComponent(Collidable)\n      .addComponent(Health, { health, maxHealth: health })\n      .addComponent(Moveable, { direction, maxSpeed, separation, minSeparation })\n      .addComponent(Position, { position })\n      .addComponent(Selectable)\n      .addComponent(Team, { name: teamName })\n  }\n\n  stop = () => {\n    if (!this.animationFrameRequest) return\n\n    cancelAnimationFrame(this.animationFrameRequest)\n  }\n\n  toggleDebug = () => {\n    const renderer = this.world.getSystem(Renderer) as Renderer\n    renderer.toggleDebug()\n  }\n\n  onMouseDown = (e: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => {\n    const destionationSetter = this.world.getSystem(DestinationSetter) as DestinationSetter\n    const selector = this.world.getSystem(Selector) as Selector\n    const rectangleSelector = this.world.getSystem(RectangleSelector) as RectangleSelector\n\n    destionationSetter.onMouseDown(e)\n    selector.onMouseDown(e)\n    rectangleSelector.onMouseDown(e)\n  }\n\n  onMouseMove = (e: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => {\n    const rectangleSelector = this.world.getSystem(RectangleSelector) as RectangleSelector\n    rectangleSelector.onMouseMove(e)\n  }\n\n  onMouseUp = (e: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => {\n    const rectangleSelector = this.world.getSystem(RectangleSelector) as RectangleSelector\n    rectangleSelector.onMouseUp(e)\n  }\n\n  private run =  () => {\n     // Compute delta and elapsed time\n     const time = performance.now()\n     const delta = time - this.lastTime\n\n     // Run all the systems\n     this.world.execute(delta, time)\n\n     this.lastTime = time\n     this.animationFrameRequest = requestAnimationFrame(this.run)\n  }\n}\n\nexport default Game","import React, { MouseEventHandler } from 'react';\nimport { useKeyPressEvent } from 'react-use'\n\nimport Game from './ecs/Game'\nimport './App.css';\n\nconst App = () => {\n  const [canvas, setCanvas] = React.useState<HTMLCanvasElement | null>(null);\n  const gameRef = React.useRef<Game | null>(null)\n\n  React.useEffect(() => {\n    if (!canvas) return;\n\n    gameRef.current = new Game({canvas})\n    gameRef.current.start()\n\n    return () => {\n      gameRef.current?.stop()\n      gameRef.current = null\n    }\n  }, [canvas])\n\n  React.useEffect(() => {\n    const handleResize = () => {\n      if (!canvas) return\n\n      canvas.width = window.innerWidth\n      canvas.height = window.innerHeight\n    }\n\n    handleResize()\n    window.addEventListener('resize', handleResize)\n    return () => window.removeEventListener('resize', handleResize)\n  }, [canvas])\n\n  const onMouseDown: MouseEventHandler<HTMLCanvasElement> = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    gameRef.current?.onMouseDown(e)\n  }\n\n  const onMouseMove: MouseEventHandler<HTMLCanvasElement> = (e) => {\n    gameRef.current?.onMouseMove(e)\n  }\n\n  const onMouseUp: MouseEventHandler<HTMLCanvasElement> = (e) => {\n    gameRef.current?.onMouseUp(e)\n  }\n\n  useKeyPressEvent('d', () => gameRef.current?.toggleDebug())\n\n  return (\n    <div className=\"App\">\n      <canvas\n        ref={setCanvas}\n        onMouseDown={onMouseDown}\n        onMouseMove={onMouseMove}\n        onMouseUp={onMouseUp}\n        onContextMenu={e => e.preventDefault()} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}