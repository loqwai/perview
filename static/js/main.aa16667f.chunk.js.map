{"version":3,"sources":["ecs/types/Vector2.ts","ecs/components/Attack.ts","ecs/components/Circle.ts","ecs/components/Collidable.ts","ecs/components/Destination.ts","ecs/components/DestroyedOnImpact.ts","ecs/components/Lifespan.ts","ecs/components/Moveable.ts","ecs/components/RectangleSelection.ts","ecs/components/Selectable.ts","ecs/components/Team.ts","ecs/utils/unitVector.ts","ecs/utils/distanceBetween.ts","ecs/components/DoesDamage.ts","ecs/components/Position.ts","ecs/systems/Attacker.ts","ecs/systems/Mover.ts","ecs/utils/positionsAreClose.ts","ecs/systems/RectangleSelector.ts","ecs/components/Health.ts","ecs/systems/Renderer.ts","ecs/systems/Selector.ts","ecs/systems/Stopper.ts","ecs/systems/EnforceLifespan.ts","ecs/systems/EnforceHealth.ts","ecs/Game.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Vector2","x","y","this","source","Vector2Type","createType","name","default","copy","copyCopyable","clone","cloneClonable","Attack","projectileColor","projectileSpeed","projectileLifetime","projectileDamage","minimumRefactoryPeriod","lastAttack","Component","schema","type","Types","String","Number","Circle","color","radius","Collidable","TagComponent","Destination","position","DestroyedOnImpact","Lifespan","ttl","createdAt","Moveable","direction","speed","RectangleSelection","startPosition","endPosition","Selectable","selected","Boolean","Team","unitVector","r","Math","sqrt","distanceBetween","a","b","dX","dY","DoesDamage","damage","Position","Attacker","closestTarget","attacker","getComponent","team","targets","queries","results","filter","entity","R","target","targetPosition","attackTarget","time","attack","getMutableComponent","spawnPosition","world","createEntity","addComponent","_delta","attackers","forEach","System","components","Mover","onMouseDown","e","button","clientX","clientY","vector","hasComponent","set","selectables","delta","_time","moveables","mX","mY","positionsAreClose","threshold","RectangleSelector","rectangleSelections","length","onMouseMove","onMouseUp","remove","selectableEntity","selectable","withinX","withinY","Health","maxHealth","health","Renderer","canvas","colors","priority","ctx","clear","fillStyle","background","fillRect","width","height","drawCircle","beginPath","arc","PI","fill","lineWidth","strokeStyle","stroke","selection","drawHealth","wHealth","strokeRect","drawRectangleSelection","w","h","getContext","circles","healths","Selector","clickPosition","selectCircles","deselectAllCircles","isCloseTo","e1","e2","c1","p1","c2","p2","Stopper","stopIfAtDestination","destination","removeComponent","stopIfColliding","other","collideables","withDestination","EnforceLifespan","withLifepan","EnforceHealth","withHealth","friendly","enemy","projectile","Game","lastTime","animationFrameRequest","start","i","createFriendly","createEnemy","run","stop","cancelAnimationFrame","mover","getSystem","selector","rectangleSelector","performance","now","execute","requestAnimationFrame","World","registerSystem","registerComponent","App","React","useState","setCanvas","gameRef","useRef","useEffect","current","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener","className","ref","preventDefault","stopPropagation","onContextMenu","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","unregister","navigator","serviceWorker","ready","then","registration","catch","error","console","message"],"mappings":"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","file":"static/js/main.aa16667f.chunk.js","sourcesContent":["import { createType, copyCopyable, cloneClonable } from \"ecsy\";\n\nclass Vector2 {\n  x: number;\n  y: number;\n\n  constructor(x: number = 0, y: number = 0) {\n    this.x = x;\n    this.y = y;\n  }\n\n  set(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n    return this;\n  }\n\n  copy(source: Vector2) {\n    this.x = source.x;\n    this.y = source.y;\n    return this;\n  }\n\n  clone() {\n    return new Vector2(this.x, this.y)\n  }\n}\n\nexport default Vector2\n\nexport const Vector2Type = createType({\n  name: \"Vector2\",\n  default: new Vector2(),\n  copy: copyCopyable,\n  clone: cloneClonable\n});","import { Component, Types } from \"ecsy\";\n\nclass Attack extends Component<Attack> {\n  projectileColor: string = '#000000';\n  projectileSpeed: number = 0;\n  projectileLifetime: number = 0;\n  projectileDamage: number = 0;\n  minimumRefactoryPeriod: number = 0; \n  lastAttack: number = 0;\n}\n\nAttack.schema = {\n  projectileColor: { type: Types.String },\n  projectileSpeed: { type: Types.Number },\n  projectileLifetime: { type: Types.Number },\n  projectileDamage: { type: Types.Number },\n  minimumRefactoryPeriod: { type: Types.Number },\n  lastAttack: { type: Types.Number },\n}\n\nexport default Attack","import { Component, Types } from \"ecsy\";\n\nclass Circle extends Component<Circle> {\n  color: string = '#000000';\n  radius: number = 0\n}\n\nCircle.schema = {\n  color: {type: Types.String},\n  radius: { type: Types.Number }, \n}\n\nexport default Circle","import { TagComponent } from \"ecsy\";\n\nclass Collidable extends TagComponent {}\n\nexport default Collidable","import { Component } from \"ecsy\";\nimport Vector2, { Vector2Type } from \"../types/Vector2\";\n\nclass Destination extends Component<Destination> {\n  position: Vector2 = new Vector2()\n}\n\nDestination.schema = {\n  position: { type: Vector2Type },\n}\n\nexport default Destination","import { TagComponent } from \"ecsy\";\n\nclass DestroyedOnImpact extends TagComponent {}\n\nexport default DestroyedOnImpact","import { Component, Types } from \"ecsy\";\n\nclass Lifespan extends Component<Lifespan> {\n  ttl: number = 0;\n  createdAt: number = 0;\n}\n\nLifespan.schema = {\n  ttl: { type: Types.Number },\n  createdAt: { type: Types.Number },\n}\n\nexport default Lifespan","import { Component, Types } from \"ecsy\";\nimport Vector2, { Vector2Type } from \"../types/Vector2\";\n\nclass Moveable extends Component<Moveable> {\n  direction: Vector2 = new Vector2()\n  speed: number = 0\n}\n\nMoveable.schema = {\n  direction: { type: Vector2Type, },\n  speed: { type: Types.Number, },\n}\n\nexport default Moveable","import { Component } from \"ecsy\";\nimport Vector2, { Vector2Type } from \"../types/Vector2\";\n\nclass RectangleSelection extends Component<RectangleSelection>{\n  startPosition: Vector2 = new Vector2()\n  endPosition: Vector2 = new Vector2()\n}\n\nRectangleSelection.schema = {\n  startPosition: { type: Vector2Type },\n  endPosition: { type: Vector2Type },\n}\n\nexport default RectangleSelection","import { Component, Types } from \"ecsy\";\n\nclass Selectable extends Component<Selectable> {\n  selected: boolean = false\n}\n\nSelectable.schema = {\n  selected: { type: Types.Boolean },\n}\n\nexport default Selectable","import { Component, Types } from \"ecsy\"\n\nclass Team extends Component<Team> {\n  name: string = \"unknown\";\n}\n\nTeam.schema = {\n  name: { type: Types.String },\n}\n\nexport default Team","import Vector2 from \"../types/Vector2\"\n\nconst unitVector = ({ x, y }: { x: number, y: number }) => {\n  const r = Math.sqrt(x*x + y*y)\n\n  return new Vector2(\n    x / r,\n    y / r,\n  )\n}\n\nexport default unitVector","interface Position {\n  x: number;\n  y: number;\n}\n\nconst distanceBetween = (a: Position, b: Position) => {\n  const dX = a.x - b.x\n  const dY = a.y - b.y\n  return Math.sqrt( (dX*dX) + (dY*dY) )\n}\n\nexport default distanceBetween\n\n\n","import { Component, Types } from \"ecsy\";\n\nclass DoesDamage extends Component<DoesDamage> {\n  damage: number = 0;\n}\n\nDoesDamage.schema = {\n  damage: { type: Types.Number },\n}\n\nexport default DoesDamage","import { Component } from \"ecsy\";\nimport Vector2, { Vector2Type } from \"../types/Vector2\";\n\nclass Position extends Component<Position> {\n  position: Vector2 = new Vector2()\n}\n\nPosition.schema = {\n  position: { type: Vector2Type },\n}\n\nexport default Position","import { System, Entity } from \"ecsy\";\nimport * as R from 'ramda'\n\nimport Team from '../components/Team'\nimport Attack from \"../components/Attack\";\nimport Circle from \"../components/Circle\";\nimport unitVector from \"../utils/unitVector\";\nimport Vector2 from \"../types/Vector2\";\nimport Moveable from \"../components/Moveable\";\nimport distanceBetween from \"../utils/distanceBetween\";\nimport DestroyedOnImpact from \"../components/DestroyedOnImpact\";\nimport Lifespan from \"../components/Lifespan\";\nimport DoesDamage from \"../components/DoesDamage\";\nimport Position from \"../components/Position\";\n\nclass Attacker extends System {\n  execute(_delta: number, time: number): void {\n    this.queries.attackers.results.forEach(attacker => {\n      const attack = attacker.getComponent(Attack)\n\n      if (time < attack.lastAttack + attack.minimumRefactoryPeriod) {\n        return;\n      }\n\n      const target = this.closestTarget(attacker)\n\n      if (target) this.attackTarget(time, attacker, target);\n    })\n  }\n\n  private closestTarget = (attacker: Entity) => {\n    const { position } = attacker.getComponent(Position)\n    const team = attacker.getComponent(Team)\n\n    const targets = this.queries.targets.results.filter(entity => team.name !== entity.getComponent(Team).name)\n    const sortedTargets = R.sortBy(target => {\n      const { position: targetPosition } = target.getComponent(Position)\n      return distanceBetween(position, targetPosition)\n    }, targets)\n\n    return sortedTargets[0]\n  }\n\n  private attackTarget = (time: number, attacker: Entity, target: Entity) => {\n    const attack = attacker.getMutableComponent(Attack)\n    attack.lastAttack = time\n\n    const { radius } = attacker.getComponent(Circle)\n    const { position } = attacker.getComponent(Position)\n    const { position: targetPosition } = target.getComponent(Position)\n\n    const direction = unitVector({\n      x: targetPosition.x - position.x,\n      y: targetPosition.y - position.y,\n    })\n\n    const spawnPosition = new Vector2(\n      position.x + (direction.x * (radius + 3)),\n      position.y + (direction.y * (radius + 3)),\n    )\n\n    this.world.createEntity()\n      .addComponent(Circle, { color: attack.projectileColor, radius: 2 })\n      .addComponent(DoesDamage, { damage: attack.projectileDamage })\n      .addComponent(DestroyedOnImpact)\n      .addComponent(Moveable, { speed: attack.projectileSpeed, direction })\n      .addComponent(Position, { position: spawnPosition })\n      .addComponent(Lifespan, { createdAt: time, ttl: attack.projectileLifetime })\n  }\n}\n\nAttacker.queries = {\n  attackers: { components: [Attack, Circle, Position, Team] },\n  targets: { components: [Position, Team] },\n}\n\nexport default Attacker","import { System } from \"ecsy\";\n\nimport Position from \"../components/Position\";\nimport Moveable from \"../components/Moveable\";\nimport Selectable from \"../components/Selectable\";\n\nimport unitVector from \"../utils/unitVector\";\nimport Destination from \"../components/Destination\";\n\nclass Mover extends System {\n  execute(delta: number, _time: number): void {\n    this.queries.moveables.results.forEach(entity => {\n      const { position } = entity.getMutableComponent(Position)\n      const { direction, speed } = entity.getComponent(Moveable)\n\n      const mX = direction.x * (delta * speed / 1000)\n      const mY = direction.y * (delta * speed / 1000)\n\n      position.x += mX\n      position.y += mY\n    })\n  }\n\n  onMouseDown = (e: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => {\n    if (e.button !== 2) return;\n\n    const {clientX, clientY} = e\n\n    this.selected().forEach(entity => {\n      const { position } = entity.getComponent(Position)\n\n      const vector = unitVector({\n        x: clientX - position.x,\n        y: clientY - position.y,\n      })\n\n      if (!entity.hasComponent(Destination)) {\n        entity.addComponent(Destination)\n      }\n      entity.getMutableComponent(Destination).position.set(clientX, clientY)\n      entity.getMutableComponent(Moveable).direction.set(vector.x, vector.y)\n    });\n  }\n\n  selected = () => {\n    return this.queries.selectables.results.filter(entity => {\n      return entity.getComponent(Selectable).selected\n    })\n  }\n}\n\nMover.queries = {\n  moveables: { components: [ Moveable, Position ] },\n  selectables: { components: [ Moveable, Selectable ] },\n}\n\nexport default Mover","import distanceBetween from \"./distanceBetween\"\n\ninterface Position {\n  x: number;\n  y: number;\n}\n\nconst positionsAreClose = (a: Position, b: Position, threshold: number) =>\n  distanceBetween(a, b) <= threshold\n\nexport default positionsAreClose","import { System } from \"ecsy\";\nimport Selectable from \"../components/Selectable\";\nimport Vector2 from \"../types/Vector2\";\nimport RectangleSelection from \"../components/RectangleSelection\";\nimport positionsAreClose from \"../utils/positionsAreClose\";\nimport Position from \"../components/Position\";\n\nclass RectangleSelector extends System {\n  execute(_delta: number, _time: number): void { }\n\n  onMouseDown = (e: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => {\n    if (e.button !== 0) return;\n    if (this.queries.rectangleSelections.results.length > 0) return;\n\n    const startPosition = new Vector2(e.clientX, e.clientY)\n    const endPosition = new Vector2(e.clientX, e.clientY)\n\n    this.world.createEntity()\n      .addComponent(RectangleSelection, { startPosition, endPosition })\n  }\n\n  onMouseMove = (e: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => {\n    const { clientX, clientY } = e\n\n    this.queries.rectangleSelections.results.forEach(entity => {\n      const { endPosition } = entity.getComponent(RectangleSelection)\n\n      if (clientX === endPosition.x || clientY === endPosition.y) {\n        return;\n      }\n\n      entity.getMutableComponent(RectangleSelection).endPosition.set(clientX, clientY)\n    })\n  }\n\n  onMouseUp = (e: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => {\n    if (e.button !== 0) return;\n\n    this.queries.rectangleSelections.results.forEach(entity => {\n      const { startPosition, endPosition } = entity.getComponent(RectangleSelection)\n      entity.remove();\n      if (positionsAreClose(startPosition, endPosition, 5)) return;\n\n      this.queries.selectables.results.forEach(selectableEntity => {\n        const selectable = selectableEntity.getMutableComponent(Selectable)\n        const { position } = selectableEntity.getComponent(Position);\n        const { x, y } = position\n\n        const withinX = (startPosition.x < x && x < endPosition.x)\n                    || (endPosition.x < x && x < startPosition.x)\n\n        const withinY = (startPosition.y < y && y < endPosition.y)\n                    || (endPosition.y < y && y < startPosition.y)\n\n        selectable.selected = (withinX && withinY)\n      })\n    })\n  }\n}\n\nRectangleSelector.queries = {\n  selectables: { components: [Position, Selectable] },\n  rectangleSelections: { components: [RectangleSelection] },\n}\n\nexport default RectangleSelector","import { Component, Types } from \"ecsy\";\n\nclass Health extends Component<Health> {\n  maxHealth: number = 0;\n  health: number = 0;\n}\n\nHealth.schema = {\n  maxHealth: { type: Types.Number },\n  health: { type: Types.Number },\n}\n\nexport default Health","import { System, World, Entity } from \"ecsy\";\nimport Circle from \"../components/Circle\";\nimport Selectable from \"../components/Selectable\";\nimport RectangleSelection from \"../components/RectangleSelection\";\nimport positionsAreClose from \"../utils/positionsAreClose\";\nimport Position from \"../components/Position\";\nimport Health from \"../components/Health\";\n\ninterface Colors {\n  background: string;\n  selection: string;\n}\n\ninterface Attributes {\n  priority?: number;\n  canvas: HTMLCanvasElement;\n  colors: Colors\n}\n\nclass Renderer extends System {\n  private canvas: HTMLCanvasElement;\n  private colors: Colors;\n  private ctx: CanvasRenderingContext2D | null;\n\n  constructor(world: World, { canvas, colors, priority }: Attributes) {\n    super(world, { priority })\n    this.canvas = canvas\n    this.colors = colors\n    this.ctx = this.canvas.getContext('2d')\n  }\n\n  execute(delta: number, time: number): void {\n    this.clear()\n    this.queries.circles.results.forEach(this.drawCircle)\n    this.queries.healths.results.forEach(this.drawHealth)\n    this.queries.rectangleSelections.results.forEach(this.drawRectangleSelection)\n  }\n\n  private clear = () => {\n    if (!this.ctx) return;\n\n    this.ctx.fillStyle = this.colors.background\n    this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n  }\n\n  private drawCircle = (entity: Entity) => {\n    if (!this.ctx) return\n\n    const ctx = this.ctx\n    const { color, radius } = entity.getComponent(Circle)\n    const { position } = entity.getComponent(Position)\n    const selected = entity.getComponent(Selectable)?.selected ?? false\n    const { x, y } = position\n\n    ctx.fillStyle = color\n    ctx.beginPath()\n    ctx.arc(x, y, radius, 0, 2 * Math.PI, false)\n    ctx.fill()\n    ctx.lineWidth = 2\n    ctx.strokeStyle = '#222'\n    ctx.stroke()    \n\n    if (selected) {\n      ctx.beginPath()\n      ctx.arc(x, y, radius + 2, 0, 2 * Math.PI, false)\n      ctx.lineWidth = 2\n      ctx.strokeStyle = this.colors.selection\n      ctx.stroke()    \n    }\n  }\n\n  private drawHealth = (entity: Entity) => {\n    const ctx = this.ctx;\n    if (!ctx) return;\n\n    const { position } = entity.getComponent(Position);\n    const { health, maxHealth } = entity.getComponent(Health);\n\n    const x = position.x - 10\n    const y = position.y + 15\n    const w = 20\n    const h = 4\n\n    const wHealth = w * health / maxHealth\n\n    ctx.lineWidth = 2\n    ctx.strokeStyle = '#222'\n    ctx.strokeRect(x, y, w, h)\n\n    ctx.lineWidth = 0\n    ctx.fillStyle = this.colors.selection;\n    ctx.fillRect(x, y, wHealth, h)\n  }\n\n  private drawRectangleSelection = (entity: Entity) => {\n    if (!this.ctx) return;\n\n    const ctx = this.ctx\n    const { startPosition, endPosition } = entity.getComponent(RectangleSelection)\n\n    if (positionsAreClose(startPosition, endPosition, 5)) return;\n\n    const { x, y } = startPosition\n    const w = endPosition.x - x\n    const h = endPosition.y - y\n\n    ctx.lineWidth = 2\n    ctx.strokeStyle = this.colors.selection;\n    ctx.strokeRect(x, y, w, h)\n  }\n}\n\nRenderer.queries = {\n  circles: { components: [Circle, Position] },\n  healths: { components: [Health, Position] },\n  rectangleSelections: { components: [RectangleSelection] },\n}\n\nexport default Renderer","import { System } from \"ecsy\";\nimport Circle from \"../components/Circle\";\nimport Selectable from \"../components/Selectable\";\nimport positionsAreClose from \"../utils/positionsAreClose\";\nimport Position from \"../components/Position\";\n\nclass Selector extends System {\n  execute(_delta: number, _time: number): void {}\n\n  onMouseDown = (e: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => {\n    if (e.button !== 0) return;\n\n    const clickPosition = { x: e.clientX, y: e.clientY }\n    this.selectCircles(clickPosition)\n  };\n\n  selectCircles = (clickPosition: { x: number, y: number }) => {\n    this.deselectAllCircles()\n\n    this.queries.circles.results.forEach(entity => {\n      const { radius } = entity.getComponent(Circle)\n      const { position } = entity.getComponent(Position)\n\n      if (positionsAreClose(clickPosition, position, radius)) {\n        entity.getMutableComponent(Selectable).selected = true\n      }\n    })\n  }\n\n  private deselectAllCircles = () => {\n    this.queries.circles.results.forEach(entity => {\n      if (!entity.getComponent(Selectable).selected) return\n\n      entity.getMutableComponent(Selectable).selected = false\n    })\n  }\n}\n\nSelector.queries = {\n  circles: { components: [Circle, Position, Selectable] }\n}\n\nexport default Selector","import { System, Entity } from \"ecsy\";\nimport * as R from 'ramda'\n\nimport Circle from \"../components/Circle\";\nimport Moveable from \"../components/Moveable\";\n\nimport positionsAreClose from \"../utils/positionsAreClose\";\nimport DestroyedOnImpact from \"../components/DestroyedOnImpact\";\nimport Destination from \"../components/Destination\";\nimport Collidable from \"../components/Collidable\";\nimport DoesDamage from \"../components/DoesDamage\";\nimport Health from \"../components/Health\";\nimport Position from \"../components/Position\";\n\nconst isCloseTo = R.curry((e1: Entity, e2: Entity) => {\n  if (e1 === e2) return false;\n\n  const c1 = e1.getComponent(Circle)\n  const p1 = e1.getComponent(Position)\n  const c2 = e2.getComponent(Circle)\n  const p2 = e2.getComponent(Position)\n  const threshold = c1.radius + c2.radius\n\n  return positionsAreClose(p1.position, p2.position, threshold)\n})\n\nclass Stopper extends System {\n  execute(_delta: number, _time: number): void {\n    this.queries.moveables.results.forEach(this.stopIfColliding)\n    this.queries.withDestination.results.forEach(this.stopIfAtDestination)\n  }\n\n  private stopIfAtDestination = (entity: Entity) => {\n    const { position } = entity.getComponent(Position)\n    const { position: destination } = entity.getComponent(Destination)\n\n    if (positionsAreClose(position, destination, 1)) {\n      entity.getMutableComponent(Moveable).direction.set(0, 0)\n      entity.removeComponent(Destination)\n    }\n  }\n\n  private stopIfColliding = (entity: Entity) => {\n    const other = R.find(isCloseTo(entity), this.queries.collideables.results)\n\n    if (R.isNil(other)) return\n\n    entity.getMutableComponent(Moveable).direction.set(0, 0)\n\n    if (entity.hasComponent(DoesDamage) && other.hasComponent(Health)) {\n      const { damage } = entity.getComponent(DoesDamage)\n      other.getMutableComponent(Health).health -= damage\n    }\n\n    if (entity.hasComponent(DestroyedOnImpact)) {\n      entity.remove()\n    }\n  }\n}\n\nStopper.queries = {\n  collideables: { components: [ Circle, Collidable, Position ]},\n  moveables: { components: [ Circle, Moveable, Position ] },\n  withDestination: { components: [ Destination, Moveable, Position ] },\n}\n\nexport default Stopper","import { System } from 'ecsy'\nimport Lifespan from '../components/Lifespan'\n\nclass EnforceLifespan extends System {\n  execute(delta: number, time: number): void {\n    this.queries.withLifepan.results.forEach(entity => {\n      const { ttl, createdAt } = entity.getComponent(Lifespan)\n\n      if (createdAt + ttl < time) {\n        entity.remove()\n      }\n    })\n  }\n}\n\nEnforceLifespan.queries = {\n  withLifepan: { components: [Lifespan] }\n}\n\nexport default EnforceLifespan","import { System } from 'ecsy'\nimport Health from '../components/Health'\n\nclass EnforceHealth extends System {\n  execute(_delta: number, _time: number): void {\n    this.queries.withHealth.results.forEach(entity => {\n      const { health } = entity.getComponent(Health)\n\n      if (health <= 0) {\n        entity.remove()\n      }\n    })\n  }\n}\n\nEnforceHealth.queries = {\n  withHealth: { components: [Health] }\n}\n\nexport default EnforceHealth","import { World } from 'ecsy'\n\nimport Vector2 from './types/Vector2'\n\nimport Attack from './components/Attack'\nimport Circle from './components/Circle'\nimport Collidable from './components/Collidable'\nimport Destination from './components/Destination'\nimport DestroyedOnImpact from './components/DestroyedOnImpact'\nimport Lifespan from './components/Lifespan'\nimport Moveable from './components/Moveable'\nimport RectangleSelection from './components/RectangleSelection'\nimport Selectable from './components/Selectable'\nimport Team from './components/Team'\n\nimport Attacker from './systems/Attacker'\nimport Mover from './systems/Mover'\nimport RectangleSelector from './systems/RectangleSelector'\nimport Renderer from './systems/Renderer'\nimport Selector from './systems/Selector'\nimport Stopper from './systems/Stopper'\nimport EnforceLifespan from './systems/EnforceLifespan'\nimport Health from './components/Health'\nimport EnforceHealth from './systems/EnforceHealth'\nimport DoesDamage from './components/DoesDamage'\nimport Position from './components/Position'\n\nconst colors = {\n  friendly: '#59cd90',\n  enemy: '#c73e1d',\n  projectile: '#ffe74c',\n  background: '#545e75',\n  selection: '#57b8ff',\n}\n\nclass Game {\n  private world: World\n  private canvas: HTMLCanvasElement\n  private lastTime: number\n  private animationFrameRequest: number | null\n\n  constructor({canvas}: {canvas: HTMLCanvasElement}) {\n    this.canvas = canvas\n    this.lastTime = performance.now()\n    this.animationFrameRequest = null\n    this.world = new World()\n      .registerSystem(Attacker)\n      .registerSystem(EnforceLifespan)\n      .registerSystem(EnforceHealth)\n      .registerSystem(Mover)\n      .registerSystem(RectangleSelector)\n      .registerSystem(Renderer, { canvas, colors })\n      .registerSystem(Selector)\n      .registerSystem(Stopper)\n      .registerComponent(Attack)\n      .registerComponent(Circle)\n      .registerComponent(Collidable)\n      .registerComponent(Destination)\n      .registerComponent(DestroyedOnImpact)\n      .registerComponent(DoesDamage)\n      .registerComponent(Health)\n      .registerComponent(Lifespan)\n      .registerComponent(Moveable)\n      .registerComponent(Position)\n      .registerComponent(RectangleSelection)\n      .registerComponent(Selectable)\n      .registerComponent(Team)\n  }\n\n  start = () => {\n    for (let i = 0; i < 10; i++) {\n      this.createFriendly(50 + 50 * i, 500)\n      this.createEnemy(50 + 50 * i, 100)\n    }\n    this.run();\n  }\n\n  createEnemy = (x: number, y: number) => {\n    const teamName = \"Enemy\"\n    const radius = 10;\n    const color = colors.enemy\n    const position = new Vector2(x, y)\n    const health = 100;\n\n    const projectileColor = colors.projectile\n    const projectileSpeed = 200;\n    const projectileLifetime = 5000;\n    const projectileDamage = 10;\n    const minimumRefactoryPeriod = 500;\n\n    this.world.createEntity()\n      .addComponent(Attack, { projectileColor, projectileSpeed, projectileLifetime, projectileDamage, minimumRefactoryPeriod })\n      .addComponent(Circle, { radius, color })\n      .addComponent(Collidable)\n      .addComponent(Health, { health, maxHealth: health })\n      .addComponent(Position, { position })\n      .addComponent(Team, { name: teamName })\n  }\n\n  createFriendly = (x: number, y: number) => {\n    const teamName = \"Friendly\"\n    const color = colors.friendly\n    const radius = 10;\n    const speed = 100;\n    const health = 100;\n    const direction = new Vector2()\n    const position = new Vector2(x, y)\n\n    const projectileColor = colors.projectile\n    const projectileSpeed = 200;\n    const projectileLifetime = 5000;\n    const projectileDamage = 10;\n    const minimumRefactoryPeriod = 500;\n\n    this.world.createEntity()\n      .addComponent(Attack, { projectileColor, projectileSpeed, projectileLifetime, projectileDamage, minimumRefactoryPeriod })\n      .addComponent(Circle, { radius, color })\n      .addComponent(Collidable)\n      .addComponent(Health, { health, maxHealth: health })\n      .addComponent(Moveable, { direction, speed })\n      .addComponent(Position, { position })\n      .addComponent(Selectable)\n      .addComponent(Team, { name: teamName })\n  }\n\n  stop = () => {\n    if (!this.animationFrameRequest) return\n\n    cancelAnimationFrame(this.animationFrameRequest)\n  }\n\n  onMouseDown = (e: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => {\n    const mover = this.world.getSystem(Mover) as Mover\n    const selector = this.world.getSystem(Selector) as Selector\n    const rectangleSelector = this.world.getSystem(RectangleSelector) as RectangleSelector\n\n    mover.onMouseDown(e)\n    selector.onMouseDown(e)\n    rectangleSelector.onMouseDown(e)\n  }\n\n  onMouseMove = (e: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => {\n    const rectangleSelector = this.world.getSystem(RectangleSelector) as RectangleSelector\n    rectangleSelector.onMouseMove(e)\n  }\n\n  onMouseUp = (e: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => {\n    const rectangleSelector = this.world.getSystem(RectangleSelector) as RectangleSelector\n    rectangleSelector.onMouseUp(e)\n  }\n\n  private run =  () => {\n     // Compute delta and elapsed time\n     const time = performance.now()\n     const delta = time - this.lastTime\n\n     // Run all the systems\n     this.world.execute(delta, time)\n\n     this.lastTime = time\n     this.animationFrameRequest = requestAnimationFrame(this.run)\n  }\n}\n\nexport default Game","import React, { MouseEventHandler } from 'react';\n\nimport Game from './ecs/Game'\nimport './App.css';\n\nconst App = () => {\n  const [canvas, setCanvas] = React.useState<HTMLCanvasElement | null>(null);\n  const gameRef = React.useRef<Game | null>(null)\n\n  React.useEffect(() => {\n    if (!canvas) return;\n\n    gameRef.current = new Game({canvas})\n    gameRef.current.start()\n\n    return () => {\n      gameRef.current?.stop()\n      gameRef.current = null\n    }\n  }, [canvas])\n\n  React.useEffect(() => {\n    const handleResize = () => {\n      if (!canvas) return\n\n      canvas.width = window.innerWidth\n      canvas.height = window.innerHeight\n    }\n\n    handleResize()\n    window.addEventListener('resize', handleResize)\n    return () => window.removeEventListener('resize', handleResize)\n  }, [canvas])\n\n  const onMouseDown: MouseEventHandler<HTMLCanvasElement> = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    gameRef.current?.onMouseDown(e)\n  }\n\n  const onMouseMove: MouseEventHandler<HTMLCanvasElement> = (e) => {\n    gameRef.current?.onMouseMove(e)\n  }\n\n  const onMouseUp: MouseEventHandler<HTMLCanvasElement> = (e) => {\n    gameRef.current?.onMouseUp(e)\n  }\n\n  return (\n    <div className=\"App\">\n      <canvas \n        ref={setCanvas} \n        onMouseDown={onMouseDown} \n        onMouseMove={onMouseMove}\n        onMouseUp={onMouseUp}\n        onContextMenu={e => e.preventDefault()} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}