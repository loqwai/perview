{"version":3,"sources":["ecs/components/Position.ts","ecs/components/Renderable.ts","ecs/components/Selectable.ts","ecs/systems/Renderer.ts","ecs/systems/SelectionToggler.ts","ecs/components/Moveable.ts","ecs/utils/positionsAreClose.ts","ecs/systems/Mover.ts","ecs/systems/Stopper.ts","ecs/Game.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Position","x","y","Component","schema","type","Types","Number","Renderable","TagComponent","Selectable","selected","toggle","Boolean","Renderer","world","canvas","priority","clear","ctx","getContext","clearRect","width","height","drawCircle","fillStyle","beginPath","arc","Math","PI","fill","lineWidth","strokeStyle","stroke","delta","time","this","queries","renderables","results","forEach","entity","getComponent","System","components","SelectionToggler","onMouseDown","e","button","clientX","clientY","selectables","dX","dY","sqrt","getMutableComponent","_delta","_time","Moveable","hasDestination","destinationX","destinationY","speed","positionsAreClose","a","b","threshold","Mover","moveable","filter","withDestination","moveables","position","destination","vector","unitVector","r","mX","mY","Stopper","stopIfColliding","other","otherPosition","Game","lastTime","animationFrameRequest","start","i","createEntity","addComponent","run","stop","cancelAnimationFrame","moveCommander","getSystem","selectionToggler","performance","now","execute","requestAnimationFrame","World","registerSystem","registerComponent","App","React","useState","setCanvas","gameRef","useRef","useEffect","current","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener","className","ref","preventDefault","stopPropagation","onContextMenu","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","unregister","navigator","serviceWorker","ready","then","registration","catch","error","console","message"],"mappings":"yQAOMA,E,wOACJC,EAAY,E,EACZC,EAAY,E,mBAFSC,KAKvBH,EAASI,OAAS,CAChBH,EAAG,CAAEI,KAAMC,IAAMC,QACjBL,EAAG,CAAEG,KAAMC,IAAMC,SAGJP,QCbAQ,E,yKAFUC,K,OCInBC,E,gPACJC,UAAoB,E,EAEpBC,OAAS,WACP,EAAKD,UAAY,EAAKA,U,qBAJDR,KAQzBO,EAAWN,OAAS,CAClBO,SAAU,CAAEN,KAAMC,IAAMO,UAGXH,QCRTI,E,gEAGJ,kBAAYC,EAAZ,GAA6D,IAAD,EAAhCC,EAAgC,EAAhCA,OAAQC,EAAwB,EAAxBA,SAAwB,mCAC1D,cAAMF,EAAO,CAAEE,cAHTD,YAEoD,IAepDE,MAAQ,WACd,IAAMC,EAAM,EAAKH,OAAOI,WAAW,MAC9BD,GAELA,EAAIE,UAAU,EAAG,EAAG,EAAKL,OAAOM,MAAO,EAAKN,OAAOO,SAnBO,EAsBpDC,WAAa,YAAkE,IAAhEvB,EAA+D,EAA/DA,EAAGC,EAA4D,EAA5DA,EAAGS,EAAyD,EAAzDA,SACrBQ,EAAM,EAAKH,OAAOI,WAAW,MAC9BD,IAELA,EAAIM,UAAY,OAChBN,EAAIO,YACJP,EAAIQ,IAAI1B,EAAGC,EAAG,GAAI,EAAG,EAAI0B,KAAKC,IAAI,GAClCV,EAAIW,OACJX,EAAIY,UAAY,EAChBZ,EAAIa,YAAcrB,EAAW,OAAS,OACtCQ,EAAIc,WA9BJ,EAAKjB,OAASA,EAF4C,E,mEAKpDkB,EAAeC,GAAqB,IAAD,OACzCC,KAAKlB,QACLkB,KAAKC,QAAQC,YAAYC,QAAQC,SAAQ,SAAAC,GAAW,IAAD,IAChCA,EAAOC,aAAa1C,GAA7BC,EADyC,EACzCA,EAAGC,EADsC,EACtCA,EACHS,GAFyC,UAE5B8B,EAAOC,aAAahC,UAFQ,QAEO,CAAEC,UAAU,IAA5DA,SAER,EAAKa,WAAW,CAACvB,IAAGC,IAAGS,oB,UAdNgC,KAuCvB7B,EAASuB,QAAU,CACjBC,YAAa,CAAEM,WAAY,CAACpC,EAAYR,KAG3Bc,QCjDT+B,E,wQAGJC,YAAc,SAACC,GACb,GAAiB,IAAbA,EAAEC,OAAN,CADoE,IAG7DC,EAAoBF,EAApBE,QAASC,EAAWH,EAAXG,QAEhB,EAAKb,QAAQc,YAAYZ,QAAQC,SAAQ,SAAAC,GAAW,IAAD,EAChCA,EAAOC,aAAa1C,GAA7BC,EADyC,EACzCA,EAAGC,EADsC,EACtCA,EAELkD,EAAKnD,EAAIgD,EACTI,EAAKnD,EAAIgD,EAEEtB,KAAK0B,KAAOF,EAAGA,EAAOC,EAAGA,IAC1B,IACdZ,EAAOc,oBAAoB7C,GAAYE,c,6EAfrC4C,EAAgBC,Q,kBADKd,KAuB/BE,EAAiBR,QAAU,CACzBc,YAAa,CAAEP,WAAY,CAAClC,EAAYV,KAG3B6C,QCtBTa,E,wOACJC,gBAAiB,E,EACjBC,aAAe,E,EACfC,aAAe,E,EACfC,MAAQ,I,mBAJa3D,KAOvBuD,EAAStD,OAAS,CAChBuD,eAAgB,CAAEtD,KAAMC,IAAMO,SAC9B+C,aAAc,CAAEvD,KAAMC,IAAMC,QAC5BsD,aAAc,CAAExD,KAAMC,IAAMC,QAC5BuD,MAAO,CAAEzD,KAAMC,IAAMC,SAGRmD,QCTAK,EARW,SAApBA,kBAAqBC,EAAaC,EAAaC,GACnD,IAAMd,EAAKY,EAAE/D,EAAIgE,EAAEhE,EACboD,EAAKW,EAAE9D,EAAI+D,EAAE/D,EAGnB,OAFiB0B,KAAK0B,KAAOF,EAAGA,EAAOC,EAAGA,IAEvBa,GCIfC,E,4NAyBJrB,YAAc,SAACC,GACb,GAAiB,IAAbA,EAAEC,OAAN,CADoE,IAG7DC,EAAoBF,EAApBE,QAASC,EAAWH,EAAXG,QAEhB,EAAKvC,WAAW6B,SAAQ,SAAAC,GACtB,IAAM2B,EAAW3B,EAAOc,oBAAoBG,GAC5CU,EAAST,gBAAiB,EAC1BS,EAASR,aAAeX,EACxBmB,EAASP,aAAeX,O,EAI5BvC,SAAW,WACT,OAAO,EAAK0B,QAAQc,YAAYZ,QAAQ8B,QAAO,SAAA5B,GAC7C,OAAOA,EAAOC,aAAahC,GAAYC,a,EAI3C2D,gBAAkB,WAChB,OAAO,EAAKjC,QAAQkC,UAAUhC,QAAQ8B,QAAO,SAAA5B,GAC3C,OAAOA,EAAOC,aAAagB,GAAUC,mB,kEA7CjCzB,EAAeuB,GACrBrB,KAAKkC,kBAAkB9B,SAAQ,SAAAC,GAC7B,IAAM+B,EAAW/B,EAAOc,oBAAoBvD,GADL,EAEOyC,EAAOC,aAAagB,GAA1DE,EAF+B,EAE/BA,aAAcC,EAFiB,EAEjBA,aAAcC,EAFG,EAEHA,MAE9BW,EAAc,CAAExE,EAAG2D,EAAc1D,EAAG2D,GAEpCa,EAjBO,SAAbC,WAAc,GAAwC,IAAtC1E,EAAqC,EAArCA,EAAGC,EAAkC,EAAlCA,EACjB0E,EAAIhD,KAAK0B,KAAKrD,EAAEA,EAAIC,EAAEA,GAE5B,MAAO,CACLD,EAAGA,EAAI2E,EACP1E,EAAGA,EAAI0E,GAYUD,CAAW,CACxB1E,EAAGwE,EAAYxE,EAAIuE,EAASvE,EAC5BC,EAAGuE,EAAYvE,EAAIsE,EAAStE,IAGxB2E,EAAKH,EAAOzE,GAAKiC,EAAQ4B,EAAQ,KACjCgB,EAAKJ,EAAOxE,GAAKgC,EAAQ4B,EAAQ,KAEvCU,EAASvE,GAAK4E,EACdL,EAAStE,GAAK4E,EAEVf,EAAkBS,EAAUC,EAAa,KAC3ChC,EAAOc,oBAAoBG,GAAUC,gBAAiB,U,OApB1ChB,KAmDpBwB,EAAM9B,QAAU,CACdkC,UAAW,CAAE3B,WAAY,CAAEc,EAAU1D,IACrCmD,YAAa,CAAEP,WAAY,CAAEc,EAAUhD,KAG1ByD,QCjETY,E,oOAKIC,gBAAkB,SAACvC,GACzB,IAAM+B,EAAW/B,EAAOC,aAAa1C,GAErC,EAAKqC,QAAQkC,UAAUhC,QAAQC,SAAQ,SAAAyC,GACrC,GAAIxC,IAAWwC,EAAf,CAEA,IAAMC,EAAgBD,EAAMvC,aAAa1C,GAErC+D,EAAkBS,EAAUU,EAAe,MAC7CzC,EAAOc,oBAAoBG,GAAUC,gBAAiB,Q,oEAbpDH,EAAgBC,GACtBrB,KAAKC,QAAQkC,UAAUhC,QAAQC,QAAQJ,KAAK4C,qB,SAF1BrC,KAoBtBoC,EAAQ1C,QAAU,CAChBkC,UAAW,CAAE3B,WAAY,CAAEc,EAAU1D,KAGxB+E,QCuCAI,EArDb,iBAAoD,IAAD,OAAtCnE,EAAsC,EAAtCA,OAAsC,4BAL3CD,WAK2C,OAJ3CC,YAI2C,OAH3CoE,cAG2C,OAF3CC,2BAE2C,OAenDC,MAAQ,WACN,IAAK,IAAIC,EAAI,EAAGA,EAAI,GAAIA,IACtB,EAAKxE,MAAMyE,eACRC,aAAazF,EAAU,CAACC,EAAG,GAAKsF,EAAGrF,EAAG,GAAKqF,IAC3CE,aAAa/E,GACb+E,aAAa/B,GACb+B,aAAajF,GAElB,EAAKkF,OAvB4C,KA0BnDC,KAAO,WACA,EAAKN,uBAEVO,qBAAqB,EAAKP,wBA7BuB,KAgCnDvC,YAAc,SAACC,GACb,IAAM8C,EAAgB,EAAK9E,MAAM+E,UAAU3B,GACrC4B,EAAmB,EAAKhF,MAAM+E,UAAUjD,GAE9CgD,EAAc/C,YAAYC,GAC1BgD,EAAiBjD,YAAYC,IArCoB,KAwC3C2C,IAAO,WAEZ,IAAMvD,EAAO6D,YAAYC,MACnB/D,EAAQC,EAAO,EAAKiD,SAG1B,EAAKrE,MAAMmF,QAAQhE,EAAOC,GAE1B,EAAKiD,SAAWjD,EAChB,EAAKkD,sBAAwBc,sBAAsB,EAAKT,MAhDzDtD,KAAKpB,OAASA,EACdoB,KAAKgD,SAAWY,YAAYC,MAC5B7D,KAAKiD,sBAAwB,KAC7BjD,KAAKrB,OAAQ,IAAIqF,KACdC,eAAevF,EAAU,CAAEE,WAC3BqF,eAAexD,GACfwD,eAAelC,GACfkC,eAAetB,GACfuB,kBAAkBtG,GAClBsG,kBAAkB5F,GAClB4F,kBAAkB5C,GAClB4C,kBAAkB9F,ICsBV+F,G,MA7CH,SAANA,MAAa,IAAD,EACYC,IAAMC,SAAmC,MADrD,mBACTzF,EADS,KACD0F,EADC,KAEVC,EAAUH,IAAMI,OAAoB,MAE1CJ,IAAMK,WAAU,WACd,GAAK7F,EAKL,OAHA2F,EAAQG,QAAU,IAAI3B,EAAK,CAACnE,WAC5B2F,EAAQG,QAAQxB,QAET,WAAO,IAAD,EACX,UAAAqB,EAAQG,eAAR,SAAiBnB,OACjBgB,EAAQG,QAAU,QAEnB,CAAC9F,IAEJwF,IAAMK,WAAU,WACd,IAAME,EAAe,SAAfA,eACC/F,IAELA,EAAOM,MAAQ0F,OAAOC,WACtBjG,EAAOO,OAASyF,OAAOE,cAKzB,OAFAH,IACAC,OAAOG,iBAAiB,SAAUJ,GAC3B,kBAAMC,OAAOI,oBAAoB,SAAUL,MACjD,CAAC/F,IAQJ,OACE,yBAAKqG,UAAU,OACb,4BACEC,IAAKZ,EACL5D,YAVoD,SAApDA,YAAqDC,GAAO,IAAD,EAC/DA,EAAEwE,iBACFxE,EAAEyE,kBACF,UAAAb,EAAQG,eAAR,SAAiBhE,YAAYC,IAQzB0E,cAAe,uBAAA1E,GAAC,OAAIA,EAAEwE,uBCjCV1G,QACW,cAA7BmG,OAAOU,SAASC,UAEe,UAA7BX,OAAOU,SAASC,UAEhBX,OAAOU,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDgInB,SAASC,aACV,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaL,gBAEdM,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,YCjI5BP,K","file":"static/js/main.a12aef12.chunk.js","sourcesContent":["import { Component, Types } from \"ecsy\";\n\ninterface PositionProps {\n  x: number,\n  y: number,\n}\n\nclass Position extends Component<PositionProps> {\n  x: number = 0\n  y: number = 0\n}\n\nPosition.schema = {\n  x: { type: Types.Number },\n  y: { type: Types.Number },\n}\n\nexport default Position","import { TagComponent } from \"ecsy\";\n\nclass Renderable extends TagComponent {}\n\nexport default Renderable","import { Component, Types } from \"ecsy\";\n\nexport interface SelectableProps {\n  selected: boolean;\n}\n\nclass Selectable extends Component<SelectableProps> {\n  selected: boolean = false\n\n  toggle = () => {\n    this.selected = !this.selected\n  }\n}\n\nSelectable.schema = {\n  selected: { type: Types.Boolean },\n}\n\nexport default Selectable","import { System, World } from \"ecsy\";\nimport Renderable from \"../components/Renderable\";\nimport Position from \"../components/Position\";\nimport Selectable from \"../components/Selectable\";\n\ninterface Attributes {\n  priority?: number;\n  canvas: HTMLCanvasElement;\n}\n\nclass Renderer extends System {\n  private canvas: HTMLCanvasElement;\n\n  constructor(world: World, { canvas, priority }: Attributes) {\n    super(world, { priority })\n    this.canvas = canvas\n  }\n\n  execute(delta: number, time: number): void {\n    this.clear()\n    this.queries.renderables.results.forEach(entity => {\n      const { x, y } = entity.getComponent(Position)\n      const { selected } = entity.getComponent(Selectable) ?? { selected: false }\n\n      this.drawCircle({x, y, selected})\n    })\n  }\n\n  private clear = () => {\n    const ctx = this.canvas.getContext('2d')\n    if (!ctx) return\n\n    ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n  }\n\n  private drawCircle = ({x, y, selected}: {x: number, y: number, selected: boolean}) => {\n    const ctx = this.canvas.getContext('2d')\n    if (!ctx) return\n\n    ctx.fillStyle = \"#888\"\n    ctx.beginPath()\n    ctx.arc(x, y, 10, 0, 2 * Math.PI, false)\n    ctx.fill()\n    ctx.lineWidth = 1\n    ctx.strokeStyle = selected ? \"#F22\" : \"#222\"\n    ctx.stroke()    \n  }\n}\n\nRenderer.queries = {\n  renderables: { components: [Renderable, Position] }\n}\n\nexport default Renderer","import { System } from \"ecsy\";\nimport Position from \"../components/Position\";\nimport Selectable from \"../components/Selectable\";\n\nclass SelectionToggler extends System {\n  execute(_delta: number, _time: number): void {}\n\n  onMouseDown = (e: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => {\n    if (e.button !== 0) return;\n\n    const {clientX, clientY} = e\n\n    this.queries.selectables.results.forEach(entity => {\n      const { x, y } = entity.getComponent(Position)\n\n      const dX = x - clientX\n      const dY = y - clientY\n\n      const distance = Math.sqrt( (dX*dX) + (dY*dY) )\n      if (distance <= 10) {\n        entity.getMutableComponent(Selectable).toggle()\n      }\n    })\n  };\n\n}\n\nSelectionToggler.queries = {\n  selectables: { components: [Selectable, Position] }\n}\n\nexport default SelectionToggler","import { Component, Types } from \"ecsy\";\n\ninterface MoveableProps {\n  hasDestination: boolean;\n  destinationX: number;\n  destinationY: number;\n  speed: number;\n}\n\nclass Moveable extends Component<MoveableProps> {\n  hasDestination = false\n  destinationX = 0\n  destinationY = 0\n  speed = 100\n}\n\nMoveable.schema = {\n  hasDestination: { type: Types.Boolean },\n  destinationX: { type: Types.Number, },\n  destinationY: { type: Types.Number, },\n  speed: { type: Types.Number, },\n}\n\nexport default Moveable","\ninterface Position {\n  x: number;\n  y: number;\n}\n\nconst positionsAreClose = (a: Position, b: Position, threshold: number) => {\n  const dX = a.x - b.x\n  const dY = a.y - b.y\n  const distance = Math.sqrt( (dX*dX) + (dY*dY) )\n\n  return distance <= threshold\n}\n\nexport default positionsAreClose","import { System } from \"ecsy\";\nimport Moveable from \"../components/Moveable\";\nimport Position from \"../components/Position\";\nimport Selectable from \"../components/Selectable\";\nimport positionsAreClose from \"../utils/positionsAreClose\";\n\nconst unitVector = ({ x, y }: { x: number, y: number }) => {\n  const r = Math.sqrt(x*x + y*y)\n\n  return {\n    x: x / r,\n    y: y / r,\n  }\n}\n\nclass Mover extends System {\n  execute(delta: number, _time: number): void {\n    this.withDestination().forEach(entity => {\n      const position = entity.getMutableComponent(Position)\n      const { destinationX, destinationY, speed } = entity.getComponent(Moveable)\n\n      const destination = { x: destinationX, y: destinationY }\n\n      const vector = unitVector({\n        x: destination.x - position.x,\n        y: destination.y - position.y,\n      })\n\n      const mX = vector.x * (delta * speed / 1000)\n      const mY = vector.y * (delta * speed / 1000)\n\n      position.x += mX\n      position.y += mY\n\n      if (positionsAreClose(position, destination, 1)) {\n        entity.getMutableComponent(Moveable).hasDestination = false\n      }\n    })\n  }\n\n  onMouseDown = (e: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => {\n    if (e.button !== 2) return;\n\n    const {clientX, clientY} = e\n\n    this.selected().forEach(entity => {\n      const moveable = entity.getMutableComponent(Moveable)\n      moveable.hasDestination = true\n      moveable.destinationX = clientX\n      moveable.destinationY = clientY\n    });\n  }\n\n  selected = () => {\n    return this.queries.selectables.results.filter(entity => {\n      return entity.getComponent(Selectable).selected\n    })\n  }\n\n  withDestination = () => {\n    return this.queries.moveables.results.filter(entity => {\n      return entity.getComponent(Moveable).hasDestination\n    })\n  }\n}\n\nMover.queries = {\n  moveables: { components: [ Moveable, Position ] },\n  selectables: { components: [ Moveable, Selectable ] },\n}\n\nexport default Mover","import { System, Entity } from \"ecsy\";\nimport Moveable from \"../components/Moveable\";\nimport Position from \"../components/Position\";\nimport positionsAreClose from \"../utils/positionsAreClose\";\n\n\nclass Stopper extends System {\n  execute(_delta: number, _time: number): void {\n    this.queries.moveables.results.forEach(this.stopIfColliding)\n  }\n\n  private stopIfColliding = (entity: Entity) => {\n    const position = entity.getComponent(Position)\n\n    this.queries.moveables.results.forEach(other => {\n      if (entity === other) return;\n\n      const otherPosition = other.getComponent(Position)\n\n      if (positionsAreClose(position, otherPosition, 20)) {\n        entity.getMutableComponent(Moveable).hasDestination = false\n      }\n    })\n  }\n}\n\nStopper.queries = {\n  moveables: { components: [ Moveable, Position ] },\n}\n\nexport default Stopper","import { World } from 'ecsy'\nimport Position from './components/Position'\nimport Renderable from './components/Renderable'\nimport Renderer from './systems/Renderer'\nimport Selectable from './components/Selectable'\nimport SelectionToggler from './systems/SelectionToggler'\nimport Mover from './systems/Mover'\nimport Moveable from './components/Moveable'\nimport Stopper from './systems/Stopper'\n\nclass Game {\n  private world: World\n  private canvas: HTMLCanvasElement\n  private lastTime: number\n  private animationFrameRequest: number | null\n\n  constructor({canvas}: {canvas: HTMLCanvasElement}) {\n    this.canvas = canvas\n    this.lastTime = performance.now()\n    this.animationFrameRequest = null\n    this.world = new World()\n      .registerSystem(Renderer, { canvas })\n      .registerSystem(SelectionToggler)\n      .registerSystem(Mover)\n      .registerSystem(Stopper)\n      .registerComponent(Position)\n      .registerComponent(Selectable)\n      .registerComponent(Moveable)\n      .registerComponent(Renderable)\n  }\n\n  start = () => {\n    for (let i = 0; i < 10; i++) {\n      this.world.createEntity()\n        .addComponent(Position, {x: 50 * i, y: 50 * i})\n        .addComponent(Selectable)\n        .addComponent(Moveable)\n        .addComponent(Renderable)\n    }\n    this.run();\n  }\n\n  stop = () => {\n    if (!this.animationFrameRequest) return\n\n    cancelAnimationFrame(this.animationFrameRequest)\n  }\n\n  onMouseDown = (e: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => {\n    const moveCommander = this.world.getSystem(Mover) as Mover\n    const selectionToggler = this.world.getSystem(SelectionToggler) as SelectionToggler\n\n    moveCommander.onMouseDown(e)\n    selectionToggler.onMouseDown(e)\n  }\n\n  private run =  () => {\n     // Compute delta and elapsed time\n     const time = performance.now()\n     const delta = time - this.lastTime\n\n     // Run all the systems\n     this.world.execute(delta, time)\n\n     this.lastTime = time\n     this.animationFrameRequest = requestAnimationFrame(this.run)\n  }\n}\n\nexport default Game","import React, { MouseEventHandler } from 'react';\n\nimport Game from './ecs/Game'\nimport './App.css';\n\nconst App = () => {\n  const [canvas, setCanvas] = React.useState<HTMLCanvasElement | null>(null);\n  const gameRef = React.useRef<Game | null>(null)\n\n  React.useEffect(() => {\n    if (!canvas) return;\n\n    gameRef.current = new Game({canvas})\n    gameRef.current.start()\n\n    return () => {\n      gameRef.current?.stop()\n      gameRef.current = null\n    }\n  }, [canvas])\n\n  React.useEffect(() => {\n    const handleResize = () => {\n      if (!canvas) return\n\n      canvas.width = window.innerWidth\n      canvas.height = window.innerHeight\n    }\n\n    handleResize()\n    window.addEventListener('resize', handleResize)\n    return () => window.removeEventListener('resize', handleResize)\n  }, [canvas])\n\n  const onMouseDown: MouseEventHandler<HTMLCanvasElement> = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    gameRef.current?.onMouseDown(e)\n  }\n\n  return (\n    <div className=\"App\">\n      <canvas \n        ref={setCanvas} \n        onMouseDown={onMouseDown} \n        onContextMenu={e => e.preventDefault()} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}